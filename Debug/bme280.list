
bme280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005de8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08005ef8  08005ef8  00015ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006148  08006148  00016148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006154  08006154  00016154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08006158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000020c  200001dc  08006334  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003e8  08006334  000203e8  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e71b  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003dc9  00000000  00000000  0003e920  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a96a  00000000  00000000  000426e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d20  00000000  00000000  0004d058  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001288  00000000  00000000  0004dd78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000883d  00000000  00000000  0004f000  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000047b0  00000000  00000000  0005783d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005bfed  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000030a4  00000000  00000000  0005c06c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ee0 	.word	0x08005ee0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005ee0 	.word	0x08005ee0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_frsub>:
 8000a80:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a84:	e002      	b.n	8000a8c <__addsf3>
 8000a86:	bf00      	nop

08000a88 <__aeabi_fsub>:
 8000a88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a8c <__addsf3>:
 8000a8c:	0042      	lsls	r2, r0, #1
 8000a8e:	bf1f      	itttt	ne
 8000a90:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a94:	ea92 0f03 	teqne	r2, r3
 8000a98:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a9c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa0:	d06a      	beq.n	8000b78 <__addsf3+0xec>
 8000aa2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aa6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aaa:	bfc1      	itttt	gt
 8000aac:	18d2      	addgt	r2, r2, r3
 8000aae:	4041      	eorgt	r1, r0
 8000ab0:	4048      	eorgt	r0, r1
 8000ab2:	4041      	eorgt	r1, r0
 8000ab4:	bfb8      	it	lt
 8000ab6:	425b      	neglt	r3, r3
 8000ab8:	2b19      	cmp	r3, #25
 8000aba:	bf88      	it	hi
 8000abc:	4770      	bxhi	lr
 8000abe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ac2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ad6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ada:	bf18      	it	ne
 8000adc:	4249      	negne	r1, r1
 8000ade:	ea92 0f03 	teq	r2, r3
 8000ae2:	d03f      	beq.n	8000b64 <__addsf3+0xd8>
 8000ae4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae8:	fa41 fc03 	asr.w	ip, r1, r3
 8000aec:	eb10 000c 	adds.w	r0, r0, ip
 8000af0:	f1c3 0320 	rsb	r3, r3, #32
 8000af4:	fa01 f103 	lsl.w	r1, r1, r3
 8000af8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000afc:	d502      	bpl.n	8000b04 <__addsf3+0x78>
 8000afe:	4249      	negs	r1, r1
 8000b00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b08:	d313      	bcc.n	8000b32 <__addsf3+0xa6>
 8000b0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b0e:	d306      	bcc.n	8000b1e <__addsf3+0x92>
 8000b10:	0840      	lsrs	r0, r0, #1
 8000b12:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b16:	f102 0201 	add.w	r2, r2, #1
 8000b1a:	2afe      	cmp	r2, #254	; 0xfe
 8000b1c:	d251      	bcs.n	8000bc2 <__addsf3+0x136>
 8000b1e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b26:	bf08      	it	eq
 8000b28:	f020 0001 	biceq.w	r0, r0, #1
 8000b2c:	ea40 0003 	orr.w	r0, r0, r3
 8000b30:	4770      	bx	lr
 8000b32:	0049      	lsls	r1, r1, #1
 8000b34:	eb40 0000 	adc.w	r0, r0, r0
 8000b38:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	d1ed      	bne.n	8000b1e <__addsf3+0x92>
 8000b42:	fab0 fc80 	clz	ip, r0
 8000b46:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b4a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b4e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b52:	bfaa      	itet	ge
 8000b54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b58:	4252      	neglt	r2, r2
 8000b5a:	4318      	orrge	r0, r3
 8000b5c:	bfbc      	itt	lt
 8000b5e:	40d0      	lsrlt	r0, r2
 8000b60:	4318      	orrlt	r0, r3
 8000b62:	4770      	bx	lr
 8000b64:	f092 0f00 	teq	r2, #0
 8000b68:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b6c:	bf06      	itte	eq
 8000b6e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b72:	3201      	addeq	r2, #1
 8000b74:	3b01      	subne	r3, #1
 8000b76:	e7b5      	b.n	8000ae4 <__addsf3+0x58>
 8000b78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b80:	bf18      	it	ne
 8000b82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b86:	d021      	beq.n	8000bcc <__addsf3+0x140>
 8000b88:	ea92 0f03 	teq	r2, r3
 8000b8c:	d004      	beq.n	8000b98 <__addsf3+0x10c>
 8000b8e:	f092 0f00 	teq	r2, #0
 8000b92:	bf08      	it	eq
 8000b94:	4608      	moveq	r0, r1
 8000b96:	4770      	bx	lr
 8000b98:	ea90 0f01 	teq	r0, r1
 8000b9c:	bf1c      	itt	ne
 8000b9e:	2000      	movne	r0, #0
 8000ba0:	4770      	bxne	lr
 8000ba2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ba6:	d104      	bne.n	8000bb2 <__addsf3+0x126>
 8000ba8:	0040      	lsls	r0, r0, #1
 8000baa:	bf28      	it	cs
 8000bac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb0:	4770      	bx	lr
 8000bb2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bb6:	bf3c      	itt	cc
 8000bb8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bxcc	lr
 8000bbe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bca:	4770      	bx	lr
 8000bcc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd0:	bf16      	itet	ne
 8000bd2:	4608      	movne	r0, r1
 8000bd4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd8:	4601      	movne	r1, r0
 8000bda:	0242      	lsls	r2, r0, #9
 8000bdc:	bf06      	itte	eq
 8000bde:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000be2:	ea90 0f01 	teqeq	r0, r1
 8000be6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bea:	4770      	bx	lr

08000bec <__aeabi_ui2f>:
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e004      	b.n	8000bfc <__aeabi_i2f+0x8>
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_i2f>:
 8000bf4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	bf48      	it	mi
 8000bfa:	4240      	negmi	r0, r0
 8000bfc:	ea5f 0c00 	movs.w	ip, r0
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c08:	4601      	mov	r1, r0
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	e01c      	b.n	8000c4a <__aeabi_l2f+0x2a>

08000c10 <__aeabi_ul2f>:
 8000c10:	ea50 0201 	orrs.w	r2, r0, r1
 8000c14:	bf08      	it	eq
 8000c16:	4770      	bxeq	lr
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e00a      	b.n	8000c34 <__aeabi_l2f+0x14>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_l2f>:
 8000c20:	ea50 0201 	orrs.w	r2, r0, r1
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c2c:	d502      	bpl.n	8000c34 <__aeabi_l2f+0x14>
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	ea5f 0c01 	movs.w	ip, r1
 8000c38:	bf02      	ittt	eq
 8000c3a:	4684      	moveq	ip, r0
 8000c3c:	4601      	moveq	r1, r0
 8000c3e:	2000      	moveq	r0, #0
 8000c40:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c44:	bf08      	it	eq
 8000c46:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c4e:	fabc f28c 	clz	r2, ip
 8000c52:	3a08      	subs	r2, #8
 8000c54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c58:	db10      	blt.n	8000c7c <__aeabi_l2f+0x5c>
 8000c5a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c5e:	4463      	add	r3, ip
 8000c60:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c64:	f1c2 0220 	rsb	r2, r2, #32
 8000c68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c70:	eb43 0002 	adc.w	r0, r3, r2
 8000c74:	bf08      	it	eq
 8000c76:	f020 0001 	biceq.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	f102 0220 	add.w	r2, r2, #32
 8000c80:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c84:	f1c2 0220 	rsb	r2, r2, #32
 8000c88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c8c:	fa21 f202 	lsr.w	r2, r1, r2
 8000c90:	eb43 0002 	adc.w	r0, r3, r2
 8000c94:	bf08      	it	eq
 8000c96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_fmul>:
 8000c9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ca4:	bf1e      	ittt	ne
 8000ca6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000caa:	ea92 0f0c 	teqne	r2, ip
 8000cae:	ea93 0f0c 	teqne	r3, ip
 8000cb2:	d06f      	beq.n	8000d94 <__aeabi_fmul+0xf8>
 8000cb4:	441a      	add	r2, r3
 8000cb6:	ea80 0c01 	eor.w	ip, r0, r1
 8000cba:	0240      	lsls	r0, r0, #9
 8000cbc:	bf18      	it	ne
 8000cbe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cc2:	d01e      	beq.n	8000d02 <__aeabi_fmul+0x66>
 8000cc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cc8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ccc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd0:	fba0 3101 	umull	r3, r1, r0, r1
 8000cd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cd8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cdc:	bf3e      	ittt	cc
 8000cde:	0049      	lslcc	r1, r1, #1
 8000ce0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ce4:	005b      	lslcc	r3, r3, #1
 8000ce6:	ea40 0001 	orr.w	r0, r0, r1
 8000cea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cee:	2afd      	cmp	r2, #253	; 0xfd
 8000cf0:	d81d      	bhi.n	8000d2e <__aeabi_fmul+0x92>
 8000cf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	4770      	bx	lr
 8000d02:	f090 0f00 	teq	r0, #0
 8000d06:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d0a:	bf08      	it	eq
 8000d0c:	0249      	lsleq	r1, r1, #9
 8000d0e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d12:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d16:	3a7f      	subs	r2, #127	; 0x7f
 8000d18:	bfc2      	ittt	gt
 8000d1a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d1e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d22:	4770      	bxgt	lr
 8000d24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	3a01      	subs	r2, #1
 8000d2e:	dc5d      	bgt.n	8000dec <__aeabi_fmul+0x150>
 8000d30:	f112 0f19 	cmn.w	r2, #25
 8000d34:	bfdc      	itt	le
 8000d36:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d3a:	4770      	bxle	lr
 8000d3c:	f1c2 0200 	rsb	r2, r2, #0
 8000d40:	0041      	lsls	r1, r0, #1
 8000d42:	fa21 f102 	lsr.w	r1, r1, r2
 8000d46:	f1c2 0220 	rsb	r2, r2, #32
 8000d4a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d52:	f140 0000 	adc.w	r0, r0, #0
 8000d56:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d5a:	bf08      	it	eq
 8000d5c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d60:	4770      	bx	lr
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0040      	lsleq	r0, r0, #1
 8000d6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d72:	3a01      	subeq	r2, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fmul+0xce>
 8000d76:	ea40 000c 	orr.w	r0, r0, ip
 8000d7a:	f093 0f00 	teq	r3, #0
 8000d7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d82:	bf02      	ittt	eq
 8000d84:	0049      	lsleq	r1, r1, #1
 8000d86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d8a:	3b01      	subeq	r3, #1
 8000d8c:	d0f9      	beq.n	8000d82 <__aeabi_fmul+0xe6>
 8000d8e:	ea41 010c 	orr.w	r1, r1, ip
 8000d92:	e78f      	b.n	8000cb4 <__aeabi_fmul+0x18>
 8000d94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d98:	ea92 0f0c 	teq	r2, ip
 8000d9c:	bf18      	it	ne
 8000d9e:	ea93 0f0c 	teqne	r3, ip
 8000da2:	d00a      	beq.n	8000dba <__aeabi_fmul+0x11e>
 8000da4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000da8:	bf18      	it	ne
 8000daa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dae:	d1d8      	bne.n	8000d62 <__aeabi_fmul+0xc6>
 8000db0:	ea80 0001 	eor.w	r0, r0, r1
 8000db4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f090 0f00 	teq	r0, #0
 8000dbe:	bf17      	itett	ne
 8000dc0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dc4:	4608      	moveq	r0, r1
 8000dc6:	f091 0f00 	teqne	r1, #0
 8000dca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dce:	d014      	beq.n	8000dfa <__aeabi_fmul+0x15e>
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	d101      	bne.n	8000dda <__aeabi_fmul+0x13e>
 8000dd6:	0242      	lsls	r2, r0, #9
 8000dd8:	d10f      	bne.n	8000dfa <__aeabi_fmul+0x15e>
 8000dda:	ea93 0f0c 	teq	r3, ip
 8000dde:	d103      	bne.n	8000de8 <__aeabi_fmul+0x14c>
 8000de0:	024b      	lsls	r3, r1, #9
 8000de2:	bf18      	it	ne
 8000de4:	4608      	movne	r0, r1
 8000de6:	d108      	bne.n	8000dfa <__aeabi_fmul+0x15e>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	4770      	bx	lr
 8000dfa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_fdiv>:
 8000e04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e0c:	bf1e      	ittt	ne
 8000e0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e12:	ea92 0f0c 	teqne	r2, ip
 8000e16:	ea93 0f0c 	teqne	r3, ip
 8000e1a:	d069      	beq.n	8000ef0 <__aeabi_fdiv+0xec>
 8000e1c:	eba2 0203 	sub.w	r2, r2, r3
 8000e20:	ea80 0c01 	eor.w	ip, r0, r1
 8000e24:	0249      	lsls	r1, r1, #9
 8000e26:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e2a:	d037      	beq.n	8000e9c <__aeabi_fdiv+0x98>
 8000e2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	bf38      	it	cc
 8000e40:	005b      	lslcc	r3, r3, #1
 8000e42:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e46:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	bf24      	itt	cs
 8000e4e:	1a5b      	subcs	r3, r3, r1
 8000e50:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e58:	bf24      	itt	cs
 8000e5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e66:	bf24      	itt	cs
 8000e68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	bf18      	it	ne
 8000e82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e86:	d1e0      	bne.n	8000e4a <__aeabi_fdiv+0x46>
 8000e88:	2afd      	cmp	r2, #253	; 0xfd
 8000e8a:	f63f af50 	bhi.w	8000d2e <__aeabi_fmul+0x92>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e94:	bf08      	it	eq
 8000e96:	f020 0001 	biceq.w	r0, r0, #1
 8000e9a:	4770      	bx	lr
 8000e9c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ea4:	327f      	adds	r2, #127	; 0x7f
 8000ea6:	bfc2      	ittt	gt
 8000ea8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb0:	4770      	bxgt	lr
 8000eb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb6:	f04f 0300 	mov.w	r3, #0
 8000eba:	3a01      	subs	r2, #1
 8000ebc:	e737      	b.n	8000d2e <__aeabi_fmul+0x92>
 8000ebe:	f092 0f00 	teq	r2, #0
 8000ec2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0040      	lsleq	r0, r0, #1
 8000eca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ece:	3a01      	subeq	r2, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fdiv+0xc2>
 8000ed2:	ea40 000c 	orr.w	r0, r0, ip
 8000ed6:	f093 0f00 	teq	r3, #0
 8000eda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ede:	bf02      	ittt	eq
 8000ee0:	0049      	lsleq	r1, r1, #1
 8000ee2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ee6:	3b01      	subeq	r3, #1
 8000ee8:	d0f9      	beq.n	8000ede <__aeabi_fdiv+0xda>
 8000eea:	ea41 010c 	orr.w	r1, r1, ip
 8000eee:	e795      	b.n	8000e1c <__aeabi_fdiv+0x18>
 8000ef0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef4:	ea92 0f0c 	teq	r2, ip
 8000ef8:	d108      	bne.n	8000f0c <__aeabi_fdiv+0x108>
 8000efa:	0242      	lsls	r2, r0, #9
 8000efc:	f47f af7d 	bne.w	8000dfa <__aeabi_fmul+0x15e>
 8000f00:	ea93 0f0c 	teq	r3, ip
 8000f04:	f47f af70 	bne.w	8000de8 <__aeabi_fmul+0x14c>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e776      	b.n	8000dfa <__aeabi_fmul+0x15e>
 8000f0c:	ea93 0f0c 	teq	r3, ip
 8000f10:	d104      	bne.n	8000f1c <__aeabi_fdiv+0x118>
 8000f12:	024b      	lsls	r3, r1, #9
 8000f14:	f43f af4c 	beq.w	8000db0 <__aeabi_fmul+0x114>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e76e      	b.n	8000dfa <__aeabi_fmul+0x15e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	d1ca      	bne.n	8000ebe <__aeabi_fdiv+0xba>
 8000f28:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f2c:	f47f af5c 	bne.w	8000de8 <__aeabi_fmul+0x14c>
 8000f30:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f34:	f47f af3c 	bne.w	8000db0 <__aeabi_fmul+0x114>
 8000f38:	e75f      	b.n	8000dfa <__aeabi_fmul+0x15e>
 8000f3a:	bf00      	nop

08000f3c <__gesf2>:
 8000f3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000f40:	e006      	b.n	8000f50 <__cmpsf2+0x4>
 8000f42:	bf00      	nop

08000f44 <__lesf2>:
 8000f44:	f04f 0c01 	mov.w	ip, #1
 8000f48:	e002      	b.n	8000f50 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__cmpsf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f54:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f60:	bf18      	it	ne
 8000f62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f66:	d011      	beq.n	8000f8c <__cmpsf2+0x40>
 8000f68:	b001      	add	sp, #4
 8000f6a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f6e:	bf18      	it	ne
 8000f70:	ea90 0f01 	teqne	r0, r1
 8000f74:	bf58      	it	pl
 8000f76:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f7a:	bf88      	it	hi
 8000f7c:	17c8      	asrhi	r0, r1, #31
 8000f7e:	bf38      	it	cc
 8000f80:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f84:	bf18      	it	ne
 8000f86:	f040 0001 	orrne.w	r0, r0, #1
 8000f8a:	4770      	bx	lr
 8000f8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f90:	d102      	bne.n	8000f98 <__cmpsf2+0x4c>
 8000f92:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f96:	d105      	bne.n	8000fa4 <__cmpsf2+0x58>
 8000f98:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f9c:	d1e4      	bne.n	8000f68 <__cmpsf2+0x1c>
 8000f9e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fa2:	d0e1      	beq.n	8000f68 <__cmpsf2+0x1c>
 8000fa4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <__aeabi_cfrcmple>:
 8000fac:	4684      	mov	ip, r0
 8000fae:	4608      	mov	r0, r1
 8000fb0:	4661      	mov	r1, ip
 8000fb2:	e7ff      	b.n	8000fb4 <__aeabi_cfcmpeq>

08000fb4 <__aeabi_cfcmpeq>:
 8000fb4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fb6:	f7ff ffc9 	bl	8000f4c <__cmpsf2>
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	bf48      	it	mi
 8000fbe:	f110 0f00 	cmnmi.w	r0, #0
 8000fc2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fc4 <__aeabi_fcmpeq>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff fff4 	bl	8000fb4 <__aeabi_cfcmpeq>
 8000fcc:	bf0c      	ite	eq
 8000fce:	2001      	moveq	r0, #1
 8000fd0:	2000      	movne	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_fcmplt>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff ffea 	bl	8000fb4 <__aeabi_cfcmpeq>
 8000fe0:	bf34      	ite	cc
 8000fe2:	2001      	movcc	r0, #1
 8000fe4:	2000      	movcs	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_fcmple>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff ffe0 	bl	8000fb4 <__aeabi_cfcmpeq>
 8000ff4:	bf94      	ite	ls
 8000ff6:	2001      	movls	r0, #1
 8000ff8:	2000      	movhi	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmpge>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffd2 	bl	8000fac <__aeabi_cfrcmple>
 8001008:	bf94      	ite	ls
 800100a:	2001      	movls	r0, #1
 800100c:	2000      	movhi	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_fcmpgt>:
 8001014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001018:	f7ff ffc8 	bl	8000fac <__aeabi_cfrcmple>
 800101c:	bf34      	ite	cc
 800101e:	2001      	movcc	r0, #1
 8001020:	2000      	movcs	r0, #0
 8001022:	f85d fb08 	ldr.w	pc, [sp], #8
 8001026:	bf00      	nop

08001028 <__aeabi_ldivmod>:
 8001028:	b97b      	cbnz	r3, 800104a <__aeabi_ldivmod+0x22>
 800102a:	b972      	cbnz	r2, 800104a <__aeabi_ldivmod+0x22>
 800102c:	2900      	cmp	r1, #0
 800102e:	bfbe      	ittt	lt
 8001030:	2000      	movlt	r0, #0
 8001032:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8001036:	e006      	blt.n	8001046 <__aeabi_ldivmod+0x1e>
 8001038:	bf08      	it	eq
 800103a:	2800      	cmpeq	r0, #0
 800103c:	bf1c      	itt	ne
 800103e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8001042:	f04f 30ff 	movne.w	r0, #4294967295
 8001046:	f000 b9ad 	b.w	80013a4 <__aeabi_idiv0>
 800104a:	f1ad 0c08 	sub.w	ip, sp, #8
 800104e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001052:	2900      	cmp	r1, #0
 8001054:	db09      	blt.n	800106a <__aeabi_ldivmod+0x42>
 8001056:	2b00      	cmp	r3, #0
 8001058:	db1a      	blt.n	8001090 <__aeabi_ldivmod+0x68>
 800105a:	f000 f835 	bl	80010c8 <__udivmoddi4>
 800105e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001062:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001066:	b004      	add	sp, #16
 8001068:	4770      	bx	lr
 800106a:	4240      	negs	r0, r0
 800106c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001070:	2b00      	cmp	r3, #0
 8001072:	db1b      	blt.n	80010ac <__aeabi_ldivmod+0x84>
 8001074:	f000 f828 	bl	80010c8 <__udivmoddi4>
 8001078:	f8dd e004 	ldr.w	lr, [sp, #4]
 800107c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001080:	b004      	add	sp, #16
 8001082:	4240      	negs	r0, r0
 8001084:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001088:	4252      	negs	r2, r2
 800108a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800108e:	4770      	bx	lr
 8001090:	4252      	negs	r2, r2
 8001092:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001096:	f000 f817 	bl	80010c8 <__udivmoddi4>
 800109a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800109e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010a2:	b004      	add	sp, #16
 80010a4:	4240      	negs	r0, r0
 80010a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010aa:	4770      	bx	lr
 80010ac:	4252      	negs	r2, r2
 80010ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010b2:	f000 f809 	bl	80010c8 <__udivmoddi4>
 80010b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010be:	b004      	add	sp, #16
 80010c0:	4252      	negs	r2, r2
 80010c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010c6:	4770      	bx	lr

080010c8 <__udivmoddi4>:
 80010c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010cc:	468c      	mov	ip, r1
 80010ce:	460e      	mov	r6, r1
 80010d0:	4604      	mov	r4, r0
 80010d2:	9d08      	ldr	r5, [sp, #32]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d150      	bne.n	800117a <__udivmoddi4+0xb2>
 80010d8:	428a      	cmp	r2, r1
 80010da:	4617      	mov	r7, r2
 80010dc:	d96c      	bls.n	80011b8 <__udivmoddi4+0xf0>
 80010de:	fab2 fe82 	clz	lr, r2
 80010e2:	f1be 0f00 	cmp.w	lr, #0
 80010e6:	d00b      	beq.n	8001100 <__udivmoddi4+0x38>
 80010e8:	f1ce 0c20 	rsb	ip, lr, #32
 80010ec:	fa01 f60e 	lsl.w	r6, r1, lr
 80010f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80010f4:	fa02 f70e 	lsl.w	r7, r2, lr
 80010f8:	ea4c 0c06 	orr.w	ip, ip, r6
 80010fc:	fa00 f40e 	lsl.w	r4, r0, lr
 8001100:	0c3a      	lsrs	r2, r7, #16
 8001102:	fbbc f9f2 	udiv	r9, ip, r2
 8001106:	b2bb      	uxth	r3, r7
 8001108:	fb02 cc19 	mls	ip, r2, r9, ip
 800110c:	fb09 fa03 	mul.w	sl, r9, r3
 8001110:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8001114:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8001118:	45b2      	cmp	sl, r6
 800111a:	d90a      	bls.n	8001132 <__udivmoddi4+0x6a>
 800111c:	19f6      	adds	r6, r6, r7
 800111e:	f109 31ff 	add.w	r1, r9, #4294967295
 8001122:	f080 8125 	bcs.w	8001370 <__udivmoddi4+0x2a8>
 8001126:	45b2      	cmp	sl, r6
 8001128:	f240 8122 	bls.w	8001370 <__udivmoddi4+0x2a8>
 800112c:	f1a9 0902 	sub.w	r9, r9, #2
 8001130:	443e      	add	r6, r7
 8001132:	eba6 060a 	sub.w	r6, r6, sl
 8001136:	fbb6 f0f2 	udiv	r0, r6, r2
 800113a:	fb02 6610 	mls	r6, r2, r0, r6
 800113e:	fb00 f303 	mul.w	r3, r0, r3
 8001142:	b2a4      	uxth	r4, r4
 8001144:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001148:	42a3      	cmp	r3, r4
 800114a:	d909      	bls.n	8001160 <__udivmoddi4+0x98>
 800114c:	19e4      	adds	r4, r4, r7
 800114e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001152:	f080 810b 	bcs.w	800136c <__udivmoddi4+0x2a4>
 8001156:	42a3      	cmp	r3, r4
 8001158:	f240 8108 	bls.w	800136c <__udivmoddi4+0x2a4>
 800115c:	3802      	subs	r0, #2
 800115e:	443c      	add	r4, r7
 8001160:	2100      	movs	r1, #0
 8001162:	1ae4      	subs	r4, r4, r3
 8001164:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001168:	2d00      	cmp	r5, #0
 800116a:	d062      	beq.n	8001232 <__udivmoddi4+0x16a>
 800116c:	2300      	movs	r3, #0
 800116e:	fa24 f40e 	lsr.w	r4, r4, lr
 8001172:	602c      	str	r4, [r5, #0]
 8001174:	606b      	str	r3, [r5, #4]
 8001176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800117a:	428b      	cmp	r3, r1
 800117c:	d907      	bls.n	800118e <__udivmoddi4+0xc6>
 800117e:	2d00      	cmp	r5, #0
 8001180:	d055      	beq.n	800122e <__udivmoddi4+0x166>
 8001182:	2100      	movs	r1, #0
 8001184:	e885 0041 	stmia.w	r5, {r0, r6}
 8001188:	4608      	mov	r0, r1
 800118a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800118e:	fab3 f183 	clz	r1, r3
 8001192:	2900      	cmp	r1, #0
 8001194:	f040 808f 	bne.w	80012b6 <__udivmoddi4+0x1ee>
 8001198:	42b3      	cmp	r3, r6
 800119a:	d302      	bcc.n	80011a2 <__udivmoddi4+0xda>
 800119c:	4282      	cmp	r2, r0
 800119e:	f200 80fc 	bhi.w	800139a <__udivmoddi4+0x2d2>
 80011a2:	1a84      	subs	r4, r0, r2
 80011a4:	eb66 0603 	sbc.w	r6, r6, r3
 80011a8:	2001      	movs	r0, #1
 80011aa:	46b4      	mov	ip, r6
 80011ac:	2d00      	cmp	r5, #0
 80011ae:	d040      	beq.n	8001232 <__udivmoddi4+0x16a>
 80011b0:	e885 1010 	stmia.w	r5, {r4, ip}
 80011b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011b8:	b912      	cbnz	r2, 80011c0 <__udivmoddi4+0xf8>
 80011ba:	2701      	movs	r7, #1
 80011bc:	fbb7 f7f2 	udiv	r7, r7, r2
 80011c0:	fab7 fe87 	clz	lr, r7
 80011c4:	f1be 0f00 	cmp.w	lr, #0
 80011c8:	d135      	bne.n	8001236 <__udivmoddi4+0x16e>
 80011ca:	2101      	movs	r1, #1
 80011cc:	1bf6      	subs	r6, r6, r7
 80011ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80011d2:	fa1f f887 	uxth.w	r8, r7
 80011d6:	fbb6 f2fc 	udiv	r2, r6, ip
 80011da:	fb0c 6612 	mls	r6, ip, r2, r6
 80011de:	fb08 f002 	mul.w	r0, r8, r2
 80011e2:	0c23      	lsrs	r3, r4, #16
 80011e4:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80011e8:	42b0      	cmp	r0, r6
 80011ea:	d907      	bls.n	80011fc <__udivmoddi4+0x134>
 80011ec:	19f6      	adds	r6, r6, r7
 80011ee:	f102 33ff 	add.w	r3, r2, #4294967295
 80011f2:	d202      	bcs.n	80011fa <__udivmoddi4+0x132>
 80011f4:	42b0      	cmp	r0, r6
 80011f6:	f200 80d2 	bhi.w	800139e <__udivmoddi4+0x2d6>
 80011fa:	461a      	mov	r2, r3
 80011fc:	1a36      	subs	r6, r6, r0
 80011fe:	fbb6 f0fc 	udiv	r0, r6, ip
 8001202:	fb0c 6610 	mls	r6, ip, r0, r6
 8001206:	fb08 f800 	mul.w	r8, r8, r0
 800120a:	b2a3      	uxth	r3, r4
 800120c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8001210:	45a0      	cmp	r8, r4
 8001212:	d907      	bls.n	8001224 <__udivmoddi4+0x15c>
 8001214:	19e4      	adds	r4, r4, r7
 8001216:	f100 33ff 	add.w	r3, r0, #4294967295
 800121a:	d202      	bcs.n	8001222 <__udivmoddi4+0x15a>
 800121c:	45a0      	cmp	r8, r4
 800121e:	f200 80b9 	bhi.w	8001394 <__udivmoddi4+0x2cc>
 8001222:	4618      	mov	r0, r3
 8001224:	eba4 0408 	sub.w	r4, r4, r8
 8001228:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800122c:	e79c      	b.n	8001168 <__udivmoddi4+0xa0>
 800122e:	4629      	mov	r1, r5
 8001230:	4628      	mov	r0, r5
 8001232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001236:	fa07 f70e 	lsl.w	r7, r7, lr
 800123a:	f1ce 0320 	rsb	r3, lr, #32
 800123e:	fa26 f203 	lsr.w	r2, r6, r3
 8001242:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8001246:	fbb2 f1fc 	udiv	r1, r2, ip
 800124a:	fa1f f887 	uxth.w	r8, r7
 800124e:	fb0c 2211 	mls	r2, ip, r1, r2
 8001252:	fa06 f60e 	lsl.w	r6, r6, lr
 8001256:	fa20 f303 	lsr.w	r3, r0, r3
 800125a:	fb01 f908 	mul.w	r9, r1, r8
 800125e:	4333      	orrs	r3, r6
 8001260:	0c1e      	lsrs	r6, r3, #16
 8001262:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8001266:	45b1      	cmp	r9, r6
 8001268:	fa00 f40e 	lsl.w	r4, r0, lr
 800126c:	d909      	bls.n	8001282 <__udivmoddi4+0x1ba>
 800126e:	19f6      	adds	r6, r6, r7
 8001270:	f101 32ff 	add.w	r2, r1, #4294967295
 8001274:	f080 808c 	bcs.w	8001390 <__udivmoddi4+0x2c8>
 8001278:	45b1      	cmp	r9, r6
 800127a:	f240 8089 	bls.w	8001390 <__udivmoddi4+0x2c8>
 800127e:	3902      	subs	r1, #2
 8001280:	443e      	add	r6, r7
 8001282:	eba6 0609 	sub.w	r6, r6, r9
 8001286:	fbb6 f0fc 	udiv	r0, r6, ip
 800128a:	fb0c 6210 	mls	r2, ip, r0, r6
 800128e:	fb00 f908 	mul.w	r9, r0, r8
 8001292:	b29e      	uxth	r6, r3
 8001294:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8001298:	45b1      	cmp	r9, r6
 800129a:	d907      	bls.n	80012ac <__udivmoddi4+0x1e4>
 800129c:	19f6      	adds	r6, r6, r7
 800129e:	f100 33ff 	add.w	r3, r0, #4294967295
 80012a2:	d271      	bcs.n	8001388 <__udivmoddi4+0x2c0>
 80012a4:	45b1      	cmp	r9, r6
 80012a6:	d96f      	bls.n	8001388 <__udivmoddi4+0x2c0>
 80012a8:	3802      	subs	r0, #2
 80012aa:	443e      	add	r6, r7
 80012ac:	eba6 0609 	sub.w	r6, r6, r9
 80012b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80012b4:	e78f      	b.n	80011d6 <__udivmoddi4+0x10e>
 80012b6:	f1c1 0720 	rsb	r7, r1, #32
 80012ba:	fa22 f807 	lsr.w	r8, r2, r7
 80012be:	408b      	lsls	r3, r1
 80012c0:	ea48 0303 	orr.w	r3, r8, r3
 80012c4:	fa26 f407 	lsr.w	r4, r6, r7
 80012c8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80012cc:	fbb4 f9fe 	udiv	r9, r4, lr
 80012d0:	fa1f fc83 	uxth.w	ip, r3
 80012d4:	fb0e 4419 	mls	r4, lr, r9, r4
 80012d8:	408e      	lsls	r6, r1
 80012da:	fa20 f807 	lsr.w	r8, r0, r7
 80012de:	fb09 fa0c 	mul.w	sl, r9, ip
 80012e2:	ea48 0806 	orr.w	r8, r8, r6
 80012e6:	ea4f 4618 	mov.w	r6, r8, lsr #16
 80012ea:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 80012ee:	45a2      	cmp	sl, r4
 80012f0:	fa02 f201 	lsl.w	r2, r2, r1
 80012f4:	fa00 f601 	lsl.w	r6, r0, r1
 80012f8:	d908      	bls.n	800130c <__udivmoddi4+0x244>
 80012fa:	18e4      	adds	r4, r4, r3
 80012fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8001300:	d244      	bcs.n	800138c <__udivmoddi4+0x2c4>
 8001302:	45a2      	cmp	sl, r4
 8001304:	d942      	bls.n	800138c <__udivmoddi4+0x2c4>
 8001306:	f1a9 0902 	sub.w	r9, r9, #2
 800130a:	441c      	add	r4, r3
 800130c:	eba4 040a 	sub.w	r4, r4, sl
 8001310:	fbb4 f0fe 	udiv	r0, r4, lr
 8001314:	fb0e 4410 	mls	r4, lr, r0, r4
 8001318:	fb00 fc0c 	mul.w	ip, r0, ip
 800131c:	fa1f f888 	uxth.w	r8, r8
 8001320:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8001324:	45a4      	cmp	ip, r4
 8001326:	d907      	bls.n	8001338 <__udivmoddi4+0x270>
 8001328:	18e4      	adds	r4, r4, r3
 800132a:	f100 3eff 	add.w	lr, r0, #4294967295
 800132e:	d229      	bcs.n	8001384 <__udivmoddi4+0x2bc>
 8001330:	45a4      	cmp	ip, r4
 8001332:	d927      	bls.n	8001384 <__udivmoddi4+0x2bc>
 8001334:	3802      	subs	r0, #2
 8001336:	441c      	add	r4, r3
 8001338:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800133c:	fba0 8902 	umull	r8, r9, r0, r2
 8001340:	eba4 0c0c 	sub.w	ip, r4, ip
 8001344:	45cc      	cmp	ip, r9
 8001346:	46c2      	mov	sl, r8
 8001348:	46ce      	mov	lr, r9
 800134a:	d315      	bcc.n	8001378 <__udivmoddi4+0x2b0>
 800134c:	d012      	beq.n	8001374 <__udivmoddi4+0x2ac>
 800134e:	b155      	cbz	r5, 8001366 <__udivmoddi4+0x29e>
 8001350:	ebb6 030a 	subs.w	r3, r6, sl
 8001354:	eb6c 060e 	sbc.w	r6, ip, lr
 8001358:	fa06 f707 	lsl.w	r7, r6, r7
 800135c:	40cb      	lsrs	r3, r1
 800135e:	431f      	orrs	r7, r3
 8001360:	40ce      	lsrs	r6, r1
 8001362:	602f      	str	r7, [r5, #0]
 8001364:	606e      	str	r6, [r5, #4]
 8001366:	2100      	movs	r1, #0
 8001368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800136c:	4610      	mov	r0, r2
 800136e:	e6f7      	b.n	8001160 <__udivmoddi4+0x98>
 8001370:	4689      	mov	r9, r1
 8001372:	e6de      	b.n	8001132 <__udivmoddi4+0x6a>
 8001374:	4546      	cmp	r6, r8
 8001376:	d2ea      	bcs.n	800134e <__udivmoddi4+0x286>
 8001378:	ebb8 0a02 	subs.w	sl, r8, r2
 800137c:	eb69 0e03 	sbc.w	lr, r9, r3
 8001380:	3801      	subs	r0, #1
 8001382:	e7e4      	b.n	800134e <__udivmoddi4+0x286>
 8001384:	4670      	mov	r0, lr
 8001386:	e7d7      	b.n	8001338 <__udivmoddi4+0x270>
 8001388:	4618      	mov	r0, r3
 800138a:	e78f      	b.n	80012ac <__udivmoddi4+0x1e4>
 800138c:	4681      	mov	r9, r0
 800138e:	e7bd      	b.n	800130c <__udivmoddi4+0x244>
 8001390:	4611      	mov	r1, r2
 8001392:	e776      	b.n	8001282 <__udivmoddi4+0x1ba>
 8001394:	3802      	subs	r0, #2
 8001396:	443c      	add	r4, r7
 8001398:	e744      	b.n	8001224 <__udivmoddi4+0x15c>
 800139a:	4608      	mov	r0, r1
 800139c:	e706      	b.n	80011ac <__udivmoddi4+0xe4>
 800139e:	3a02      	subs	r2, #2
 80013a0:	443e      	add	r6, r7
 80013a2:	e72b      	b.n	80011fc <__udivmoddi4+0x134>

080013a4 <__aeabi_idiv0>:
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop

080013a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_InitTick+0x3c>)
{
 80013ac:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ae:	7818      	ldrb	r0, [r3, #0]
 80013b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b4:	fbb3 f3f0 	udiv	r3, r3, r0
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <HAL_InitTick+0x40>)
 80013ba:	6810      	ldr	r0, [r2, #0]
 80013bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80013c0:	f000 f89e 	bl	8001500 <HAL_SYSTICK_Config>
 80013c4:	4604      	mov	r4, r0
 80013c6:	b958      	cbnz	r0, 80013e0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c8:	2d0f      	cmp	r5, #15
 80013ca:	d809      	bhi.n	80013e0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013cc:	4602      	mov	r2, r0
 80013ce:	4629      	mov	r1, r5
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
 80013d4:	f000 f854 	bl	8001480 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <HAL_InitTick+0x44>)
 80013da:	4620      	mov	r0, r4
 80013dc:	601d      	str	r5, [r3, #0]
 80013de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80013e0:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80013e2:	bd38      	pop	{r3, r4, r5, pc}
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20000004 	.word	0x20000004

080013f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4a07      	ldr	r2, [pc, #28]	; (8001410 <HAL_Init+0x20>)
{
 80013f2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f8:	f043 0310 	orr.w	r3, r3, #16
 80013fc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fe:	f000 f82d 	bl	800145c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff ffd0 	bl	80013a8 <HAL_InitTick>
  HAL_MspInit();
 8001408:	f002 fe88 	bl	800411c <HAL_MspInit>
}
 800140c:	2000      	movs	r0, #0
 800140e:	bd08      	pop	{r3, pc}
 8001410:	40022000 	.word	0x40022000

08001414 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001414:	4a03      	ldr	r2, [pc, #12]	; (8001424 <HAL_IncTick+0x10>)
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <HAL_IncTick+0x14>)
 8001418:	6811      	ldr	r1, [r2, #0]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	440b      	add	r3, r1
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000208 	.word	0x20000208
 8001428:	20000000 	.word	0x20000000

0800142c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800142c:	4b01      	ldr	r3, [pc, #4]	; (8001434 <HAL_GetTick+0x8>)
 800142e:	6818      	ldr	r0, [r3, #0]
}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000208 	.word	0x20000208

08001438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001438:	b538      	push	{r3, r4, r5, lr}
 800143a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff fff6 	bl	800142c <HAL_GetTick>
 8001440:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001444:	bf1e      	ittt	ne
 8001446:	4b04      	ldrne	r3, [pc, #16]	; (8001458 <HAL_Delay+0x20>)
 8001448:	781b      	ldrbne	r3, [r3, #0]
 800144a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800144c:	f7ff ffee 	bl	800142c <HAL_GetTick>
 8001450:	1b40      	subs	r0, r0, r5
 8001452:	4284      	cmp	r4, r0
 8001454:	d8fa      	bhi.n	800144c <HAL_Delay+0x14>
  {
  }
}
 8001456:	bd38      	pop	{r3, r4, r5, pc}
 8001458:	20000000 	.word	0x20000000

0800145c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4a07      	ldr	r2, [pc, #28]	; (800147c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800145e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001460:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001462:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001466:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800146a:	041b      	lsls	r3, r3, #16
 800146c:	0c1b      	lsrs	r3, r3, #16
 800146e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001476:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001478:	60d3      	str	r3, [r2, #12]
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001482:	b530      	push	{r4, r5, lr}
 8001484:	68dc      	ldr	r4, [r3, #12]
 8001486:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	2b04      	cmp	r3, #4
 8001492:	bf28      	it	cs
 8001494:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001496:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149c:	bf98      	it	ls
 800149e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	fa05 f303 	lsl.w	r3, r5, r3
 80014a4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a8:	bf88      	it	hi
 80014aa:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4019      	ands	r1, r3
 80014ae:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	fa05 f404 	lsl.w	r4, r5, r4
 80014b4:	3c01      	subs	r4, #1
 80014b6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80014b8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ba:	ea42 0201 	orr.w	r2, r2, r1
 80014be:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	bfaf      	iteee	ge
 80014c4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	4b06      	ldrlt	r3, [pc, #24]	; (80014e4 <HAL_NVIC_SetPriority+0x64>)
 80014ca:	f000 000f 	andlt.w	r0, r0, #15
 80014ce:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	bfa5      	ittet	ge
 80014d2:	b2d2      	uxtbge	r2, r2
 80014d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80014de:	bd30      	pop	{r4, r5, pc}
 80014e0:	e000ed00 	.word	0xe000ed00
 80014e4:	e000ed14 	.word	0xe000ed14

080014e8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80014e8:	2301      	movs	r3, #1
 80014ea:	0942      	lsrs	r2, r0, #5
 80014ec:	f000 001f 	and.w	r0, r0, #31
 80014f0:	fa03 f000 	lsl.w	r0, r3, r0
 80014f4:	4b01      	ldr	r3, [pc, #4]	; (80014fc <HAL_NVIC_EnableIRQ+0x14>)
 80014f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80014fa:	4770      	bx	lr
 80014fc:	e000e100 	.word	0xe000e100

08001500 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	3801      	subs	r0, #1
 8001502:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001506:	d20a      	bcs.n	800151e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001518:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000e010 	.word	0xe000e010
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800152c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001530:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001532:	2b02      	cmp	r3, #2
 8001534:	d003      	beq.n	800153e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001536:	2304      	movs	r3, #4
 8001538:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800153a:	2001      	movs	r0, #1
 800153c:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800153e:	6803      	ldr	r3, [r0, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	f022 020e 	bic.w	r2, r2, #14
 8001546:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001550:	4a18      	ldr	r2, [pc, #96]	; (80015b4 <HAL_DMA_Abort_IT+0x88>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d01f      	beq.n	8001596 <HAL_DMA_Abort_IT+0x6a>
 8001556:	3214      	adds	r2, #20
 8001558:	4293      	cmp	r3, r2
 800155a:	d01e      	beq.n	800159a <HAL_DMA_Abort_IT+0x6e>
 800155c:	3214      	adds	r2, #20
 800155e:	4293      	cmp	r3, r2
 8001560:	d01d      	beq.n	800159e <HAL_DMA_Abort_IT+0x72>
 8001562:	3214      	adds	r2, #20
 8001564:	4293      	cmp	r3, r2
 8001566:	d01d      	beq.n	80015a4 <HAL_DMA_Abort_IT+0x78>
 8001568:	3214      	adds	r2, #20
 800156a:	4293      	cmp	r3, r2
 800156c:	d01d      	beq.n	80015aa <HAL_DMA_Abort_IT+0x7e>
 800156e:	3214      	adds	r2, #20
 8001570:	4293      	cmp	r3, r2
 8001572:	bf0c      	ite	eq
 8001574:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001578:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800157c:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001580:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001582:	2301      	movs	r3, #1
 8001584:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001588:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800158a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800158e:	b17b      	cbz	r3, 80015b0 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8001590:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001592:	4620      	mov	r0, r4
 8001594:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001596:	2301      	movs	r3, #1
 8001598:	e7f0      	b.n	800157c <HAL_DMA_Abort_IT+0x50>
 800159a:	2310      	movs	r3, #16
 800159c:	e7ee      	b.n	800157c <HAL_DMA_Abort_IT+0x50>
 800159e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a2:	e7eb      	b.n	800157c <HAL_DMA_Abort_IT+0x50>
 80015a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a8:	e7e8      	b.n	800157c <HAL_DMA_Abort_IT+0x50>
 80015aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ae:	e7e5      	b.n	800157c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80015b0:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80015b2:	bd10      	pop	{r4, pc}
 80015b4:	40020008 	.word	0x40020008
 80015b8:	40020000 	.word	0x40020000

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80015c0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80015c2:	4616      	mov	r6, r2
 80015c4:	4b65      	ldr	r3, [pc, #404]	; (800175c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015c6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800176c <HAL_GPIO_Init+0x1b0>
 80015ca:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001770 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80015ce:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015d2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80015d4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015d8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80015dc:	45a0      	cmp	r8, r4
 80015de:	d17f      	bne.n	80016e0 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80015e0:	684d      	ldr	r5, [r1, #4]
 80015e2:	2d12      	cmp	r5, #18
 80015e4:	f000 80af 	beq.w	8001746 <HAL_GPIO_Init+0x18a>
 80015e8:	f200 8088 	bhi.w	80016fc <HAL_GPIO_Init+0x140>
 80015ec:	2d02      	cmp	r5, #2
 80015ee:	f000 80a7 	beq.w	8001740 <HAL_GPIO_Init+0x184>
 80015f2:	d87c      	bhi.n	80016ee <HAL_GPIO_Init+0x132>
 80015f4:	2d00      	cmp	r5, #0
 80015f6:	f000 808e 	beq.w	8001716 <HAL_GPIO_Init+0x15a>
 80015fa:	2d01      	cmp	r5, #1
 80015fc:	f000 809e 	beq.w	800173c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001600:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001604:	2cff      	cmp	r4, #255	; 0xff
 8001606:	bf93      	iteet	ls
 8001608:	4682      	movls	sl, r0
 800160a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800160e:	3d08      	subhi	r5, #8
 8001610:	f8d0 b000 	ldrls.w	fp, [r0]
 8001614:	bf92      	itee	ls
 8001616:	00b5      	lslls	r5, r6, #2
 8001618:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800161c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800161e:	fa09 f805 	lsl.w	r8, r9, r5
 8001622:	ea2b 0808 	bic.w	r8, fp, r8
 8001626:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800162a:	bf88      	it	hi
 800162c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001630:	ea48 0505 	orr.w	r5, r8, r5
 8001634:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001638:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800163c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001640:	d04e      	beq.n	80016e0 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001642:	4d47      	ldr	r5, [pc, #284]	; (8001760 <HAL_GPIO_Init+0x1a4>)
 8001644:	4f46      	ldr	r7, [pc, #280]	; (8001760 <HAL_GPIO_Init+0x1a4>)
 8001646:	69ad      	ldr	r5, [r5, #24]
 8001648:	f026 0803 	bic.w	r8, r6, #3
 800164c:	f045 0501 	orr.w	r5, r5, #1
 8001650:	61bd      	str	r5, [r7, #24]
 8001652:	69bd      	ldr	r5, [r7, #24]
 8001654:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001658:	f005 0501 	and.w	r5, r5, #1
 800165c:	9501      	str	r5, [sp, #4]
 800165e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001662:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001666:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001668:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800166c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001670:	fa09 f90b 	lsl.w	r9, r9, fp
 8001674:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001678:	4d3a      	ldr	r5, [pc, #232]	; (8001764 <HAL_GPIO_Init+0x1a8>)
 800167a:	42a8      	cmp	r0, r5
 800167c:	d068      	beq.n	8001750 <HAL_GPIO_Init+0x194>
 800167e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001682:	42a8      	cmp	r0, r5
 8001684:	d066      	beq.n	8001754 <HAL_GPIO_Init+0x198>
 8001686:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800168a:	42a8      	cmp	r0, r5
 800168c:	d064      	beq.n	8001758 <HAL_GPIO_Init+0x19c>
 800168e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001692:	42a8      	cmp	r0, r5
 8001694:	bf0c      	ite	eq
 8001696:	2503      	moveq	r5, #3
 8001698:	2504      	movne	r5, #4
 800169a:	fa05 f50b 	lsl.w	r5, r5, fp
 800169e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80016a2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016a6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016a8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80016ac:	bf14      	ite	ne
 80016ae:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016b0:	43a5      	biceq	r5, r4
 80016b2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016b4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80016ba:	bf14      	ite	ne
 80016bc:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016be:	43a5      	biceq	r5, r4
 80016c0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016c2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80016c8:	bf14      	ite	ne
 80016ca:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016cc:	43a5      	biceq	r5, r4
 80016ce:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016d0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80016d6:	bf14      	ite	ne
 80016d8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016da:	ea25 0404 	biceq.w	r4, r5, r4
 80016de:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80016e0:	3601      	adds	r6, #1
 80016e2:	2e10      	cmp	r6, #16
 80016e4:	f47f af73 	bne.w	80015ce <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80016e8:	b003      	add	sp, #12
 80016ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80016ee:	2d03      	cmp	r5, #3
 80016f0:	d022      	beq.n	8001738 <HAL_GPIO_Init+0x17c>
 80016f2:	2d11      	cmp	r5, #17
 80016f4:	d184      	bne.n	8001600 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016f6:	68ca      	ldr	r2, [r1, #12]
 80016f8:	3204      	adds	r2, #4
          break;
 80016fa:	e781      	b.n	8001600 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80016fc:	4f1a      	ldr	r7, [pc, #104]	; (8001768 <HAL_GPIO_Init+0x1ac>)
 80016fe:	42bd      	cmp	r5, r7
 8001700:	d009      	beq.n	8001716 <HAL_GPIO_Init+0x15a>
 8001702:	d812      	bhi.n	800172a <HAL_GPIO_Init+0x16e>
 8001704:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001774 <HAL_GPIO_Init+0x1b8>
 8001708:	454d      	cmp	r5, r9
 800170a:	d004      	beq.n	8001716 <HAL_GPIO_Init+0x15a>
 800170c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001710:	454d      	cmp	r5, r9
 8001712:	f47f af75 	bne.w	8001600 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001716:	688a      	ldr	r2, [r1, #8]
 8001718:	b1c2      	cbz	r2, 800174c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800171a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800171c:	bf0c      	ite	eq
 800171e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001722:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001726:	2208      	movs	r2, #8
 8001728:	e76a      	b.n	8001600 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800172a:	4575      	cmp	r5, lr
 800172c:	d0f3      	beq.n	8001716 <HAL_GPIO_Init+0x15a>
 800172e:	4565      	cmp	r5, ip
 8001730:	d0f1      	beq.n	8001716 <HAL_GPIO_Init+0x15a>
 8001732:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001778 <HAL_GPIO_Init+0x1bc>
 8001736:	e7eb      	b.n	8001710 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001738:	2200      	movs	r2, #0
 800173a:	e761      	b.n	8001600 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800173c:	68ca      	ldr	r2, [r1, #12]
          break;
 800173e:	e75f      	b.n	8001600 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001740:	68ca      	ldr	r2, [r1, #12]
 8001742:	3208      	adds	r2, #8
          break;
 8001744:	e75c      	b.n	8001600 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001746:	68ca      	ldr	r2, [r1, #12]
 8001748:	320c      	adds	r2, #12
          break;
 800174a:	e759      	b.n	8001600 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800174c:	2204      	movs	r2, #4
 800174e:	e757      	b.n	8001600 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001750:	2500      	movs	r5, #0
 8001752:	e7a2      	b.n	800169a <HAL_GPIO_Init+0xde>
 8001754:	2501      	movs	r5, #1
 8001756:	e7a0      	b.n	800169a <HAL_GPIO_Init+0xde>
 8001758:	2502      	movs	r5, #2
 800175a:	e79e      	b.n	800169a <HAL_GPIO_Init+0xde>
 800175c:	40010400 	.word	0x40010400
 8001760:	40021000 	.word	0x40021000
 8001764:	40010800 	.word	0x40010800
 8001768:	10210000 	.word	0x10210000
 800176c:	10310000 	.word	0x10310000
 8001770:	10320000 	.word	0x10320000
 8001774:	10110000 	.word	0x10110000
 8001778:	10220000 	.word	0x10220000

0800177c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800177c:	6883      	ldr	r3, [r0, #8]
 800177e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001780:	bf14      	ite	ne
 8001782:	2001      	movne	r0, #1
 8001784:	2000      	moveq	r0, #0
 8001786:	4770      	bx	lr

08001788 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001788:	b10a      	cbz	r2, 800178e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800178a:	6101      	str	r1, [r0, #16]
 800178c:	4770      	bx	lr
 800178e:	0409      	lsls	r1, r1, #16
 8001790:	e7fb      	b.n	800178a <HAL_GPIO_WritePin+0x2>

08001792 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001792:	68c3      	ldr	r3, [r0, #12]
 8001794:	4059      	eors	r1, r3
 8001796:	60c1      	str	r1, [r0, #12]
 8001798:	4770      	bx	lr

0800179a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
{
 800179c:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80017a0:	6959      	ldr	r1, [r3, #20]
 80017a2:	4201      	tst	r1, r0
 80017a4:	d002      	beq.n	80017ac <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017a6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017a8:	f7ff fff7 	bl	800179a <HAL_GPIO_EXTI_Callback>
 80017ac:	bd08      	pop	{r3, pc}
 80017ae:	bf00      	nop
 80017b0:	40010400 	.word	0x40010400

080017b4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017b4:	6802      	ldr	r2, [r0, #0]
 80017b6:	6953      	ldr	r3, [r2, #20]
 80017b8:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80017bc:	d00d      	beq.n	80017da <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017be:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80017c2:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80017c4:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80017c6:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80017c8:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80017d2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80017d6:	2001      	movs	r0, #1
 80017d8:	4770      	bx	lr
  }
  return HAL_OK;
 80017da:	4618      	mov	r0, r3
}
 80017dc:	4770      	bx	lr

080017de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80017de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017e2:	4604      	mov	r4, r0
 80017e4:	4617      	mov	r7, r2
 80017e6:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017e8:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80017ec:	b28e      	uxth	r6, r1
 80017ee:	6825      	ldr	r5, [r4, #0]
 80017f0:	f1b8 0f01 	cmp.w	r8, #1
 80017f4:	bf0c      	ite	eq
 80017f6:	696b      	ldreq	r3, [r5, #20]
 80017f8:	69ab      	ldrne	r3, [r5, #24]
 80017fa:	ea36 0303 	bics.w	r3, r6, r3
 80017fe:	bf14      	ite	ne
 8001800:	2001      	movne	r0, #1
 8001802:	2000      	moveq	r0, #0
 8001804:	b908      	cbnz	r0, 800180a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800180a:	696b      	ldr	r3, [r5, #20]
 800180c:	055a      	lsls	r2, r3, #21
 800180e:	d512      	bpl.n	8001836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001810:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8001812:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001814:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001818:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800181a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800181e:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001820:	2304      	movs	r3, #4
 8001822:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001824:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001826:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8001828:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800182a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 800182e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001836:	1c7b      	adds	r3, r7, #1
 8001838:	d0d9      	beq.n	80017ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800183a:	b94f      	cbnz	r7, 8001850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800183c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800183e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001840:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001842:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001846:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800184a:	2003      	movs	r0, #3
 800184c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001850:	f7ff fdec 	bl	800142c <HAL_GetTick>
 8001854:	eba0 0009 	sub.w	r0, r0, r9
 8001858:	4287      	cmp	r7, r0
 800185a:	d2c8      	bcs.n	80017ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800185c:	e7ee      	b.n	800183c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

0800185e <I2C_WaitOnFlagUntilTimeout>:
{
 800185e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001862:	4604      	mov	r4, r0
 8001864:	4690      	mov	r8, r2
 8001866:	461f      	mov	r7, r3
 8001868:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800186a:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800186e:	b28d      	uxth	r5, r1
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	f1b9 0f01 	cmp.w	r9, #1
 8001876:	bf0c      	ite	eq
 8001878:	695b      	ldreq	r3, [r3, #20]
 800187a:	699b      	ldrne	r3, [r3, #24]
 800187c:	ea35 0303 	bics.w	r3, r5, r3
 8001880:	bf0c      	ite	eq
 8001882:	2301      	moveq	r3, #1
 8001884:	2300      	movne	r3, #0
 8001886:	4543      	cmp	r3, r8
 8001888:	d002      	beq.n	8001890 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800188a:	2000      	movs	r0, #0
}
 800188c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001890:	1c7b      	adds	r3, r7, #1
 8001892:	d0ed      	beq.n	8001870 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001894:	b95f      	cbnz	r7, 80018ae <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001896:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001898:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800189a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800189c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80018a0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80018a4:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80018aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80018ae:	f7ff fdbd 	bl	800142c <HAL_GetTick>
 80018b2:	1b80      	subs	r0, r0, r6
 80018b4:	4287      	cmp	r7, r0
 80018b6:	d2db      	bcs.n	8001870 <I2C_WaitOnFlagUntilTimeout+0x12>
 80018b8:	e7ed      	b.n	8001896 <I2C_WaitOnFlagUntilTimeout+0x38>

080018ba <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80018ba:	b570      	push	{r4, r5, r6, lr}
 80018bc:	4604      	mov	r4, r0
 80018be:	460d      	mov	r5, r1
 80018c0:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	061b      	lsls	r3, r3, #24
 80018c8:	d501      	bpl.n	80018ce <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80018ca:	2000      	movs	r0, #0
 80018cc:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018ce:	4620      	mov	r0, r4
 80018d0:	f7ff ff70 	bl	80017b4 <I2C_IsAcknowledgeFailed>
 80018d4:	b9a8      	cbnz	r0, 8001902 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80018d6:	1c6a      	adds	r2, r5, #1
 80018d8:	d0f3      	beq.n	80018c2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80018da:	b965      	cbnz	r5, 80018f6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80018de:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018e0:	f043 0320 	orr.w	r3, r3, #32
 80018e4:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80018e6:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80018e8:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80018ea:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80018ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80018f0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80018f4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80018f6:	f7ff fd99 	bl	800142c <HAL_GetTick>
 80018fa:	1b80      	subs	r0, r0, r6
 80018fc:	4285      	cmp	r5, r0
 80018fe:	d2e0      	bcs.n	80018c2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001900:	e7ec      	b.n	80018dc <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001902:	2001      	movs	r0, #1
}
 8001904:	bd70      	pop	{r4, r5, r6, pc}
	...

08001908 <I2C_RequestMemoryWrite>:
{
 8001908:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800190c:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800190e:	6802      	ldr	r2, [r0, #0]
{
 8001910:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001912:	6813      	ldr	r3, [r2, #0]
{
 8001914:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191a:	6013      	str	r3, [r2, #0]
{
 800191c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800191e:	9600      	str	r6, [sp, #0]
 8001920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001922:	2200      	movs	r2, #0
 8001924:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001928:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800192a:	f7ff ff98 	bl	800185e <I2C_WaitOnFlagUntilTimeout>
 800192e:	b968      	cbnz	r0, 800194c <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001936:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800193a:	4633      	mov	r3, r6
 800193c:	491a      	ldr	r1, [pc, #104]	; (80019a8 <I2C_RequestMemoryWrite+0xa0>)
 800193e:	4620      	mov	r0, r4
 8001940:	f7ff ff4d 	bl	80017de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001944:	b130      	cbz	r0, 8001954 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001946:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001948:	2b04      	cmp	r3, #4
 800194a:	d018      	beq.n	800197e <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 800194c:	2003      	movs	r0, #3
}
 800194e:	b004      	add	sp, #16
 8001950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	9003      	str	r0, [sp, #12]
 8001958:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800195a:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800195c:	9203      	str	r2, [sp, #12]
 800195e:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001960:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001962:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001964:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001966:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001968:	f7ff ffa7 	bl	80018ba <I2C_WaitOnTXEFlagUntilTimeout>
 800196c:	b148      	cbz	r0, 8001982 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800196e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001970:	2b04      	cmp	r3, #4
 8001972:	d1eb      	bne.n	800194c <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001974:	6822      	ldr	r2, [r4, #0]
 8001976:	6813      	ldr	r3, [r2, #0]
 8001978:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800197c:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800197e:	2001      	movs	r0, #1
 8001980:	e7e5      	b.n	800194e <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001982:	f1b8 0f01 	cmp.w	r8, #1
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	d102      	bne.n	8001990 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800198a:	b2ed      	uxtb	r5, r5
 800198c:	611d      	str	r5, [r3, #16]
 800198e:	e7de      	b.n	800194e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001990:	0a2a      	lsrs	r2, r5, #8
 8001992:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001994:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001996:	4632      	mov	r2, r6
 8001998:	4620      	mov	r0, r4
 800199a:	f7ff ff8e 	bl	80018ba <I2C_WaitOnTXEFlagUntilTimeout>
 800199e:	2800      	cmp	r0, #0
 80019a0:	d1e5      	bne.n	800196e <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	e7f1      	b.n	800198a <I2C_RequestMemoryWrite+0x82>
 80019a6:	bf00      	nop
 80019a8:	00010002 	.word	0x00010002

080019ac <I2C_RequestMemoryRead>:
{
 80019ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80019b0:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80019b2:	6803      	ldr	r3, [r0, #0]
{
 80019b4:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80019b6:	681a      	ldr	r2, [r3, #0]
{
 80019b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80019ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80019c0:	681a      	ldr	r2, [r3, #0]
{
 80019c2:	460f      	mov	r7, r1
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80019c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019c8:	601a      	str	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019ce:	9500      	str	r5, [sp, #0]
 80019d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80019d2:	2200      	movs	r2, #0
{
 80019d4:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019d6:	f7ff ff42 	bl	800185e <I2C_WaitOnFlagUntilTimeout>
 80019da:	b980      	cbnz	r0, 80019fe <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	b2ff      	uxtb	r7, r7
 80019e0:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80019e4:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019e6:	492d      	ldr	r1, [pc, #180]	; (8001a9c <I2C_RequestMemoryRead+0xf0>)
 80019e8:	462b      	mov	r3, r5
 80019ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80019ec:	4620      	mov	r0, r4
 80019ee:	f7ff fef6 	bl	80017de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019f2:	b140      	cbz	r0, 8001a06 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d101      	bne.n	80019fe <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 80019fa:	2001      	movs	r0, #1
 80019fc:	e000      	b.n	8001a00 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 80019fe:	2003      	movs	r0, #3
}
 8001a00:	b004      	add	sp, #16
 8001a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	9003      	str	r0, [sp, #12]
 8001a0a:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a0c:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a0e:	9203      	str	r2, [sp, #12]
 8001a10:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a12:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a14:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a16:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a18:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a1a:	f7ff ff4e 	bl	80018ba <I2C_WaitOnTXEFlagUntilTimeout>
 8001a1e:	b140      	cbz	r0, 8001a32 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d1eb      	bne.n	80019fe <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a26:	6822      	ldr	r2, [r4, #0]
 8001a28:	6813      	ldr	r3, [r2, #0]
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e7e3      	b.n	80019fa <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a32:	f1b8 0f01 	cmp.w	r8, #1
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	d124      	bne.n	8001a84 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a3a:	b2f6      	uxtb	r6, r6
 8001a3c:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a3e:	462a      	mov	r2, r5
 8001a40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001a42:	4620      	mov	r0, r4
 8001a44:	f7ff ff39 	bl	80018ba <I2C_WaitOnTXEFlagUntilTimeout>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d1e8      	bne.n	8001a20 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a4e:	6821      	ldr	r1, [r4, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a50:	4620      	mov	r0, r4
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a52:	680b      	ldr	r3, [r1, #0]
 8001a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a58:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a5a:	9500      	str	r5, [sp, #0]
 8001a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a62:	f7ff fefc 	bl	800185e <I2C_WaitOnFlagUntilTimeout>
 8001a66:	2800      	cmp	r0, #0
 8001a68:	d1c9      	bne.n	80019fe <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001a6a:	6823      	ldr	r3, [r4, #0]
 8001a6c:	f047 0701 	orr.w	r7, r7, #1
 8001a70:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001a74:	462b      	mov	r3, r5
 8001a76:	4909      	ldr	r1, [pc, #36]	; (8001a9c <I2C_RequestMemoryRead+0xf0>)
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7ff feb0 	bl	80017de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d1b8      	bne.n	80019f4 <I2C_RequestMemoryRead+0x48>
 8001a82:	e7bd      	b.n	8001a00 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a84:	0a32      	lsrs	r2, r6, #8
 8001a86:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a88:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001a8a:	462a      	mov	r2, r5
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7ff ff14 	bl	80018ba <I2C_WaitOnTXEFlagUntilTimeout>
 8001a92:	2800      	cmp	r0, #0
 8001a94:	d1c4      	bne.n	8001a20 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	e7cf      	b.n	8001a3a <I2C_RequestMemoryRead+0x8e>
 8001a9a:	bf00      	nop
 8001a9c:	00010002 	.word	0x00010002

08001aa0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001aa0:	b570      	push	{r4, r5, r6, lr}
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	460d      	mov	r5, r1
 8001aa6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001aa8:	6820      	ldr	r0, [r4, #0]
 8001aaa:	6943      	ldr	r3, [r0, #20]
 8001aac:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001ab0:	d001      	beq.n	8001ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001ab2:	2000      	movs	r0, #0
}
 8001ab4:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ab6:	6942      	ldr	r2, [r0, #20]
 8001ab8:	06d2      	lsls	r2, r2, #27
 8001aba:	d50b      	bpl.n	8001ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001abc:	f06f 0210 	mvn.w	r2, #16
 8001ac0:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001ac2:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac4:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001ac6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001aca:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001acc:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001ace:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001ad2:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ad4:	b95d      	cbnz	r5, 8001aee <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001ad8:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ada:	f043 0320 	orr.w	r3, r3, #32
 8001ade:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001ae0:	2320      	movs	r3, #32
 8001ae2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001aec:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001aee:	f7ff fc9d 	bl	800142c <HAL_GetTick>
 8001af2:	1b80      	subs	r0, r0, r6
 8001af4:	4285      	cmp	r5, r0
 8001af6:	d2d7      	bcs.n	8001aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001af8:	e7ed      	b.n	8001ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001afa <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001afa:	b570      	push	{r4, r5, r6, lr}
 8001afc:	4604      	mov	r4, r0
 8001afe:	460d      	mov	r5, r1
 8001b00:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	075b      	lsls	r3, r3, #29
 8001b08:	d501      	bpl.n	8001b0e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f7ff fe50 	bl	80017b4 <I2C_IsAcknowledgeFailed>
 8001b14:	b9a8      	cbnz	r0, 8001b42 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001b16:	1c6a      	adds	r2, r5, #1
 8001b18:	d0f3      	beq.n	8001b02 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b1a:	b965      	cbnz	r5, 8001b36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001b1e:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b20:	f043 0320 	orr.w	r3, r3, #32
 8001b24:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b26:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001b28:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b2a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001b2c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001b30:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001b34:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b36:	f7ff fc79 	bl	800142c <HAL_GetTick>
 8001b3a:	1b80      	subs	r0, r0, r6
 8001b3c:	4285      	cmp	r5, r0
 8001b3e:	d2e0      	bcs.n	8001b02 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001b40:	e7ec      	b.n	8001b1c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001b42:	2001      	movs	r0, #1
}
 8001b44:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b48 <HAL_I2C_Init>:
{
 8001b48:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	b908      	cbnz	r0, 8001b52 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001b4e:	2001      	movs	r0, #1
 8001b50:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001b52:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b5a:	b91b      	cbnz	r3, 8001b64 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001b5c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001b60:	f002 f8a4 	bl	8003cac <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b64:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001b66:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001b6c:	6813      	ldr	r3, [r2, #0]
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b74:	f001 f964 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b78:	6863      	ldr	r3, [r4, #4]
 8001b7a:	4a2f      	ldr	r2, [pc, #188]	; (8001c38 <HAL_I2C_Init+0xf0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d830      	bhi.n	8001be2 <HAL_I2C_Init+0x9a>
 8001b80:	4a2e      	ldr	r2, [pc, #184]	; (8001c3c <HAL_I2C_Init+0xf4>)
 8001b82:	4290      	cmp	r0, r2
 8001b84:	d9e3      	bls.n	8001b4e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001b86:	4a2e      	ldr	r2, [pc, #184]	; (8001c40 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8001b88:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001b8a:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8001b8e:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001b90:	3201      	adds	r2, #1
 8001b92:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001b94:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <HAL_I2C_Init+0xf0>)
 8001b96:	3801      	subs	r0, #1
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d832      	bhi.n	8001c02 <HAL_I2C_Init+0xba>
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ba2:	1c43      	adds	r3, r0, #1
 8001ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	bf38      	it	cc
 8001bac:	2304      	movcc	r3, #4
 8001bae:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bb0:	6a22      	ldr	r2, [r4, #32]
 8001bb2:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb4:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001bba:	68e2      	ldr	r2, [r4, #12]
 8001bbc:	6923      	ldr	r3, [r4, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001bc2:	69a2      	ldr	r2, [r4, #24]
 8001bc4:	6963      	ldr	r3, [r4, #20]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001bca:	680b      	ldr	r3, [r1, #0]
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001bd2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bda:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bdc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001be0:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001be2:	4a18      	ldr	r2, [pc, #96]	; (8001c44 <HAL_I2C_Init+0xfc>)
 8001be4:	4290      	cmp	r0, r2
 8001be6:	d9b2      	bls.n	8001b4e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001be8:	4d15      	ldr	r5, [pc, #84]	; (8001c40 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001bea:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001bee:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8001bf2:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001bf4:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8001bf6:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001bf8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001bfc:	fbb2 f2f5 	udiv	r2, r2, r5
 8001c00:	e7c6      	b.n	8001b90 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c02:	68a2      	ldr	r2, [r4, #8]
 8001c04:	b952      	cbnz	r2, 8001c1c <HAL_I2C_Init+0xd4>
 8001c06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001c0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c0e:	1c43      	adds	r3, r0, #1
 8001c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c14:	b16b      	cbz	r3, 8001c32 <HAL_I2C_Init+0xea>
 8001c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c1a:	e7c8      	b.n	8001bae <HAL_I2C_Init+0x66>
 8001c1c:	2219      	movs	r2, #25
 8001c1e:	4353      	muls	r3, r2
 8001c20:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c24:	1c43      	adds	r3, r0, #1
 8001c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2a:	b113      	cbz	r3, 8001c32 <HAL_I2C_Init+0xea>
 8001c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c30:	e7bd      	b.n	8001bae <HAL_I2C_Init+0x66>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e7bb      	b.n	8001bae <HAL_I2C_Init+0x66>
 8001c36:	bf00      	nop
 8001c38:	000186a0 	.word	0x000186a0
 8001c3c:	001e847f 	.word	0x001e847f
 8001c40:	000f4240 	.word	0x000f4240
 8001c44:	003d08ff 	.word	0x003d08ff

08001c48 <HAL_I2C_Mem_Write>:
{
 8001c48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c4c:	4604      	mov	r4, r0
 8001c4e:	469a      	mov	sl, r3
 8001c50:	4688      	mov	r8, r1
 8001c52:	4691      	mov	r9, r2
 8001c54:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001c56:	f7ff fbe9 	bl	800142c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001c5a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001c5e:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001c60:	2b20      	cmp	r3, #32
 8001c62:	d003      	beq.n	8001c6c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001c64:	2002      	movs	r0, #2
}
 8001c66:	b002      	add	sp, #8
 8001c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c6c:	9000      	str	r0, [sp, #0]
 8001c6e:	2319      	movs	r3, #25
 8001c70:	2201      	movs	r2, #1
 8001c72:	493e      	ldr	r1, [pc, #248]	; (8001d6c <HAL_I2C_Mem_Write+0x124>)
 8001c74:	4620      	mov	r0, r4
 8001c76:	f7ff fdf2 	bl	800185e <I2C_WaitOnFlagUntilTimeout>
 8001c7a:	2800      	cmp	r0, #0
 8001c7c:	d1f2      	bne.n	8001c64 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001c7e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d0ee      	beq.n	8001c64 <HAL_I2C_Mem_Write+0x1c>
 8001c86:	2301      	movs	r3, #1
 8001c88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c8c:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c8e:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c90:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c92:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c94:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001c96:	bf58      	it	pl
 8001c98:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c9a:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8001c9c:	bf5c      	itt	pl
 8001c9e:	f042 0201 	orrpl.w	r2, r2, #1
 8001ca2:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001caa:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cac:	2321      	movs	r3, #33	; 0x21
 8001cae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cb2:	2340      	movs	r3, #64	; 0x40
 8001cb4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cba:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001cbc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cbe:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cc2:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 8001cc4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cc8:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cca:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001ccc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cce:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8001cd0:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cd2:	4653      	mov	r3, sl
 8001cd4:	f7ff fe18 	bl	8001908 <I2C_RequestMemoryWrite>
 8001cd8:	2800      	cmp	r0, #0
 8001cda:	d02a      	beq.n	8001d32 <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001cde:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d107      	bne.n	8001cf6 <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	e7bd      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cea:	f7ff fde6 	bl	80018ba <I2C_WaitOnTXEFlagUntilTimeout>
 8001cee:	b120      	cbz	r0, 8001cfa <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d034      	beq.n	8001d60 <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 8001cf6:	2003      	movs	r0, #3
 8001cf8:	e7b5      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001cfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001cfc:	6827      	ldr	r7, [r4, #0]
 8001cfe:	1c4b      	adds	r3, r1, #1
 8001d00:	6263      	str	r3, [r4, #36]	; 0x24
 8001d02:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001d04:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d06:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001d08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001d0a:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d12:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001d14:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d16:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001d18:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d1a:	d50a      	bpl.n	8001d32 <HAL_I2C_Mem_Write+0xea>
 8001d1c:	b148      	cbz	r0, 8001d32 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d1e:	1c8b      	adds	r3, r1, #2
 8001d20:	6263      	str	r3, [r4, #36]	; 0x24
 8001d22:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001d24:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d26:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001d28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001d2a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001d32:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d34:	462a      	mov	r2, r5
 8001d36:	4631      	mov	r1, r6
 8001d38:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1d5      	bne.n	8001cea <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d3e:	f7ff fedc 	bl	8001afa <I2C_WaitOnBTFFlagUntilTimeout>
 8001d42:	2800      	cmp	r0, #0
 8001d44:	d1d4      	bne.n	8001cf0 <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d46:	6822      	ldr	r2, [r4, #0]
 8001d48:	6813      	ldr	r3, [r2, #0]
 8001d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d4e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d50:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001d52:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001d5e:	e782      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d60:	6822      	ldr	r2, [r4, #0]
 8001d62:	6813      	ldr	r3, [r2, #0]
 8001d64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e7bc      	b.n	8001ce6 <HAL_I2C_Mem_Write+0x9e>
 8001d6c:	00100002 	.word	0x00100002
 8001d70:	ffff0000 	.word	0xffff0000

08001d74 <HAL_I2C_Mem_Read>:
{
 8001d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d78:	4604      	mov	r4, r0
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	469a      	mov	sl, r3
 8001d7e:	460d      	mov	r5, r1
 8001d80:	4691      	mov	r9, r2
 8001d82:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001d84:	f7ff fb52 	bl	800142c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d88:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001d8c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d004      	beq.n	8001d9c <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8001d92:	2502      	movs	r5, #2
}
 8001d94:	4628      	mov	r0, r5
 8001d96:	b006      	add	sp, #24
 8001d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d9c:	9000      	str	r0, [sp, #0]
 8001d9e:	2319      	movs	r3, #25
 8001da0:	2201      	movs	r2, #1
 8001da2:	4981      	ldr	r1, [pc, #516]	; (8001fa8 <HAL_I2C_Mem_Read+0x234>)
 8001da4:	4620      	mov	r0, r4
 8001da6:	f7ff fd5a 	bl	800185e <I2C_WaitOnFlagUntilTimeout>
 8001daa:	2800      	cmp	r0, #0
 8001dac:	d1f1      	bne.n	8001d92 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001dae:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d0ed      	beq.n	8001d92 <HAL_I2C_Mem_Read+0x1e>
 8001db6:	2301      	movs	r3, #1
 8001db8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dbc:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dbe:	f04f 0800 	mov.w	r8, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dc2:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dc4:	4629      	mov	r1, r5
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dc6:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001dc8:	bf58      	it	pl
 8001dca:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dcc:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8001dce:	bf5c      	itt	pl
 8001dd0:	f042 0201 	orrpl.w	r2, r2, #1
 8001dd4:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ddc:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001dde:	2322      	movs	r3, #34	; 0x22
 8001de0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001de4:	2340      	movs	r3, #64	; 0x40
 8001de6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dec:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001df0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001df2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001df6:	9601      	str	r6, [sp, #4]
    hi2c->XferCount   = Size;
 8001df8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dfa:	4b6c      	ldr	r3, [pc, #432]	; (8001fac <HAL_I2C_Mem_Read+0x238>)
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dfc:	9700      	str	r7, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dfe:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001e00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e02:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8001e04:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e06:	4653      	mov	r3, sl
 8001e08:	f7ff fdd0 	bl	80019ac <I2C_RequestMemoryRead>
 8001e0c:	4605      	mov	r5, r0
 8001e0e:	b130      	cbz	r0, 8001e1e <HAL_I2C_Mem_Read+0xaa>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e10:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001e12:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d13d      	bne.n	8001e96 <HAL_I2C_Mem_Read+0x122>
              return HAL_ERROR;
 8001e1a:	2501      	movs	r5, #1
 8001e1c:	e7ba      	b.n	8001d94 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8001e1e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001e20:	6823      	ldr	r3, [r4, #0]
 8001e22:	b992      	cbnz	r2, 8001e4a <HAL_I2C_Mem_Read+0xd6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e24:	9002      	str	r0, [sp, #8]
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	9202      	str	r2, [sp, #8]
 8001e2a:	699a      	ldr	r2, [r3, #24]
 8001e2c:	9202      	str	r2, [sp, #8]
 8001e2e:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e36:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e38:	2320      	movs	r3, #32
 8001e3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001e44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001e48:	e7a4      	b.n	8001d94 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8001e4a:	2a01      	cmp	r2, #1
 8001e4c:	d125      	bne.n	8001e9a <HAL_I2C_Mem_Read+0x126>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e54:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e56:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	9003      	str	r0, [sp, #12]
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	9203      	str	r2, [sp, #12]
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	9203      	str	r2, [sp, #12]
 8001e64:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e6e:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e70:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8001fb0 <HAL_I2C_Mem_Read+0x23c>
    while(hi2c->XferSize > 0U)
 8001e74:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0de      	beq.n	8001e38 <HAL_I2C_Mem_Read+0xc4>
      if(hi2c->XferSize <= 3U)
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d877      	bhi.n	8001f6e <HAL_I2C_Mem_Read+0x1fa>
        if(hi2c->XferSize== 1U)
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d127      	bne.n	8001ed2 <HAL_I2C_Mem_Read+0x15e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001e82:	4632      	mov	r2, r6
 8001e84:	4639      	mov	r1, r7
 8001e86:	4620      	mov	r0, r4
 8001e88:	f7ff fe0a 	bl	8001aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	d03f      	beq.n	8001f10 <HAL_I2C_Mem_Read+0x19c>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001e90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d1c1      	bne.n	8001e1a <HAL_I2C_Mem_Read+0xa6>
              return HAL_TIMEOUT;
 8001e96:	2503      	movs	r5, #3
 8001e98:	e77c      	b.n	8001d94 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8001e9a:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001e9c:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8001e9e:	d10e      	bne.n	8001ebe <HAL_I2C_Mem_Read+0x14a>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001ea0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ea4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea6:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	9004      	str	r0, [sp, #16]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	9204      	str	r2, [sp, #16]
 8001eb0:	699a      	ldr	r2, [r3, #24]
 8001eb2:	9204      	str	r2, [sp, #16]
 8001eb4:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ebc:	e7d6      	b.n	8001e6c <HAL_I2C_Mem_Read+0xf8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ebe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ec2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ec4:	9005      	str	r0, [sp, #20]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	9205      	str	r2, [sp, #20]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	9305      	str	r3, [sp, #20]
 8001ece:	9b05      	ldr	r3, [sp, #20]
 8001ed0:	e7ce      	b.n	8001e70 <HAL_I2C_Mem_Read+0xfc>
        else if(hi2c->XferSize == 2U)
 8001ed2:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ed4:	9600      	str	r6, [sp, #0]
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4641      	mov	r1, r8
 8001ede:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001ee0:	d124      	bne.n	8001f2c <HAL_I2C_Mem_Read+0x1b8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ee2:	f7ff fcbc 	bl	800185e <I2C_WaitOnFlagUntilTimeout>
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	d1d5      	bne.n	8001e96 <HAL_I2C_Mem_Read+0x122>
 8001eea:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef4:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ef6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	1c51      	adds	r1, r2, #1
 8001efc:	6261      	str	r1, [r4, #36]	; 0x24
 8001efe:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001f00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f02:	3b01      	subs	r3, #1
 8001f04:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001f06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f0e:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	6262      	str	r2, [r4, #36]	; 0x24
 8001f16:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f18:	6912      	ldr	r2, [r2, #16]
 8001f1a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001f22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001f2a:	e7a3      	b.n	8001e74 <HAL_I2C_Mem_Read+0x100>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f2c:	f7ff fc97 	bl	800185e <I2C_WaitOnFlagUntilTimeout>
 8001f30:	4602      	mov	r2, r0
 8001f32:	2800      	cmp	r0, #0
 8001f34:	d1af      	bne.n	8001e96 <HAL_I2C_Mem_Read+0x122>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001f36:	6821      	ldr	r1, [r4, #0]
 8001f38:	680b      	ldr	r3, [r1, #0]
 8001f3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f3e:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f40:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f44:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f46:	1c59      	adds	r1, r3, #1
 8001f48:	6261      	str	r1, [r4, #36]	; 0x24
 8001f4a:	6821      	ldr	r1, [r4, #0]
 8001f4c:	6909      	ldr	r1, [r1, #16]
 8001f4e:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8001f50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f52:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001f54:	3b01      	subs	r3, #1
 8001f56:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001f58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f5a:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f62:	463b      	mov	r3, r7
 8001f64:	f7ff fc7b 	bl	800185e <I2C_WaitOnFlagUntilTimeout>
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	d0bf      	beq.n	8001eec <HAL_I2C_Mem_Read+0x178>
 8001f6c:	e793      	b.n	8001e96 <HAL_I2C_Mem_Read+0x122>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f6e:	4632      	mov	r2, r6
 8001f70:	4639      	mov	r1, r7
 8001f72:	4620      	mov	r0, r4
 8001f74:	f7ff fd94 	bl	8001aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f78:	2800      	cmp	r0, #0
 8001f7a:	d189      	bne.n	8001e90 <HAL_I2C_Mem_Read+0x11c>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	6262      	str	r2, [r4, #36]	; 0x24
 8001f82:	6822      	ldr	r2, [r4, #0]
 8001f84:	6912      	ldr	r2, [r2, #16]
 8001f86:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001f88:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f8a:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001f90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f98:	6953      	ldr	r3, [r2, #20]
 8001f9a:	075b      	lsls	r3, r3, #29
 8001f9c:	f57f af6a 	bpl.w	8001e74 <HAL_I2C_Mem_Read+0x100>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fa2:	1c59      	adds	r1, r3, #1
 8001fa4:	6261      	str	r1, [r4, #36]	; 0x24
 8001fa6:	e7b7      	b.n	8001f18 <HAL_I2C_Mem_Read+0x1a4>
 8001fa8:	00100002 	.word	0x00100002
 8001fac:	ffff0000 	.word	0xffff0000
 8001fb0:	00010004 	.word	0x00010004

08001fb4 <HAL_I2C_MasterTxCpltCallback>:
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_I2C_MasterRxCpltCallback>:
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_I2C_SlaveTxCpltCallback>:
 8001fb8:	4770      	bx	lr

08001fba <HAL_I2C_SlaveRxCpltCallback>:
 8001fba:	4770      	bx	lr

08001fbc <HAL_I2C_AddrCallback>:
{
 8001fbc:	4770      	bx	lr

08001fbe <HAL_I2C_ListenCpltCallback>:
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_I2C_MemTxCpltCallback>:
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_I2C_MemRxCpltCallback>:
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_I2C_ErrorCallback>:
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_I2C_AbortCpltCallback>:
{
 8001fc6:	4770      	bx	lr

08001fc8 <I2C_ITError>:
  uint32_t CurrentState = hi2c->State;
 8001fc8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8001fcc:	b510      	push	{r4, lr}
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001fce:	3b29      	subs	r3, #41	; 0x29
 8001fd0:	2b01      	cmp	r3, #1
{
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	6803      	ldr	r3, [r0, #0]
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001fd6:	d839      	bhi.n	800204c <I2C_ITError+0x84>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fd8:	2200      	movs	r2, #0
 8001fda:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001fdc:	2228      	movs	r2, #40	; 0x28
 8001fde:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe8:	601a      	str	r2, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001ff0:	d054      	beq.n	800209c <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001ff2:	685a      	ldr	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001ff4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ffa:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001ffc:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002000:	2b01      	cmp	r3, #1
 8002002:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <I2C_ITError+0x120>)
 8002004:	d031      	beq.n	800206a <I2C_ITError+0xa2>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002006:	6343      	str	r3, [r0, #52]	; 0x34
      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002008:	f7ff fa90 	bl	800152c <HAL_DMA_Abort_IT>
 800200c:	b150      	cbz	r0, 8002024 <I2C_ITError+0x5c>
        __HAL_I2C_DISABLE(hi2c);
 800200e:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002010:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8002012:	6813      	ldr	r3, [r2, #0]
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800201a:	2320      	movs	r3, #32
 800201c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002020:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002022:	4798      	blx	r3
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8002024:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002028:	2b28      	cmp	r3, #40	; 0x28
 800202a:	d10e      	bne.n	800204a <I2C_ITError+0x82>
 800202c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800202e:	075b      	lsls	r3, r3, #29
 8002030:	d50b      	bpl.n	800204a <I2C_ITError+0x82>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002032:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <I2C_ITError+0x124>)
    hi2c->State = HAL_I2C_STATE_READY;
 8002034:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002036:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002038:	2300      	movs	r3, #0
    HAL_I2C_ListenCpltCallback(hi2c);
 800203a:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 800203c:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800203e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002042:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002046:	f7ff ffba 	bl	8001fbe <HAL_I2C_ListenCpltCallback>
 800204a:	bd10      	pop	{r4, pc}
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 800204c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002050:	2a60      	cmp	r2, #96	; 0x60
 8002052:	d005      	beq.n	8002060 <I2C_ITError+0x98>
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	0512      	lsls	r2, r2, #20
      hi2c->State = HAL_I2C_STATE_READY;
 8002058:	bf5c      	itt	pl
 800205a:	2220      	movpl	r2, #32
 800205c:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8002060:	2200      	movs	r2, #0
 8002062:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002064:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8002068:	e7bb      	b.n	8001fe2 <I2C_ITError+0x1a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800206a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800206c:	6343      	str	r3, [r0, #52]	; 0x34
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800206e:	f7ff fa5d 	bl	800152c <HAL_DMA_Abort_IT>
 8002072:	2800      	cmp	r0, #0
 8002074:	d0d6      	beq.n	8002024 <I2C_ITError+0x5c>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002076:	6822      	ldr	r2, [r4, #0]
 8002078:	6953      	ldr	r3, [r2, #20]
 800207a:	0658      	lsls	r0, r3, #25
 800207c:	d504      	bpl.n	8002088 <I2C_ITError+0xc0>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800207e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002080:	6912      	ldr	r2, [r2, #16]
 8002082:	1c59      	adds	r1, r3, #1
 8002084:	6261      	str	r1, [r4, #36]	; 0x24
 8002086:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 8002088:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800208a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 800208c:	6813      	ldr	r3, [r2, #0]
 800208e:	f023 0301 	bic.w	r3, r3, #1
 8002092:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002094:	2320      	movs	r3, #32
 8002096:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800209a:	e7c1      	b.n	8002020 <I2C_ITError+0x58>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 800209c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80020a0:	2960      	cmp	r1, #96	; 0x60
 80020a2:	d114      	bne.n	80020ce <I2C_ITError+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 80020a4:	2120      	movs	r1, #32
 80020a6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020aa:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	0651      	lsls	r1, r2, #25
 80020b0:	d504      	bpl.n	80020bc <I2C_ITError+0xf4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	1c51      	adds	r1, r2, #1
 80020b8:	6261      	str	r1, [r4, #36]	; 0x24
 80020ba:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 80020bc:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80020be:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 80020c0:	6813      	ldr	r3, [r2, #0]
 80020c2:	f023 0301 	bic.w	r3, r3, #1
 80020c6:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80020c8:	f7ff ff7d 	bl	8001fc6 <HAL_I2C_AbortCpltCallback>
 80020cc:	e7aa      	b.n	8002024 <I2C_ITError+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	0652      	lsls	r2, r2, #25
 80020d2:	d504      	bpl.n	80020de <I2C_ITError+0x116>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	1c51      	adds	r1, r2, #1
 80020da:	6261      	str	r1, [r4, #36]	; 0x24
 80020dc:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 80020de:	4620      	mov	r0, r4
 80020e0:	f7ff ff70 	bl	8001fc4 <HAL_I2C_ErrorCallback>
 80020e4:	e79e      	b.n	8002024 <I2C_ITError+0x5c>
 80020e6:	bf00      	nop
 80020e8:	08002901 	.word	0x08002901
 80020ec:	ffff0000 	.word	0xffff0000

080020f0 <HAL_I2C_EV_IRQHandler>:
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020f0:	6803      	ldr	r3, [r0, #0]
{
 80020f2:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020f4:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020f6:	6959      	ldr	r1, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 80020f8:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 80020fa:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
{
 80020fe:	b08d      	sub	sp, #52	; 0x34
  uint32_t CurrentMode  = hi2c->Mode;
 8002100:	b2e4      	uxtb	r4, r4
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002102:	2c10      	cmp	r4, #16
 8002104:	d002      	beq.n	800210c <HAL_I2C_EV_IRQHandler+0x1c>
 8002106:	2c40      	cmp	r4, #64	; 0x40
 8002108:	f040 8256 	bne.w	80025b8 <HAL_I2C_EV_IRQHandler+0x4c8>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800210c:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 8002110:	d066      	beq.n	80021e0 <HAL_I2C_EV_IRQHandler+0xf0>
 8002112:	0597      	lsls	r7, r2, #22
 8002114:	d564      	bpl.n	80021e0 <HAL_I2C_EV_IRQHandler+0xf0>
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002116:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 800211a:	2c40      	cmp	r4, #64	; 0x40
 800211c:	d143      	bne.n	80021a6 <HAL_I2C_EV_IRQHandler+0xb6>
    if(hi2c->EventCount == 0U)
 800211e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002120:	2c00      	cmp	r4, #0
 8002122:	d13b      	bne.n	800219c <HAL_I2C_EV_IRQHandler+0xac>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002124:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002126:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800212a:	611c      	str	r4, [r3, #16]
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800212c:	4e94      	ldr	r6, [pc, #592]	; (8002380 <HAL_I2C_EV_IRQHandler+0x290>)
 800212e:	4c95      	ldr	r4, [pc, #596]	; (8002384 <HAL_I2C_EV_IRQHandler+0x294>)
 8002130:	402e      	ands	r6, r5
 8002132:	400c      	ands	r4, r1
 8002134:	2e00      	cmp	r6, #0
 8002136:	f000 81a2 	beq.w	800247e <HAL_I2C_EV_IRQHandler+0x38e>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800213a:	4d93      	ldr	r5, [pc, #588]	; (8002388 <HAL_I2C_EV_IRQHandler+0x298>)
 800213c:	400d      	ands	r5, r1
 800213e:	2d00      	cmp	r5, #0
 8002140:	f000 8169 	beq.w	8002416 <HAL_I2C_EV_IRQHandler+0x326>
 8002144:	0555      	lsls	r5, r2, #21
 8002146:	f140 8166 	bpl.w	8002416 <HAL_I2C_EV_IRQHandler+0x326>
 800214a:	2c00      	cmp	r4, #0
 800214c:	f040 8163 	bne.w	8002416 <HAL_I2C_EV_IRQHandler+0x326>
  uint32_t CurrentState       = hi2c->State;
 8002150:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002154:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  uint32_t CurrentMode        = hi2c->Mode;
 8002156:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentState       = hi2c->State;
 800215a:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 800215c:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800215e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002160:	2d00      	cmp	r5, #0
 8002162:	f040 8117 	bne.w	8002394 <HAL_I2C_EV_IRQHandler+0x2a4>
 8002166:	2a21      	cmp	r2, #33	; 0x21
 8002168:	f040 8116 	bne.w	8002398 <HAL_I2C_EV_IRQHandler+0x2a8>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800216c:	2c04      	cmp	r4, #4
 800216e:	f000 816f 	beq.w	8002450 <HAL_I2C_EV_IRQHandler+0x360>
 8002172:	2c08      	cmp	r4, #8
 8002174:	f000 816c 	beq.w	8002450 <HAL_I2C_EV_IRQHandler+0x360>
 8002178:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 800217c:	f000 8168 	beq.w	8002450 <HAL_I2C_EV_IRQHandler+0x360>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002186:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002188:	2311      	movs	r3, #17
 800218a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800218c:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002190:	2320      	movs	r3, #32
 8002192:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002196:	f7ff ff0d 	bl	8001fb4 <HAL_I2C_MasterTxCpltCallback>
 800219a:	e118      	b.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800219c:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800219e:	f044 0401 	orr.w	r4, r4, #1
 80021a2:	b2e4      	uxtb	r4, r4
 80021a4:	e7c1      	b.n	800212a <HAL_I2C_EV_IRQHandler+0x3a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021a6:	6904      	ldr	r4, [r0, #16]
 80021a8:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 80021ac:	d105      	bne.n	80021ba <HAL_I2C_EV_IRQHandler+0xca>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 80021ae:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80021b2:	2c21      	cmp	r4, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80021b4:	6c44      	ldr	r4, [r0, #68]	; 0x44
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 80021b6:	d1f2      	bne.n	800219e <HAL_I2C_EV_IRQHandler+0xae>
 80021b8:	e7b5      	b.n	8002126 <HAL_I2C_EV_IRQHandler+0x36>
      if(hi2c->EventCount == 0U)
 80021ba:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80021bc:	b934      	cbnz	r4, 80021cc <HAL_I2C_EV_IRQHandler+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80021be:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80021c0:	11e4      	asrs	r4, r4, #7
 80021c2:	f004 0406 	and.w	r4, r4, #6
 80021c6:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 80021ca:	e7ae      	b.n	800212a <HAL_I2C_EV_IRQHandler+0x3a>
      else if(hi2c->EventCount == 1U)
 80021cc:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80021ce:	2c01      	cmp	r4, #1
 80021d0:	d1ac      	bne.n	800212c <HAL_I2C_EV_IRQHandler+0x3c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80021d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80021d4:	11e4      	asrs	r4, r4, #7
 80021d6:	f004 0406 	and.w	r4, r4, #6
 80021da:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 80021de:	e7a4      	b.n	800212a <HAL_I2C_EV_IRQHandler+0x3a>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80021e0:	4c6a      	ldr	r4, [pc, #424]	; (800238c <HAL_I2C_EV_IRQHandler+0x29c>)
 80021e2:	400c      	ands	r4, r1
 80021e4:	b11c      	cbz	r4, 80021ee <HAL_I2C_EV_IRQHandler+0xfe>
 80021e6:	0596      	lsls	r6, r2, #22
 80021e8:	d501      	bpl.n	80021ee <HAL_I2C_EV_IRQHandler+0xfe>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80021ea:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80021ec:	e7d9      	b.n	80021a2 <HAL_I2C_EV_IRQHandler+0xb2>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80021ee:	4c68      	ldr	r4, [pc, #416]	; (8002390 <HAL_I2C_EV_IRQHandler+0x2a0>)
 80021f0:	400c      	ands	r4, r1
 80021f2:	2c00      	cmp	r4, #0
 80021f4:	d09a      	beq.n	800212c <HAL_I2C_EV_IRQHandler+0x3c>
 80021f6:	0594      	lsls	r4, r2, #22
 80021f8:	d598      	bpl.n	800212c <HAL_I2C_EV_IRQHandler+0x3c>
  uint32_t CurrentMode        = hi2c->Mode;
 80021fa:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021fe:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 8002200:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002204:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
  uint32_t CurrentMode        = hi2c->Mode;
 8002208:	b2e4      	uxtb	r4, r4
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800220a:	2f22      	cmp	r7, #34	; 0x22
 800220c:	f040 80af 	bne.w	800236e <HAL_I2C_EV_IRQHandler+0x27e>
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002210:	6d07      	ldr	r7, [r0, #80]	; 0x50
 8002212:	b947      	cbnz	r7, 8002226 <HAL_I2C_EV_IRQHandler+0x136>
 8002214:	2c40      	cmp	r4, #64	; 0x40
 8002216:	d106      	bne.n	8002226 <HAL_I2C_EV_IRQHandler+0x136>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002218:	9700      	str	r7, [sp, #0]
 800221a:	695c      	ldr	r4, [r3, #20]
 800221c:	9400      	str	r4, [sp, #0]
 800221e:	699c      	ldr	r4, [r3, #24]
 8002220:	9400      	str	r4, [sp, #0]
 8002222:	9c00      	ldr	r4, [sp, #0]
 8002224:	e782      	b.n	800212c <HAL_I2C_EV_IRQHandler+0x3c>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002226:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002228:	b98c      	cbnz	r4, 800224e <HAL_I2C_EV_IRQHandler+0x15e>
 800222a:	6907      	ldr	r7, [r0, #16]
 800222c:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 8002230:	d10d      	bne.n	800224e <HAL_I2C_EV_IRQHandler+0x15e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002232:	9401      	str	r4, [sp, #4]
 8002234:	695c      	ldr	r4, [r3, #20]
 8002236:	9401      	str	r4, [sp, #4]
 8002238:	699c      	ldr	r4, [r3, #24]
 800223a:	9401      	str	r4, [sp, #4]
 800223c:	9c01      	ldr	r4, [sp, #4]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800223e:	681c      	ldr	r4, [r3, #0]
 8002240:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8002244:	601c      	str	r4, [r3, #0]
      hi2c->EventCount++;
 8002246:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002248:	3401      	adds	r4, #1
      hi2c->EventCount = 0U;
 800224a:	6504      	str	r4, [r0, #80]	; 0x50
 800224c:	e76e      	b.n	800212c <HAL_I2C_EV_IRQHandler+0x3c>
      if(hi2c->XferCount == 0U)
 800224e:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8002250:	b2a4      	uxth	r4, r4
 8002252:	b954      	cbnz	r4, 800226a <HAL_I2C_EV_IRQHandler+0x17a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002254:	9402      	str	r4, [sp, #8]
 8002256:	695c      	ldr	r4, [r3, #20]
 8002258:	9402      	str	r4, [sp, #8]
 800225a:	699c      	ldr	r4, [r3, #24]
 800225c:	9402      	str	r4, [sp, #8]
 800225e:	9c02      	ldr	r4, [sp, #8]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002260:	681c      	ldr	r4, [r3, #0]
 8002262:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8002266:	601c      	str	r4, [r3, #0]
 8002268:	e019      	b.n	800229e <HAL_I2C_EV_IRQHandler+0x1ae>
      else if(hi2c->XferCount == 1U)   
 800226a:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800226c:	b2a4      	uxth	r4, r4
 800226e:	2c01      	cmp	r4, #1
 8002270:	d142      	bne.n	80022f8 <HAL_I2C_EV_IRQHandler+0x208>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002272:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8002276:	d11b      	bne.n	80022b0 <HAL_I2C_EV_IRQHandler+0x1c0>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002278:	681c      	ldr	r4, [r3, #0]
 800227a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800227e:	601c      	str	r4, [r3, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002280:	685c      	ldr	r4, [r3, #4]
 8002282:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8002286:	d00c      	beq.n	80022a2 <HAL_I2C_EV_IRQHandler+0x1b2>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002288:	681c      	ldr	r4, [r3, #0]
 800228a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800228e:	601c      	str	r4, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002290:	2400      	movs	r4, #0
 8002292:	9403      	str	r4, [sp, #12]
 8002294:	695c      	ldr	r4, [r3, #20]
 8002296:	9403      	str	r4, [sp, #12]
 8002298:	699c      	ldr	r4, [r3, #24]
 800229a:	9403      	str	r4, [sp, #12]
 800229c:	9c03      	ldr	r4, [sp, #12]
      hi2c->EventCount = 0U;
 800229e:	2400      	movs	r4, #0
 80022a0:	e7d3      	b.n	800224a <HAL_I2C_EV_IRQHandler+0x15a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a2:	9404      	str	r4, [sp, #16]
 80022a4:	695c      	ldr	r4, [r3, #20]
 80022a6:	9404      	str	r4, [sp, #16]
 80022a8:	699c      	ldr	r4, [r3, #24]
 80022aa:	9404      	str	r4, [sp, #16]
 80022ac:	9c04      	ldr	r4, [sp, #16]
 80022ae:	e7d7      	b.n	8002260 <HAL_I2C_EV_IRQHandler+0x170>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80022b0:	2e04      	cmp	r6, #4
 80022b2:	d015      	beq.n	80022e0 <HAL_I2C_EV_IRQHandler+0x1f0>
 80022b4:	2e08      	cmp	r6, #8
 80022b6:	d013      	beq.n	80022e0 <HAL_I2C_EV_IRQHandler+0x1f0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 80022b8:	f1be 0f12 	cmp.w	lr, #18
 80022bc:	d010      	beq.n	80022e0 <HAL_I2C_EV_IRQHandler+0x1f0>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80022be:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80022c0:	2c02      	cmp	r4, #2
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80022c2:	681c      	ldr	r4, [r3, #0]
 80022c4:	bf14      	ite	ne
 80022c6:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80022ca:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 80022ce:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d0:	2400      	movs	r4, #0
 80022d2:	9405      	str	r4, [sp, #20]
 80022d4:	695c      	ldr	r4, [r3, #20]
 80022d6:	9405      	str	r4, [sp, #20]
 80022d8:	699c      	ldr	r4, [r3, #24]
 80022da:	9405      	str	r4, [sp, #20]
 80022dc:	9c05      	ldr	r4, [sp, #20]
 80022de:	e7de      	b.n	800229e <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80022e0:	681c      	ldr	r4, [r3, #0]
 80022e2:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80022e6:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e8:	2400      	movs	r4, #0
 80022ea:	9406      	str	r4, [sp, #24]
 80022ec:	695c      	ldr	r4, [r3, #20]
 80022ee:	9406      	str	r4, [sp, #24]
 80022f0:	699c      	ldr	r4, [r3, #24]
 80022f2:	9406      	str	r4, [sp, #24]
 80022f4:	9c06      	ldr	r4, [sp, #24]
 80022f6:	e7b3      	b.n	8002260 <HAL_I2C_EV_IRQHandler+0x170>
      else if(hi2c->XferCount == 2U)
 80022f8:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80022fa:	b2a4      	uxth	r4, r4
 80022fc:	2c02      	cmp	r4, #2
 80022fe:	d123      	bne.n	8002348 <HAL_I2C_EV_IRQHandler+0x258>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8002300:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002302:	2600      	movs	r6, #0
 8002304:	2c02      	cmp	r4, #2
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002306:	681c      	ldr	r4, [r3, #0]
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8002308:	d014      	beq.n	8002334 <HAL_I2C_EV_IRQHandler+0x244>
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 800230a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800230e:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002310:	9607      	str	r6, [sp, #28]
 8002312:	695c      	ldr	r4, [r3, #20]
 8002314:	9407      	str	r4, [sp, #28]
 8002316:	699c      	ldr	r4, [r3, #24]
 8002318:	9407      	str	r4, [sp, #28]
 800231a:	9c07      	ldr	r4, [sp, #28]
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800231c:	681c      	ldr	r4, [r3, #0]
 800231e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8002322:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002324:	685c      	ldr	r4, [r3, #4]
 8002326:	0527      	lsls	r7, r4, #20
 8002328:	d5b9      	bpl.n	800229e <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 800232a:	685c      	ldr	r4, [r3, #4]
 800232c:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 8002330:	605c      	str	r4, [r3, #4]
 8002332:	e7b4      	b.n	800229e <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002334:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8002338:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233a:	9608      	str	r6, [sp, #32]
 800233c:	695c      	ldr	r4, [r3, #20]
 800233e:	9408      	str	r4, [sp, #32]
 8002340:	699c      	ldr	r4, [r3, #24]
 8002342:	9408      	str	r4, [sp, #32]
 8002344:	9c08      	ldr	r4, [sp, #32]
 8002346:	e7ed      	b.n	8002324 <HAL_I2C_EV_IRQHandler+0x234>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002348:	681c      	ldr	r4, [r3, #0]
 800234a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 800234e:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002350:	685c      	ldr	r4, [r3, #4]
 8002352:	0526      	lsls	r6, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8002354:	bf42      	ittt	mi
 8002356:	685c      	ldrmi	r4, [r3, #4]
 8002358:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 800235c:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235e:	2400      	movs	r4, #0
 8002360:	9409      	str	r4, [sp, #36]	; 0x24
 8002362:	695c      	ldr	r4, [r3, #20]
 8002364:	9409      	str	r4, [sp, #36]	; 0x24
 8002366:	699c      	ldr	r4, [r3, #24]
 8002368:	9409      	str	r4, [sp, #36]	; 0x24
 800236a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800236c:	e797      	b.n	800229e <HAL_I2C_EV_IRQHandler+0x1ae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236e:	2400      	movs	r4, #0
 8002370:	940a      	str	r4, [sp, #40]	; 0x28
 8002372:	695c      	ldr	r4, [r3, #20]
 8002374:	940a      	str	r4, [sp, #40]	; 0x28
 8002376:	699c      	ldr	r4, [r3, #24]
 8002378:	940a      	str	r4, [sp, #40]	; 0x28
 800237a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800237c:	e6d6      	b.n	800212c <HAL_I2C_EV_IRQHandler+0x3c>
 800237e:	bf00      	nop
 8002380:	00100004 	.word	0x00100004
 8002384:	00010004 	.word	0x00010004
 8002388:	00010080 	.word	0x00010080
 800238c:	00010008 	.word	0x00010008
 8002390:	00010002 	.word	0x00010002
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002394:	2a21      	cmp	r2, #33	; 0x21
 8002396:	d003      	beq.n	80023a0 <HAL_I2C_EV_IRQHandler+0x2b0>
 8002398:	2940      	cmp	r1, #64	; 0x40
 800239a:	d118      	bne.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800239c:	2a22      	cmp	r2, #34	; 0x22
 800239e:	d116      	bne.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
    if(hi2c->XferCount == 0U)
 80023a0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80023a2:	b292      	uxth	r2, r2
 80023a4:	b922      	cbnz	r2, 80023b0 <HAL_I2C_EV_IRQHandler+0x2c0>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	e00e      	b.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80023b0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80023b4:	2a40      	cmp	r2, #64	; 0x40
 80023b6:	d128      	bne.n	800240a <HAL_I2C_EV_IRQHandler+0x31a>
        if(hi2c->EventCount == 0)
 80023b8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80023ba:	b982      	cbnz	r2, 80023de <HAL_I2C_EV_IRQHandler+0x2ee>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80023bc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80023be:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80023c0:	6c82      	ldr	r2, [r0, #72]	; 0x48
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80023c2:	d106      	bne.n	80023d2 <HAL_I2C_EV_IRQHandler+0x2e2>
 80023c4:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80023c6:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2;
 80023c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80023ca:	3302      	adds	r3, #2
            hi2c->EventCount++;
 80023cc:	6503      	str	r3, [r0, #80]	; 0x50
}
 80023ce:	b00d      	add	sp, #52	; 0x34
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80023d2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023d6:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 80023d8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80023da:	3301      	adds	r3, #1
 80023dc:	e7f6      	b.n	80023cc <HAL_I2C_EV_IRQHandler+0x2dc>
        else if(hi2c->EventCount == 1)
 80023de:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80023e0:	2a01      	cmp	r2, #1
 80023e2:	d102      	bne.n	80023ea <HAL_I2C_EV_IRQHandler+0x2fa>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80023e4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	e7f5      	b.n	80023d6 <HAL_I2C_EV_IRQHandler+0x2e6>
        else if(hi2c->EventCount == 2)
 80023ea:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80023ec:	2a02      	cmp	r2, #2
 80023ee:	d1ee      	bne.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023f0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80023f4:	2a22      	cmp	r2, #34	; 0x22
 80023f6:	d104      	bne.n	8002402 <HAL_I2C_EV_IRQHandler+0x312>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e7e5      	b.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002402:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002406:	2a21      	cmp	r2, #33	; 0x21
 8002408:	d1e1      	bne.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800240a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800240c:	1c51      	adds	r1, r2, #1
 800240e:	6241      	str	r1, [r0, #36]	; 0x24
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	611a      	str	r2, [r3, #16]
 8002414:	e099      	b.n	800254a <HAL_I2C_EV_IRQHandler+0x45a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002416:	2c00      	cmp	r4, #0
 8002418:	d0d9      	beq.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
 800241a:	0594      	lsls	r4, r2, #22
 800241c:	d5d7      	bpl.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800241e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002420:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002424:	2a21      	cmp	r2, #33	; 0x21
 8002426:	d1d2      	bne.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
    if(hi2c->XferCount != 0U)
 8002428:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800242a:	b292      	uxth	r2, r2
 800242c:	2a00      	cmp	r2, #0
 800242e:	d1ec      	bne.n	800240a <HAL_I2C_EV_IRQHandler+0x31a>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002430:	2904      	cmp	r1, #4
 8002432:	d00d      	beq.n	8002450 <HAL_I2C_EV_IRQHandler+0x360>
 8002434:	2908      	cmp	r1, #8
 8002436:	d00b      	beq.n	8002450 <HAL_I2C_EV_IRQHandler+0x360>
 8002438:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800243c:	d008      	beq.n	8002450 <HAL_I2C_EV_IRQHandler+0x360>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002444:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002446:	2311      	movs	r3, #17
 8002448:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800244a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 800244e:	e69f      	b.n	8002190 <HAL_I2C_EV_IRQHandler+0xa0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002456:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002460:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002462:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002464:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002466:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800246a:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800246e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002472:	2a40      	cmp	r2, #64	; 0x40
 8002474:	f47f ae8f 	bne.w	8002196 <HAL_I2C_EV_IRQHandler+0xa6>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002478:	f7ff fda2 	bl	8001fc0 <HAL_I2C_MemTxCpltCallback>
 800247c:	e7a7      	b.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800247e:	4d8f      	ldr	r5, [pc, #572]	; (80026bc <HAL_I2C_EV_IRQHandler+0x5cc>)
 8002480:	400d      	ands	r5, r1
 8002482:	2d00      	cmp	r5, #0
 8002484:	d046      	beq.n	8002514 <HAL_I2C_EV_IRQHandler+0x424>
 8002486:	0551      	lsls	r1, r2, #21
 8002488:	d544      	bpl.n	8002514 <HAL_I2C_EV_IRQHandler+0x424>
 800248a:	2c00      	cmp	r4, #0
 800248c:	d142      	bne.n	8002514 <HAL_I2C_EV_IRQHandler+0x424>
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800248e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002492:	2a22      	cmp	r2, #34	; 0x22
 8002494:	d19b      	bne.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
    tmp = hi2c->XferCount;
 8002496:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002498:	b292      	uxth	r2, r2
    if(tmp > 3U)
 800249a:	2a03      	cmp	r2, #3
 800249c:	d905      	bls.n	80024aa <HAL_I2C_EV_IRQHandler+0x3ba>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800249e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	1c51      	adds	r1, r2, #1
 80024a4:	6241      	str	r1, [r0, #36]	; 0x24
 80024a6:	7013      	strb	r3, [r2, #0]
 80024a8:	e04f      	b.n	800254a <HAL_I2C_EV_IRQHandler+0x45a>
    else if((tmp == 2U) || (tmp == 3U))
 80024aa:	3a02      	subs	r2, #2
 80024ac:	2a01      	cmp	r2, #1
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80024ae:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    else if((tmp == 2U) || (tmp == 3U))
 80024b0:	d80d      	bhi.n	80024ce <HAL_I2C_EV_IRQHandler+0x3de>
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80024b2:	2a02      	cmp	r2, #2
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	bf1d      	ittte	ne
 80024b8:	f422 6280 	bicne.w	r2, r2, #1024	; 0x400
 80024bc:	601a      	strne	r2, [r3, #0]
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 80024be:	681a      	ldrne	r2, [r3, #0]
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80024c0:	f442 6280 	orreq.w	r2, r2, #1024	; 0x400
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 80024c4:	bf18      	it	ne
 80024c6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e76b      	b.n	80023a6 <HAL_I2C_EV_IRQHandler+0x2b6>
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80024ce:	2a02      	cmp	r2, #2
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	bf14      	ite	ne
 80024d4:	f422 6280 	bicne.w	r2, r2, #1024	; 0x400
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80024d8:	f442 6280 	orreq.w	r2, r2, #1024	; 0x400
 80024dc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024e4:	605a      	str	r2, [r3, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024e6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	1c51      	adds	r1, r2, #1
 80024ec:	6241      	str	r1, [r0, #36]	; 0x24
 80024ee:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80024f0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_READY;
 80024f8:	2320      	movs	r3, #32
 80024fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80024fe:	2300      	movs	r3, #0
 8002500:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002502:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002506:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800250a:	2a40      	cmp	r2, #64	; 0x40
 800250c:	d151      	bne.n	80025b2 <HAL_I2C_EV_IRQHandler+0x4c2>
      HAL_I2C_MemRxCpltCallback(hi2c);
 800250e:	f7ff fd58 	bl	8001fc2 <HAL_I2C_MemRxCpltCallback>
 8002512:	e75c      	b.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002514:	2c00      	cmp	r4, #0
 8002516:	f43f af5a 	beq.w	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
 800251a:	0597      	lsls	r7, r2, #22
 800251c:	f57f af57 	bpl.w	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002520:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 3U)
 8002522:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8002524:	b289      	uxth	r1, r1
 8002526:	2903      	cmp	r1, #3
 8002528:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800252a:	d113      	bne.n	8002554 <HAL_I2C_EV_IRQHandler+0x464>
    if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800252c:	2a04      	cmp	r2, #4
 800252e:	d004      	beq.n	800253a <HAL_I2C_EV_IRQHandler+0x44a>
 8002530:	2a08      	cmp	r2, #8
 8002532:	d002      	beq.n	800253a <HAL_I2C_EV_IRQHandler+0x44a>
 8002534:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002538:	d103      	bne.n	8002542 <HAL_I2C_EV_IRQHandler+0x452>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002540:	601a      	str	r2, [r3, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	1c4a      	adds	r2, r1, #1
 8002546:	6242      	str	r2, [r0, #36]	; 0x24
 8002548:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 800254a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800254c:	3b01      	subs	r3, #1
 800254e:	b29b      	uxth	r3, r3
 8002550:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8002552:	e73c      	b.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
  else if(hi2c->XferCount == 2U)
 8002554:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8002556:	b2a4      	uxth	r4, r4
 8002558:	2c02      	cmp	r4, #2
 800255a:	d1f2      	bne.n	8002542 <HAL_I2C_EV_IRQHandler+0x452>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800255c:	2a04      	cmp	r2, #4
 800255e:	d01f      	beq.n	80025a0 <HAL_I2C_EV_IRQHandler+0x4b0>
 8002560:	2a08      	cmp	r2, #8
 8002562:	d01d      	beq.n	80025a0 <HAL_I2C_EV_IRQHandler+0x4b0>
 8002564:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002568:	d01a      	beq.n	80025a0 <HAL_I2C_EV_IRQHandler+0x4b0>
      if(CurrentXferOptions != I2C_NEXT_FRAME)
 800256a:	2a02      	cmp	r2, #2
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	bf14      	ite	ne
 8002570:	f422 6280 	bicne.w	r2, r2, #1024	; 0x400
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002574:	f442 6280 	orreq.w	r2, r2, #1024	; 0x400
 8002578:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002580:	605a      	str	r2, [r3, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	1c4a      	adds	r2, r1, #1
 8002586:	6242      	str	r2, [r0, #36]	; 0x24
 8002588:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 800258a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800258c:	3b01      	subs	r3, #1
 800258e:	b29b      	uxth	r3, r3
 8002590:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002592:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	6242      	str	r2, [r0, #36]	; 0x24
 8002598:	6802      	ldr	r2, [r0, #0]
 800259a:	6912      	ldr	r2, [r2, #16]
 800259c:	701a      	strb	r2, [r3, #0]
 800259e:	e7a7      	b.n	80024f0 <HAL_I2C_EV_IRQHandler+0x400>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025a6:	605a      	str	r2, [r3, #4]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	e7e7      	b.n	8002582 <HAL_I2C_EV_IRQHandler+0x492>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80025b2:	f7ff fd00 	bl	8001fb6 <HAL_I2C_MasterRxCpltCallback>
 80025b6:	e70a      	b.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80025b8:	4c41      	ldr	r4, [pc, #260]	; (80026c0 <HAL_I2C_EV_IRQHandler+0x5d0>)
 80025ba:	400c      	ands	r4, r1
 80025bc:	b174      	cbz	r4, 80025dc <HAL_I2C_EV_IRQHandler+0x4ec>
 80025be:	0596      	lsls	r6, r2, #22
 80025c0:	d50c      	bpl.n	80025dc <HAL_I2C_EV_IRQHandler+0x4ec>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 80025c2:	6999      	ldr	r1, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 80025c4:	699b      	ldr	r3, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 80025c6:	f081 0104 	eor.w	r1, r1, #4
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 80025ca:	061d      	lsls	r5, r3, #24
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80025cc:	f3c1 0180 	ubfx	r1, r1, #2, #1
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 80025d0:	bf54      	ite	pl
 80025d2:	8982      	ldrhpl	r2, [r0, #12]
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 80025d4:	8b02      	ldrhmi	r2, [r0, #24]
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80025d6:	f7ff fcf1 	bl	8001fbc <HAL_I2C_AddrCallback>
 80025da:	e6f8      	b.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80025dc:	4c39      	ldr	r4, [pc, #228]	; (80026c4 <HAL_I2C_EV_IRQHandler+0x5d4>)
 80025de:	400c      	ands	r4, r1
 80025e0:	2c00      	cmp	r4, #0
 80025e2:	d073      	beq.n	80026cc <HAL_I2C_EV_IRQHandler+0x5dc>
 80025e4:	0594      	lsls	r4, r2, #22
 80025e6:	d571      	bpl.n	80026cc <HAL_I2C_EV_IRQHandler+0x5dc>
  uint32_t CurrentState = hi2c->State;
 80025e8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025ec:	6859      	ldr	r1, [r3, #4]
  uint32_t CurrentState = hi2c->State;
 80025ee:	b2d2      	uxtb	r2, r2
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025f0:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80025f4:	6059      	str	r1, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80025f6:	2100      	movs	r1, #0
 80025f8:	910b      	str	r1, [sp, #44]	; 0x2c
 80025fa:	6959      	ldr	r1, [r3, #20]
 80025fc:	910b      	str	r1, [sp, #44]	; 0x2c
 80025fe:	6819      	ldr	r1, [r3, #0]
 8002600:	f041 0101 	orr.w	r1, r1, #1
 8002604:	6019      	str	r1, [r3, #0]
 8002606:	990b      	ldr	r1, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002608:	6819      	ldr	r1, [r3, #0]
 800260a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800260e:	6019      	str	r1, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002610:	6859      	ldr	r1, [r3, #4]
 8002612:	0509      	lsls	r1, r1, #20
 8002614:	d50c      	bpl.n	8002630 <HAL_I2C_EV_IRQHandler+0x540>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002616:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800261a:	2922      	cmp	r1, #34	; 0x22
 800261c:	d003      	beq.n	8002626 <HAL_I2C_EV_IRQHandler+0x536>
 800261e:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002622:	292a      	cmp	r1, #42	; 0x2a
 8002624:	d129      	bne.n	800267a <HAL_I2C_EV_IRQHandler+0x58a>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002626:	6b81      	ldr	r1, [r0, #56]	; 0x38
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002628:	6809      	ldr	r1, [r1, #0]
 800262a:	6849      	ldr	r1, [r1, #4]
 800262c:	b289      	uxth	r1, r1
 800262e:	8541      	strh	r1, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 8002630:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8002632:	b289      	uxth	r1, r1
 8002634:	b1e1      	cbz	r1, 8002670 <HAL_I2C_EV_IRQHandler+0x580>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002636:	6959      	ldr	r1, [r3, #20]
 8002638:	074f      	lsls	r7, r1, #29
 800263a:	d508      	bpl.n	800264e <HAL_I2C_EV_IRQHandler+0x55e>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800263c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	1c4c      	adds	r4, r1, #1
 8002642:	6244      	str	r4, [r0, #36]	; 0x24
 8002644:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 8002646:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002648:	3b01      	subs	r3, #1
 800264a:	b29b      	uxth	r3, r3
 800264c:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800264e:	6801      	ldr	r1, [r0, #0]
 8002650:	694b      	ldr	r3, [r1, #20]
 8002652:	065e      	lsls	r6, r3, #25
 8002654:	d508      	bpl.n	8002668 <HAL_I2C_EV_IRQHandler+0x578>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002656:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002658:	6909      	ldr	r1, [r1, #16]
 800265a:	1c5c      	adds	r4, r3, #1
 800265c:	6244      	str	r4, [r0, #36]	; 0x24
 800265e:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 8002660:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002662:	3b01      	subs	r3, #1
 8002664:	b29b      	uxth	r3, r3
 8002666:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002668:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	6403      	str	r3, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002670:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002672:	b123      	cbz	r3, 800267e <HAL_I2C_EV_IRQHandler+0x58e>
    I2C_ITError(hi2c);
 8002674:	f7ff fca8 	bl	8001fc8 <I2C_ITError>
 8002678:	e6a9      	b.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800267a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800267c:	e7d4      	b.n	8002628 <HAL_I2C_EV_IRQHandler+0x538>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 800267e:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 8002682:	2902      	cmp	r1, #2
 8002684:	d80a      	bhi.n	800269c <HAL_I2C_EV_IRQHandler+0x5ac>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002686:	4a10      	ldr	r2, [pc, #64]	; (80026c8 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8002688:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 800268a:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 800268c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800268e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002692:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002696:	f7ff fc92 	bl	8001fbe <HAL_I2C_ListenCpltCallback>
 800269a:	e698      	b.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800269c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800269e:	2b22      	cmp	r3, #34	; 0x22
 80026a0:	d002      	beq.n	80026a8 <HAL_I2C_EV_IRQHandler+0x5b8>
 80026a2:	2a22      	cmp	r2, #34	; 0x22
 80026a4:	f47f ae93 	bne.w	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
        hi2c->PreviousState = I2C_STATE_NONE;
 80026a8:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80026ac:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80026ae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80026b6:	f7ff fc80 	bl	8001fba <HAL_I2C_SlaveRxCpltCallback>
 80026ba:	e688      	b.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
 80026bc:	00010040 	.word	0x00010040
 80026c0:	00010002 	.word	0x00010002
 80026c4:	00010010 	.word	0x00010010
 80026c8:	ffff0000 	.word	0xffff0000
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80026cc:	4e39      	ldr	r6, [pc, #228]	; (80027b4 <HAL_I2C_EV_IRQHandler+0x6c4>)
 80026ce:	4c3a      	ldr	r4, [pc, #232]	; (80027b8 <HAL_I2C_EV_IRQHandler+0x6c8>)
 80026d0:	402e      	ands	r6, r5
 80026d2:	400c      	ands	r4, r1
 80026d4:	2e00      	cmp	r6, #0
 80026d6:	d036      	beq.n	8002746 <HAL_I2C_EV_IRQHandler+0x656>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80026d8:	4d38      	ldr	r5, [pc, #224]	; (80027bc <HAL_I2C_EV_IRQHandler+0x6cc>)
 80026da:	400d      	ands	r5, r1
 80026dc:	b33d      	cbz	r5, 800272e <HAL_I2C_EV_IRQHandler+0x63e>
 80026de:	0555      	lsls	r5, r2, #21
 80026e0:	d525      	bpl.n	800272e <HAL_I2C_EV_IRQHandler+0x63e>
 80026e2:	bb24      	cbnz	r4, 800272e <HAL_I2C_EV_IRQHandler+0x63e>
  uint32_t CurrentState = hi2c->State;
 80026e4:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 80026e8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
  uint32_t CurrentState = hi2c->State;
 80026ea:	b2c9      	uxtb	r1, r1
  if(hi2c->XferCount != 0U)
 80026ec:	b292      	uxth	r2, r2
 80026ee:	2a00      	cmp	r2, #0
 80026f0:	f43f ae6d 	beq.w	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80026f4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80026f6:	1c54      	adds	r4, r2, #1
 80026f8:	6244      	str	r4, [r0, #36]	; 0x24
 80026fa:	7812      	ldrb	r2, [r2, #0]
 80026fc:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 80026fe:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002700:	3a01      	subs	r2, #1
 8002702:	b292      	uxth	r2, r2
 8002704:	8542      	strh	r2, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002706:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002708:	b292      	uxth	r2, r2
 800270a:	2a00      	cmp	r2, #0
 800270c:	f47f ae5f 	bne.w	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
 8002710:	2929      	cmp	r1, #41	; 0x29
 8002712:	f47f ae5c 	bne.w	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271c:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800271e:	2321      	movs	r3, #33	; 0x21
 8002720:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002722:	2328      	movs	r3, #40	; 0x28
 8002724:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002728:	f7ff fc46 	bl	8001fb8 <HAL_I2C_SlaveTxCpltCallback>
 800272c:	e64f      	b.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800272e:	2c00      	cmp	r4, #0
 8002730:	f43f ae4d 	beq.w	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
 8002734:	0594      	lsls	r4, r2, #22
 8002736:	f57f ae4a 	bpl.w	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
  if(hi2c->XferCount != 0U)
 800273a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800273c:	b292      	uxth	r2, r2
 800273e:	2a00      	cmp	r2, #0
 8002740:	f47f ae63 	bne.w	800240a <HAL_I2C_EV_IRQHandler+0x31a>
 8002744:	e643      	b.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002746:	4d1e      	ldr	r5, [pc, #120]	; (80027c0 <HAL_I2C_EV_IRQHandler+0x6d0>)
 8002748:	400d      	ands	r5, r1
 800274a:	b335      	cbz	r5, 800279a <HAL_I2C_EV_IRQHandler+0x6aa>
 800274c:	0551      	lsls	r1, r2, #21
 800274e:	d524      	bpl.n	800279a <HAL_I2C_EV_IRQHandler+0x6aa>
 8002750:	bb1c      	cbnz	r4, 800279a <HAL_I2C_EV_IRQHandler+0x6aa>
  uint32_t CurrentState = hi2c->State;
 8002752:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 8002756:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
  uint32_t CurrentState = hi2c->State;
 8002758:	b2d2      	uxtb	r2, r2
  if(hi2c->XferCount != 0U)
 800275a:	b289      	uxth	r1, r1
 800275c:	2900      	cmp	r1, #0
 800275e:	f43f ae36 	beq.w	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002762:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	1c4c      	adds	r4, r1, #1
 8002768:	6244      	str	r4, [r0, #36]	; 0x24
 800276a:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 800276c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800276e:	3b01      	subs	r3, #1
 8002770:	b29b      	uxth	r3, r3
 8002772:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002774:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	f47f ae28 	bne.w	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
 800277e:	2a2a      	cmp	r2, #42	; 0x2a
 8002780:	f47f ae25 	bne.w	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002784:	6802      	ldr	r2, [r0, #0]
 8002786:	6853      	ldr	r3, [r2, #4]
 8002788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800278c:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800278e:	2322      	movs	r3, #34	; 0x22
 8002790:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002792:	2328      	movs	r3, #40	; 0x28
 8002794:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8002798:	e78d      	b.n	80026b6 <HAL_I2C_EV_IRQHandler+0x5c6>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800279a:	2c00      	cmp	r4, #0
 800279c:	f43f ae17 	beq.w	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
 80027a0:	0592      	lsls	r2, r2, #22
 80027a2:	f57f ae14 	bpl.w	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
  if(hi2c->XferCount != 0U)
 80027a6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80027a8:	b292      	uxth	r2, r2
 80027aa:	2a00      	cmp	r2, #0
 80027ac:	f47f ae77 	bne.w	800249e <HAL_I2C_EV_IRQHandler+0x3ae>
 80027b0:	e60d      	b.n	80023ce <HAL_I2C_EV_IRQHandler+0x2de>
 80027b2:	bf00      	nop
 80027b4:	00100004 	.word	0x00100004
 80027b8:	00010004 	.word	0x00010004
 80027bc:	00010080 	.word	0x00010080
 80027c0:	00010040 	.word	0x00010040

080027c4 <HAL_I2C_ER_IRQHandler>:
{
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80027c6:	6803      	ldr	r3, [r0, #0]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80027c8:	4a4b      	ldr	r2, [pc, #300]	; (80028f8 <HAL_I2C_ER_IRQHandler+0x134>)
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80027ca:	695e      	ldr	r6, [r3, #20]
{
 80027cc:	4604      	mov	r4, r0
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80027ce:	4216      	tst	r6, r2
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80027d0:	685d      	ldr	r5, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80027d2:	d00c      	beq.n	80027ee <HAL_I2C_ER_IRQHandler+0x2a>
 80027d4:	05e8      	lsls	r0, r5, #23
 80027d6:	d50a      	bpl.n	80027ee <HAL_I2C_ER_IRQHandler+0x2a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80027d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027e4:	615a      	str	r2, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027ec:	601a      	str	r2, [r3, #0]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80027ee:	f416 3f81 	tst.w	r6, #66048	; 0x10200
 80027f2:	d008      	beq.n	8002806 <HAL_I2C_ER_IRQHandler+0x42>
 80027f4:	05e9      	lsls	r1, r5, #23
 80027f6:	d506      	bpl.n	8002806 <HAL_I2C_ER_IRQHandler+0x42>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80027f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80027fa:	f042 0202 	orr.w	r2, r2, #2
 80027fe:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002800:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002804:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002806:	f416 3f82 	tst.w	r6, #66560	; 0x10400
 800280a:	d036      	beq.n	800287a <HAL_I2C_ER_IRQHandler+0xb6>
 800280c:	05ea      	lsls	r2, r5, #23
 800280e:	d534      	bpl.n	800287a <HAL_I2C_ER_IRQHandler+0xb6>
    tmp1 = hi2c->Mode;
 8002810:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8002814:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8002816:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800281a:	2f20      	cmp	r7, #32
    tmp2 = hi2c->XferCount;
 800281c:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 800281e:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 8002820:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002822:	d158      	bne.n	80028d6 <HAL_I2C_ER_IRQHandler+0x112>
 8002824:	2900      	cmp	r1, #0
 8002826:	d156      	bne.n	80028d6 <HAL_I2C_ER_IRQHandler+0x112>
 8002828:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 800282c:	2921      	cmp	r1, #33	; 0x21
 800282e:	d003      	beq.n	8002838 <HAL_I2C_ER_IRQHandler+0x74>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002830:	2a28      	cmp	r2, #40	; 0x28
 8002832:	d150      	bne.n	80028d6 <HAL_I2C_ER_IRQHandler+0x112>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002834:	2821      	cmp	r0, #33	; 0x21
 8002836:	d14e      	bne.n	80028d6 <HAL_I2C_ER_IRQHandler+0x112>
  uint32_t CurrentState       = hi2c->State;
 8002838:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800283c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  uint32_t CurrentState       = hi2c->State;
 800283e:	b2d2      	uxtb	r2, r2
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002840:	2904      	cmp	r1, #4
 8002842:	d001      	beq.n	8002848 <HAL_I2C_ER_IRQHandler+0x84>
 8002844:	2908      	cmp	r1, #8
 8002846:	d12c      	bne.n	80028a2 <HAL_I2C_ER_IRQHandler+0xde>
 8002848:	2a28      	cmp	r2, #40	; 0x28
 800284a:	d12a      	bne.n	80028a2 <HAL_I2C_ER_IRQHandler+0xde>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800284c:	4a2b      	ldr	r2, [pc, #172]	; (80028fc <HAL_I2C_ER_IRQHandler+0x138>)
    HAL_I2C_ListenCpltCallback(hi2c);
 800284e:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002850:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002858:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800285a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800285e:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002866:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002868:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800286a:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800286c:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800286e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002872:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002876:	f7ff fba2 	bl	8001fbe <HAL_I2C_ListenCpltCallback>
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800287a:	f416 3f84 	tst.w	r6, #67584	; 0x10800
 800287e:	d009      	beq.n	8002894 <HAL_I2C_ER_IRQHandler+0xd0>
 8002880:	05eb      	lsls	r3, r5, #23
 8002882:	d507      	bpl.n	8002894 <HAL_I2C_ER_IRQHandler+0xd0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002884:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002888:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800288a:	f043 0308 	orr.w	r3, r3, #8
 800288e:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002894:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002896:	b373      	cbz	r3, 80028f6 <HAL_I2C_ER_IRQHandler+0x132>
    I2C_ITError(hi2c);
 8002898:	4620      	mov	r0, r4
}
 800289a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 800289e:	f7ff bb93 	b.w	8001fc8 <I2C_ITError>
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 80028a2:	2a21      	cmp	r2, #33	; 0x21
 80028a4:	d123      	bne.n	80028ee <HAL_I2C_ER_IRQHandler+0x12a>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a6:	4915      	ldr	r1, [pc, #84]	; (80028fc <HAL_I2C_ER_IRQHandler+0x138>)
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028a8:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028aa:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028ac:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80028ae:	2220      	movs	r2, #32
 80028b0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b4:	2200      	movs	r2, #0
 80028b6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028c0:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028c6:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ce:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028d0:	f7ff fb72 	bl	8001fb8 <HAL_I2C_SlaveTxCpltCallback>
 80028d4:	e7d1      	b.n	800287a <HAL_I2C_ER_IRQHandler+0xb6>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80028d8:	f042 0204 	orr.w	r2, r2, #4
 80028dc:	6422      	str	r2, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 80028de:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80028e2:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 80028e4:	bf02      	ittt	eq
 80028e6:	681a      	ldreq	r2, [r3, #0]
 80028e8:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 80028ec:	601a      	streq	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028f2:	615a      	str	r2, [r3, #20]
 80028f4:	e7c1      	b.n	800287a <HAL_I2C_ER_IRQHandler+0xb6>
 80028f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028f8:	00010100 	.word	0x00010100
 80028fc:	ffff0000 	.word	0xffff0000

08002900 <I2C_DMAAbort>:
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002900:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002902:	b508      	push	{r3, lr}
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002904:	6803      	ldr	r3, [r0, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002906:	6b41      	ldr	r1, [r0, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290e:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 8002910:	2200      	movs	r2, #0
 8002912:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002914:	634a      	str	r2, [r1, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002916:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002918:	634a      	str	r2, [r1, #52]	; 0x34
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 800291a:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800291e:	2960      	cmp	r1, #96	; 0x60
 8002920:	f04f 0120 	mov.w	r1, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8002924:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002928:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 800292c:	d107      	bne.n	800293e <I2C_DMAAbort+0x3e>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800292e:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002938:	f7ff fb45 	bl	8001fc6 <HAL_I2C_AbortCpltCallback>
 800293c:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE(hi2c);
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	f022 0201 	bic.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8002946:	f7ff fb3d 	bl	8001fc4 <HAL_I2C_ErrorCallback>
 800294a:	bd08      	pop	{r3, pc}

0800294c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294c:	6803      	ldr	r3, [r0, #0]
{
 800294e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002952:	07db      	lsls	r3, r3, #31
{
 8002954:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002956:	d410      	bmi.n	800297a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002958:	682b      	ldr	r3, [r5, #0]
 800295a:	079f      	lsls	r7, r3, #30
 800295c:	d45e      	bmi.n	8002a1c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800295e:	682b      	ldr	r3, [r5, #0]
 8002960:	0719      	lsls	r1, r3, #28
 8002962:	f100 8095 	bmi.w	8002a90 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002966:	682b      	ldr	r3, [r5, #0]
 8002968:	075a      	lsls	r2, r3, #29
 800296a:	f100 80bf 	bmi.w	8002aec <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800296e:	69ea      	ldr	r2, [r5, #28]
 8002970:	2a00      	cmp	r2, #0
 8002972:	f040 812d 	bne.w	8002bd0 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002976:	2000      	movs	r0, #0
 8002978:	e014      	b.n	80029a4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800297a:	4c90      	ldr	r4, [pc, #576]	; (8002bbc <HAL_RCC_OscConfig+0x270>)
 800297c:	6863      	ldr	r3, [r4, #4]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b04      	cmp	r3, #4
 8002984:	d007      	beq.n	8002996 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002986:	6863      	ldr	r3, [r4, #4]
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b08      	cmp	r3, #8
 800298e:	d10c      	bne.n	80029aa <HAL_RCC_OscConfig+0x5e>
 8002990:	6863      	ldr	r3, [r4, #4]
 8002992:	03de      	lsls	r6, r3, #15
 8002994:	d509      	bpl.n	80029aa <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	039c      	lsls	r4, r3, #14
 800299a:	d5dd      	bpl.n	8002958 <HAL_RCC_OscConfig+0xc>
 800299c:	686b      	ldr	r3, [r5, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1da      	bne.n	8002958 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80029a2:	2001      	movs	r0, #1
}
 80029a4:	b002      	add	sp, #8
 80029a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029aa:	686b      	ldr	r3, [r5, #4]
 80029ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b0:	d110      	bne.n	80029d4 <HAL_RCC_OscConfig+0x88>
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80029ba:	f7fe fd37 	bl	800142c <HAL_GetTick>
 80029be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c0:	6823      	ldr	r3, [r4, #0]
 80029c2:	0398      	lsls	r0, r3, #14
 80029c4:	d4c8      	bmi.n	8002958 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c6:	f7fe fd31 	bl	800142c <HAL_GetTick>
 80029ca:	1b80      	subs	r0, r0, r6
 80029cc:	2864      	cmp	r0, #100	; 0x64
 80029ce:	d9f7      	bls.n	80029c0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80029d0:	2003      	movs	r0, #3
 80029d2:	e7e7      	b.n	80029a4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d4:	b99b      	cbnz	r3, 80029fe <HAL_RCC_OscConfig+0xb2>
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029dc:	6023      	str	r3, [r4, #0]
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80029e6:	f7fe fd21 	bl	800142c <HAL_GetTick>
 80029ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	0399      	lsls	r1, r3, #14
 80029f0:	d5b2      	bpl.n	8002958 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f2:	f7fe fd1b 	bl	800142c <HAL_GetTick>
 80029f6:	1b80      	subs	r0, r0, r6
 80029f8:	2864      	cmp	r0, #100	; 0x64
 80029fa:	d9f7      	bls.n	80029ec <HAL_RCC_OscConfig+0xa0>
 80029fc:	e7e8      	b.n	80029d0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	d103      	bne.n	8002a0e <HAL_RCC_OscConfig+0xc2>
 8002a06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0a:	6023      	str	r3, [r4, #0]
 8002a0c:	e7d1      	b.n	80029b2 <HAL_RCC_OscConfig+0x66>
 8002a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a12:	6023      	str	r3, [r4, #0]
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1a:	e7cd      	b.n	80029b8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a1c:	4c67      	ldr	r4, [pc, #412]	; (8002bbc <HAL_RCC_OscConfig+0x270>)
 8002a1e:	6863      	ldr	r3, [r4, #4]
 8002a20:	f013 0f0c 	tst.w	r3, #12
 8002a24:	d007      	beq.n	8002a36 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a26:	6863      	ldr	r3, [r4, #4]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d110      	bne.n	8002a52 <HAL_RCC_OscConfig+0x106>
 8002a30:	6863      	ldr	r3, [r4, #4]
 8002a32:	03da      	lsls	r2, r3, #15
 8002a34:	d40d      	bmi.n	8002a52 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	079b      	lsls	r3, r3, #30
 8002a3a:	d502      	bpl.n	8002a42 <HAL_RCC_OscConfig+0xf6>
 8002a3c:	692b      	ldr	r3, [r5, #16]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d1af      	bne.n	80029a2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	696a      	ldr	r2, [r5, #20]
 8002a46:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002a4a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002a4e:	6023      	str	r3, [r4, #0]
 8002a50:	e785      	b.n	800295e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a52:	692a      	ldr	r2, [r5, #16]
 8002a54:	4b5a      	ldr	r3, [pc, #360]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002a56:	b16a      	cbz	r2, 8002a74 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8002a58:	2201      	movs	r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fce6 	bl	800142c <HAL_GetTick>
 8002a60:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	079f      	lsls	r7, r3, #30
 8002a66:	d4ec      	bmi.n	8002a42 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a68:	f7fe fce0 	bl	800142c <HAL_GetTick>
 8002a6c:	1b80      	subs	r0, r0, r6
 8002a6e:	2802      	cmp	r0, #2
 8002a70:	d9f7      	bls.n	8002a62 <HAL_RCC_OscConfig+0x116>
 8002a72:	e7ad      	b.n	80029d0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002a74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002a76:	f7fe fcd9 	bl	800142c <HAL_GetTick>
 8002a7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	0798      	lsls	r0, r3, #30
 8002a80:	f57f af6d 	bpl.w	800295e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a84:	f7fe fcd2 	bl	800142c <HAL_GetTick>
 8002a88:	1b80      	subs	r0, r0, r6
 8002a8a:	2802      	cmp	r0, #2
 8002a8c:	d9f6      	bls.n	8002a7c <HAL_RCC_OscConfig+0x130>
 8002a8e:	e79f      	b.n	80029d0 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a90:	69aa      	ldr	r2, [r5, #24]
 8002a92:	4c4a      	ldr	r4, [pc, #296]	; (8002bbc <HAL_RCC_OscConfig+0x270>)
 8002a94:	4b4b      	ldr	r3, [pc, #300]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002a96:	b1da      	cbz	r2, 8002ad0 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8002a98:	2201      	movs	r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002a9c:	f7fe fcc6 	bl	800142c <HAL_GetTick>
 8002aa0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002aa4:	079b      	lsls	r3, r3, #30
 8002aa6:	d50d      	bpl.n	8002ac4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002aa8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002aac:	4b46      	ldr	r3, [pc, #280]	; (8002bc8 <HAL_RCC_OscConfig+0x27c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ab4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002ab6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002ab8:	9b01      	ldr	r3, [sp, #4]
 8002aba:	1e5a      	subs	r2, r3, #1
 8002abc:	9201      	str	r2, [sp, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f9      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x16a>
 8002ac2:	e750      	b.n	8002966 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac4:	f7fe fcb2 	bl	800142c <HAL_GetTick>
 8002ac8:	1b80      	subs	r0, r0, r6
 8002aca:	2802      	cmp	r0, #2
 8002acc:	d9e9      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x156>
 8002ace:	e77f      	b.n	80029d0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002ad0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002ad2:	f7fe fcab 	bl	800142c <HAL_GetTick>
 8002ad6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ada:	079f      	lsls	r7, r3, #30
 8002adc:	f57f af43 	bpl.w	8002966 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae0:	f7fe fca4 	bl	800142c <HAL_GetTick>
 8002ae4:	1b80      	subs	r0, r0, r6
 8002ae6:	2802      	cmp	r0, #2
 8002ae8:	d9f6      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x18c>
 8002aea:	e771      	b.n	80029d0 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aec:	4c33      	ldr	r4, [pc, #204]	; (8002bbc <HAL_RCC_OscConfig+0x270>)
 8002aee:	69e3      	ldr	r3, [r4, #28]
 8002af0:	00d8      	lsls	r0, r3, #3
 8002af2:	d424      	bmi.n	8002b3e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8002af4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af6:	69e3      	ldr	r3, [r4, #28]
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afc:	61e3      	str	r3, [r4, #28]
 8002afe:	69e3      	ldr	r3, [r4, #28]
 8002b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b08:	4e30      	ldr	r6, [pc, #192]	; (8002bcc <HAL_RCC_OscConfig+0x280>)
 8002b0a:	6833      	ldr	r3, [r6, #0]
 8002b0c:	05d9      	lsls	r1, r3, #23
 8002b0e:	d518      	bpl.n	8002b42 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b10:	68eb      	ldr	r3, [r5, #12]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d126      	bne.n	8002b64 <HAL_RCC_OscConfig+0x218>
 8002b16:	6a23      	ldr	r3, [r4, #32]
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002b1e:	f7fe fc85 	bl	800142c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002b26:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b28:	6a23      	ldr	r3, [r4, #32]
 8002b2a:	079b      	lsls	r3, r3, #30
 8002b2c:	d53f      	bpl.n	8002bae <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8002b2e:	2f00      	cmp	r7, #0
 8002b30:	f43f af1d 	beq.w	800296e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b34:	69e3      	ldr	r3, [r4, #28]
 8002b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	61e3      	str	r3, [r4, #28]
 8002b3c:	e717      	b.n	800296e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002b3e:	2700      	movs	r7, #0
 8002b40:	e7e2      	b.n	8002b08 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b42:	6833      	ldr	r3, [r6, #0]
 8002b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b48:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002b4a:	f7fe fc6f 	bl	800142c <HAL_GetTick>
 8002b4e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b50:	6833      	ldr	r3, [r6, #0]
 8002b52:	05da      	lsls	r2, r3, #23
 8002b54:	d4dc      	bmi.n	8002b10 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b56:	f7fe fc69 	bl	800142c <HAL_GetTick>
 8002b5a:	eba0 0008 	sub.w	r0, r0, r8
 8002b5e:	2864      	cmp	r0, #100	; 0x64
 8002b60:	d9f6      	bls.n	8002b50 <HAL_RCC_OscConfig+0x204>
 8002b62:	e735      	b.n	80029d0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b64:	b9ab      	cbnz	r3, 8002b92 <HAL_RCC_OscConfig+0x246>
 8002b66:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	6223      	str	r3, [r4, #32]
 8002b72:	6a23      	ldr	r3, [r4, #32]
 8002b74:	f023 0304 	bic.w	r3, r3, #4
 8002b78:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002b7a:	f7fe fc57 	bl	800142c <HAL_GetTick>
 8002b7e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b80:	6a23      	ldr	r3, [r4, #32]
 8002b82:	0798      	lsls	r0, r3, #30
 8002b84:	d5d3      	bpl.n	8002b2e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe fc51 	bl	800142c <HAL_GetTick>
 8002b8a:	1b80      	subs	r0, r0, r6
 8002b8c:	4540      	cmp	r0, r8
 8002b8e:	d9f7      	bls.n	8002b80 <HAL_RCC_OscConfig+0x234>
 8002b90:	e71e      	b.n	80029d0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b92:	2b05      	cmp	r3, #5
 8002b94:	6a23      	ldr	r3, [r4, #32]
 8002b96:	d103      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x254>
 8002b98:	f043 0304 	orr.w	r3, r3, #4
 8002b9c:	6223      	str	r3, [r4, #32]
 8002b9e:	e7ba      	b.n	8002b16 <HAL_RCC_OscConfig+0x1ca>
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	6223      	str	r3, [r4, #32]
 8002ba6:	6a23      	ldr	r3, [r4, #32]
 8002ba8:	f023 0304 	bic.w	r3, r3, #4
 8002bac:	e7b6      	b.n	8002b1c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f7fe fc3d 	bl	800142c <HAL_GetTick>
 8002bb2:	eba0 0008 	sub.w	r0, r0, r8
 8002bb6:	42b0      	cmp	r0, r6
 8002bb8:	d9b6      	bls.n	8002b28 <HAL_RCC_OscConfig+0x1dc>
 8002bba:	e709      	b.n	80029d0 <HAL_RCC_OscConfig+0x84>
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	42420000 	.word	0x42420000
 8002bc4:	42420480 	.word	0x42420480
 8002bc8:	20000008 	.word	0x20000008
 8002bcc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd0:	4c22      	ldr	r4, [pc, #136]	; (8002c5c <HAL_RCC_OscConfig+0x310>)
 8002bd2:	6863      	ldr	r3, [r4, #4]
 8002bd4:	f003 030c 	and.w	r3, r3, #12
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	f43f aee2 	beq.w	80029a2 <HAL_RCC_OscConfig+0x56>
 8002bde:	2300      	movs	r3, #0
 8002be0:	4e1f      	ldr	r6, [pc, #124]	; (8002c60 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002be4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be6:	d12b      	bne.n	8002c40 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002be8:	f7fe fc20 	bl	800142c <HAL_GetTick>
 8002bec:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	0199      	lsls	r1, r3, #6
 8002bf2:	d41f      	bmi.n	8002c34 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bf4:	6a2b      	ldr	r3, [r5, #32]
 8002bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfa:	d105      	bne.n	8002c08 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bfc:	6862      	ldr	r2, [r4, #4]
 8002bfe:	68a9      	ldr	r1, [r5, #8]
 8002c00:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002c04:	430a      	orrs	r2, r1
 8002c06:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c08:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002c0a:	6862      	ldr	r2, [r4, #4]
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002c12:	4313      	orrs	r3, r2
 8002c14:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c16:	2301      	movs	r3, #1
 8002c18:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fc07 	bl	800142c <HAL_GetTick>
 8002c1e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	019a      	lsls	r2, r3, #6
 8002c24:	f53f aea7 	bmi.w	8002976 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe fc00 	bl	800142c <HAL_GetTick>
 8002c2c:	1b40      	subs	r0, r0, r5
 8002c2e:	2802      	cmp	r0, #2
 8002c30:	d9f6      	bls.n	8002c20 <HAL_RCC_OscConfig+0x2d4>
 8002c32:	e6cd      	b.n	80029d0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe fbfa 	bl	800142c <HAL_GetTick>
 8002c38:	1bc0      	subs	r0, r0, r7
 8002c3a:	2802      	cmp	r0, #2
 8002c3c:	d9d7      	bls.n	8002bee <HAL_RCC_OscConfig+0x2a2>
 8002c3e:	e6c7      	b.n	80029d0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002c40:	f7fe fbf4 	bl	800142c <HAL_GetTick>
 8002c44:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	019b      	lsls	r3, r3, #6
 8002c4a:	f57f ae94 	bpl.w	8002976 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4e:	f7fe fbed 	bl	800142c <HAL_GetTick>
 8002c52:	1b40      	subs	r0, r0, r5
 8002c54:	2802      	cmp	r0, #2
 8002c56:	d9f6      	bls.n	8002c46 <HAL_RCC_OscConfig+0x2fa>
 8002c58:	e6ba      	b.n	80029d0 <HAL_RCC_OscConfig+0x84>
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	42420060 	.word	0x42420060

08002c64 <HAL_RCC_GetSysClockFreq>:
{
 8002c64:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c66:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002c68:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c6a:	ac02      	add	r4, sp, #8
 8002c6c:	f103 0510 	add.w	r5, r3, #16
 8002c70:	4622      	mov	r2, r4
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	3308      	adds	r3, #8
 8002c78:	c203      	stmia	r2!, {r0, r1}
 8002c7a:	42ab      	cmp	r3, r5
 8002c7c:	4614      	mov	r4, r2
 8002c7e:	d1f7      	bne.n	8002c70 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c80:	2301      	movs	r3, #1
 8002c82:	f88d 3004 	strb.w	r3, [sp, #4]
 8002c86:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002c88:	4911      	ldr	r1, [pc, #68]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c8a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8002c8e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002c90:	f003 020c 	and.w	r2, r3, #12
 8002c94:	2a08      	cmp	r2, #8
 8002c96:	d117      	bne.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c98:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002c9c:	a806      	add	r0, sp, #24
 8002c9e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ca0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ca2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ca6:	d50c      	bpl.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ca8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002caa:	480a      	ldr	r0, [pc, #40]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cac:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cb0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cb2:	aa06      	add	r2, sp, #24
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cba:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002cbe:	b007      	add	sp, #28
 8002cc0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cc2:	4805      	ldr	r0, [pc, #20]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x74>)
 8002cc4:	4350      	muls	r0, r2
 8002cc6:	e7fa      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8002cca:	e7f8      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x5a>
 8002ccc:	08005ef8 	.word	0x08005ef8
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	007a1200 	.word	0x007a1200
 8002cd8:	003d0900 	.word	0x003d0900

08002cdc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002cdc:	4a54      	ldr	r2, [pc, #336]	; (8002e30 <HAL_RCC_ClockConfig+0x154>)
{
 8002cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ce2:	6813      	ldr	r3, [r2, #0]
{
 8002ce4:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	428b      	cmp	r3, r1
{
 8002cec:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002cee:	d32a      	bcc.n	8002d46 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf0:	6829      	ldr	r1, [r5, #0]
 8002cf2:	078c      	lsls	r4, r1, #30
 8002cf4:	d434      	bmi.n	8002d60 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf6:	07ca      	lsls	r2, r1, #31
 8002cf8:	d447      	bmi.n	8002d8a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002cfa:	4a4d      	ldr	r2, [pc, #308]	; (8002e30 <HAL_RCC_ClockConfig+0x154>)
 8002cfc:	6813      	ldr	r3, [r2, #0]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	429e      	cmp	r6, r3
 8002d04:	f0c0 8082 	bcc.w	8002e0c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d08:	682a      	ldr	r2, [r5, #0]
 8002d0a:	4c4a      	ldr	r4, [pc, #296]	; (8002e34 <HAL_RCC_ClockConfig+0x158>)
 8002d0c:	f012 0f04 	tst.w	r2, #4
 8002d10:	f040 8087 	bne.w	8002e22 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d14:	0713      	lsls	r3, r2, #28
 8002d16:	d506      	bpl.n	8002d26 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d18:	6863      	ldr	r3, [r4, #4]
 8002d1a:	692a      	ldr	r2, [r5, #16]
 8002d1c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002d20:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002d24:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d26:	f7ff ff9d 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8002d2a:	6863      	ldr	r3, [r4, #4]
 8002d2c:	4a42      	ldr	r2, [pc, #264]	; (8002e38 <HAL_RCC_ClockConfig+0x15c>)
 8002d2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002d32:	5cd3      	ldrb	r3, [r2, r3]
 8002d34:	40d8      	lsrs	r0, r3
 8002d36:	4b41      	ldr	r3, [pc, #260]	; (8002e3c <HAL_RCC_ClockConfig+0x160>)
 8002d38:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f7fe fb34 	bl	80013a8 <HAL_InitTick>
  return HAL_OK;
 8002d40:	2000      	movs	r0, #0
}
 8002d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	6813      	ldr	r3, [r2, #0]
 8002d48:	f023 0307 	bic.w	r3, r3, #7
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d50:	6813      	ldr	r3, [r2, #0]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	4299      	cmp	r1, r3
 8002d58:	d0ca      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d60:	4b34      	ldr	r3, [pc, #208]	; (8002e34 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d62:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d66:	bf1e      	ittt	ne
 8002d68:	685a      	ldrne	r2, [r3, #4]
 8002d6a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002d6e:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d70:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d72:	bf42      	ittt	mi
 8002d74:	685a      	ldrmi	r2, [r3, #4]
 8002d76:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002d7a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	68a8      	ldr	r0, [r5, #8]
 8002d80:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002d84:	4302      	orrs	r2, r0
 8002d86:	605a      	str	r2, [r3, #4]
 8002d88:	e7b5      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8a:	686a      	ldr	r2, [r5, #4]
 8002d8c:	4c29      	ldr	r4, [pc, #164]	; (8002e34 <HAL_RCC_ClockConfig+0x158>)
 8002d8e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d90:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d92:	d11c      	bne.n	8002dce <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d94:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d98:	d0df      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d9a:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da0:	f023 0303 	bic.w	r3, r3, #3
 8002da4:	4313      	orrs	r3, r2
 8002da6:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002da8:	f7fe fb40 	bl	800142c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dac:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002dae:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d114      	bne.n	8002dde <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002db4:	6863      	ldr	r3, [r4, #4]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d09d      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dbe:	f7fe fb35 	bl	800142c <HAL_GetTick>
 8002dc2:	1bc0      	subs	r0, r0, r7
 8002dc4:	4540      	cmp	r0, r8
 8002dc6:	d9f5      	bls.n	8002db4 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8002dc8:	2003      	movs	r0, #3
 8002dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dce:	2a02      	cmp	r2, #2
 8002dd0:	d102      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002dd6:	e7df      	b.n	8002d98 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd8:	f013 0f02 	tst.w	r3, #2
 8002ddc:	e7dc      	b.n	8002d98 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d10f      	bne.n	8002e02 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002de2:	6863      	ldr	r3, [r4, #4]
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d086      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dec:	f7fe fb1e 	bl	800142c <HAL_GetTick>
 8002df0:	1bc0      	subs	r0, r0, r7
 8002df2:	4540      	cmp	r0, r8
 8002df4:	d9f5      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x106>
 8002df6:	e7e7      	b.n	8002dc8 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df8:	f7fe fb18 	bl	800142c <HAL_GetTick>
 8002dfc:	1bc0      	subs	r0, r0, r7
 8002dfe:	4540      	cmp	r0, r8
 8002e00:	d8e2      	bhi.n	8002dc8 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e02:	6863      	ldr	r3, [r4, #4]
 8002e04:	f013 0f0c 	tst.w	r3, #12
 8002e08:	d1f6      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x11c>
 8002e0a:	e776      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0c:	6813      	ldr	r3, [r2, #0]
 8002e0e:	f023 0307 	bic.w	r3, r3, #7
 8002e12:	4333      	orrs	r3, r6
 8002e14:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e16:	6813      	ldr	r3, [r2, #0]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	429e      	cmp	r6, r3
 8002e1e:	d19c      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x7e>
 8002e20:	e772      	b.n	8002d08 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e22:	6863      	ldr	r3, [r4, #4]
 8002e24:	68e9      	ldr	r1, [r5, #12]
 8002e26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e2a:	430b      	orrs	r3, r1
 8002e2c:	6063      	str	r3, [r4, #4]
 8002e2e:	e771      	b.n	8002d14 <HAL_RCC_ClockConfig+0x38>
 8002e30:	40022000 	.word	0x40022000
 8002e34:	40021000 	.word	0x40021000
 8002e38:	08005f08 	.word	0x08005f08
 8002e3c:	20000008 	.word	0x20000008

08002e40 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002e42:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002e4a:	5cd3      	ldrb	r3, [r2, r3]
 8002e4c:	4a03      	ldr	r2, [pc, #12]	; (8002e5c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e4e:	6810      	ldr	r0, [r2, #0]
}    
 8002e50:	40d8      	lsrs	r0, r3
 8002e52:	4770      	bx	lr
 8002e54:	40021000 	.word	0x40021000
 8002e58:	08005f18 	.word	0x08005f18
 8002e5c:	20000008 	.word	0x20000008

08002e60 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e60:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002e62:	4a05      	ldr	r2, [pc, #20]	; (8002e78 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002e6a:	5cd3      	ldrb	r3, [r2, r3]
 8002e6c:	4a03      	ldr	r2, [pc, #12]	; (8002e7c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002e6e:	6810      	ldr	r0, [r2, #0]
} 
 8002e70:	40d8      	lsrs	r0, r3
 8002e72:	4770      	bx	lr
 8002e74:	40021000 	.word	0x40021000
 8002e78:	08005f18 	.word	0x08005f18
 8002e7c:	20000008 	.word	0x20000008

08002e80 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002e80:	2302      	movs	r3, #2

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e82:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002e84:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8002e88:	6813      	ldr	r3, [r2, #0]
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6013      	str	r3, [r2, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002e90:	2301      	movs	r3, #1
 8002e92:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8002e96:	2000      	movs	r0, #0
 8002e98:	4770      	bx	lr

08002e9a <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e9a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002e9e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	f04f 0302 	mov.w	r3, #2
 8002ea6:	d01c      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x48>
 8002ea8:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8002eaa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002eae:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002eb0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002eb4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002eba:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ec0:	680a      	ldr	r2, [r1, #0]
 8002ec2:	2a40      	cmp	r2, #64	; 0x40
 8002ec4:	d079      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x120>
 8002ec6:	d819      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x62>
 8002ec8:	2a10      	cmp	r2, #16
 8002eca:	f000 8093 	beq.w	8002ff4 <HAL_TIM_ConfigClockSource+0x15a>
 8002ece:	d80a      	bhi.n	8002ee6 <HAL_TIM_ConfigClockSource+0x4c>
 8002ed0:	2a00      	cmp	r2, #0
 8002ed2:	f000 8089 	beq.w	8002fe8 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002edc:	2300      	movs	r3, #0
 8002ede:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002ee2:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002ee4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002ee6:	2a20      	cmp	r2, #32
 8002ee8:	f000 808a 	beq.w	8003000 <HAL_TIM_ConfigClockSource+0x166>
 8002eec:	2a30      	cmp	r2, #48	; 0x30
 8002eee:	d1f2      	bne.n	8002ed6 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002ef0:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002ef2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002ef6:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002efa:	e036      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002efc:	2a70      	cmp	r2, #112	; 0x70
 8002efe:	d036      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0xd4>
 8002f00:	d81b      	bhi.n	8002f3a <HAL_TIM_ConfigClockSource+0xa0>
 8002f02:	2a50      	cmp	r2, #80	; 0x50
 8002f04:	d042      	beq.n	8002f8c <HAL_TIM_ConfigClockSource+0xf2>
 8002f06:	2a60      	cmp	r2, #96	; 0x60
 8002f08:	d1e5      	bne.n	8002ed6 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f0a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f0c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f0e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f12:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f14:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f16:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002f18:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f1a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f22:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f26:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002f2a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f2c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002f2e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002f30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002f34:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002f38:	e017      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002f3a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002f3e:	d011      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0xca>
 8002f40:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002f44:	d1c7      	bne.n	8002ed6 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f46:	688a      	ldr	r2, [r1, #8]
 8002f48:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002f4a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f4c:	68c9      	ldr	r1, [r1, #12]
 8002f4e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f50:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f58:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f5a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f62:	e002      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	e7b3      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f6e:	688a      	ldr	r2, [r1, #8]
 8002f70:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002f72:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f74:	68c9      	ldr	r1, [r1, #12]
 8002f76:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f78:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f7c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f80:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002f82:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002f84:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f86:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002f8a:	e7ee      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f8c:	684c      	ldr	r4, [r1, #4]
 8002f8e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002f90:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f92:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f94:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f98:	f025 0501 	bic.w	r5, r5, #1
 8002f9c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f9e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002fa0:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fa2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fa6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fac:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002fae:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002fb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002fb4:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002fb8:	e7d7      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fba:	684c      	ldr	r4, [r1, #4]
 8002fbc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002fbe:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fc0:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fc2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fc6:	f025 0501 	bic.w	r5, r5, #1
 8002fca:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fcc:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002fce:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fd0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fd4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002fd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fda:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002fdc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002fde:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002fe2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002fe6:	e7c0      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002fe8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002fea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002fee:	f042 0207 	orr.w	r2, r2, #7
 8002ff2:	e7ba      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002ff4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002ff6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002ffa:	f042 0217 	orr.w	r2, r2, #23
 8002ffe:	e7b4      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8003000:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003002:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003006:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800300a:	e7ae      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0xd0>

0800300c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800300c:	4a1a      	ldr	r2, [pc, #104]	; (8003078 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800300e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003010:	4290      	cmp	r0, r2
 8003012:	d00a      	beq.n	800302a <TIM_Base_SetConfig+0x1e>
 8003014:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003018:	d007      	beq.n	800302a <TIM_Base_SetConfig+0x1e>
 800301a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800301e:	4290      	cmp	r0, r2
 8003020:	d003      	beq.n	800302a <TIM_Base_SetConfig+0x1e>
 8003022:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003026:	4290      	cmp	r0, r2
 8003028:	d115      	bne.n	8003056 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800302a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800302c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003030:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003032:	4a11      	ldr	r2, [pc, #68]	; (8003078 <TIM_Base_SetConfig+0x6c>)
 8003034:	4290      	cmp	r0, r2
 8003036:	d00a      	beq.n	800304e <TIM_Base_SetConfig+0x42>
 8003038:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800303c:	d007      	beq.n	800304e <TIM_Base_SetConfig+0x42>
 800303e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003042:	4290      	cmp	r0, r2
 8003044:	d003      	beq.n	800304e <TIM_Base_SetConfig+0x42>
 8003046:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800304a:	4290      	cmp	r0, r2
 800304c:	d103      	bne.n	8003056 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800304e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003054:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8003056:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8003058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800305c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800305e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003060:	688b      	ldr	r3, [r1, #8]
 8003062:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003064:	680b      	ldr	r3, [r1, #0]
 8003066:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <TIM_Base_SetConfig+0x6c>)
 800306a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800306c:	bf04      	itt	eq
 800306e:	690b      	ldreq	r3, [r1, #16]
 8003070:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003072:	2301      	movs	r3, #1
 8003074:	6143      	str	r3, [r0, #20]
 8003076:	4770      	bx	lr
 8003078:	40012c00 	.word	0x40012c00

0800307c <HAL_TIM_Base_Init>:
{
 800307c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800307e:	4604      	mov	r4, r0
 8003080:	b1a0      	cbz	r0, 80030ac <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003082:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003086:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800308a:	b91b      	cbnz	r3, 8003094 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800308c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003090:	f001 f92a 	bl	80042e8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003094:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003096:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003098:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800309c:	1d21      	adds	r1, r4, #4
 800309e:	f7ff ffb5 	bl	800300c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80030a2:	2301      	movs	r3, #1
  return HAL_OK;
 80030a4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80030a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80030aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80030ac:	2001      	movs	r0, #1
}
 80030ae:	bd10      	pop	{r4, pc}

080030b0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80030b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80030b4:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	f04f 0302 	mov.w	r3, #2
 80030bc:	d018      	beq.n	80030f0 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80030be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80030c2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80030c4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80030c6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80030c8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80030ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030ce:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	4322      	orrs	r2, r4
 80030d4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030dc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80030e4:	2301      	movs	r3, #1
 80030e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030ea:	2300      	movs	r3, #0
 80030ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80030f0:	4618      	mov	r0, r3

  return HAL_OK;
}
 80030f2:	bd10      	pop	{r4, pc}

080030f4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030f8:	6805      	ldr	r5, [r0, #0]
 80030fa:	68c2      	ldr	r2, [r0, #12]
 80030fc:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030fe:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003100:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003104:	4313      	orrs	r3, r2
 8003106:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003108:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 800310a:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800310c:	430b      	orrs	r3, r1
 800310e:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8003110:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8003114:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003118:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800311a:	4313      	orrs	r3, r2
 800311c:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800311e:	696b      	ldr	r3, [r5, #20]
 8003120:	6982      	ldr	r2, [r0, #24]
 8003122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003126:	4313      	orrs	r3, r2
 8003128:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800312a:	4b40      	ldr	r3, [pc, #256]	; (800322c <UART_SetConfig+0x138>)
{
 800312c:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800312e:	429d      	cmp	r5, r3
 8003130:	f04f 0419 	mov.w	r4, #25
 8003134:	d146      	bne.n	80031c4 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003136:	f7ff fe93 	bl	8002e60 <HAL_RCC_GetPCLK2Freq>
 800313a:	fb04 f300 	mul.w	r3, r4, r0
 800313e:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8003142:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003146:	00b6      	lsls	r6, r6, #2
 8003148:	fbb3 f3f6 	udiv	r3, r3, r6
 800314c:	fbb3 f3f8 	udiv	r3, r3, r8
 8003150:	011e      	lsls	r6, r3, #4
 8003152:	f7ff fe85 	bl	8002e60 <HAL_RCC_GetPCLK2Freq>
 8003156:	4360      	muls	r0, r4
 8003158:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	fbb0 f7f3 	udiv	r7, r0, r3
 8003162:	f7ff fe7d 	bl	8002e60 <HAL_RCC_GetPCLK2Freq>
 8003166:	4360      	muls	r0, r4
 8003168:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003172:	fbb3 f3f8 	udiv	r3, r3, r8
 8003176:	fb08 7313 	mls	r3, r8, r3, r7
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	3332      	adds	r3, #50	; 0x32
 800317e:	fbb3 f3f8 	udiv	r3, r3, r8
 8003182:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003186:	f7ff fe6b 	bl	8002e60 <HAL_RCC_GetPCLK2Freq>
 800318a:	4360      	muls	r0, r4
 800318c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003190:	0092      	lsls	r2, r2, #2
 8003192:	fbb0 faf2 	udiv	sl, r0, r2
 8003196:	f7ff fe63 	bl	8002e60 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800319a:	4360      	muls	r0, r4
 800319c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a6:	fbb3 f3f8 	udiv	r3, r3, r8
 80031aa:	fb08 a313 	mls	r3, r8, r3, sl
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	3332      	adds	r3, #50	; 0x32
 80031b2:	fbb3 f3f8 	udiv	r3, r3, r8
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	433b      	orrs	r3, r7
 80031bc:	4433      	add	r3, r6
 80031be:	60ab      	str	r3, [r5, #8]
 80031c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c4:	f7ff fe3c 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 80031c8:	fb04 f300 	mul.w	r3, r4, r0
 80031cc:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80031d0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80031d4:	00b6      	lsls	r6, r6, #2
 80031d6:	fbb3 f3f6 	udiv	r3, r3, r6
 80031da:	fbb3 f3f8 	udiv	r3, r3, r8
 80031de:	011e      	lsls	r6, r3, #4
 80031e0:	f7ff fe2e 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 80031e4:	4360      	muls	r0, r4
 80031e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	fbb0 f7f3 	udiv	r7, r0, r3
 80031f0:	f7ff fe26 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 80031f4:	4360      	muls	r0, r4
 80031f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003200:	fbb3 f3f8 	udiv	r3, r3, r8
 8003204:	fb08 7313 	mls	r3, r8, r3, r7
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	3332      	adds	r3, #50	; 0x32
 800320c:	fbb3 f3f8 	udiv	r3, r3, r8
 8003210:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003214:	f7ff fe14 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8003218:	4360      	muls	r0, r4
 800321a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800321e:	0092      	lsls	r2, r2, #2
 8003220:	fbb0 faf2 	udiv	sl, r0, r2
 8003224:	f7ff fe0c 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8003228:	e7b7      	b.n	800319a <UART_SetConfig+0xa6>
 800322a:	bf00      	nop
 800322c:	40013800 	.word	0x40013800

08003230 <HAL_UART_Init>:
{
 8003230:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003232:	4604      	mov	r4, r0
 8003234:	b340      	cbz	r0, 8003288 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003236:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800323a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800323e:	b91b      	cbnz	r3, 8003248 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003240:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003244:	f001 f892 	bl	800436c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003248:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800324a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800324c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003250:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003252:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003254:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003258:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800325a:	f7ff ff4b 	bl	80030f4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800325e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003260:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003268:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800326a:	695a      	ldr	r2, [r3, #20]
 800326c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003270:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003278:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800327a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800327e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003282:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003286:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003288:	2001      	movs	r0, #1
}
 800328a:	bd10      	pop	{r4, pc}

0800328c <BME280_Read8>:
  return tmp;
}
#endif
#ifdef BME280
uint8_t BME280_Read8(uint8_t addr)
{
 800328c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t tmp = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	aa06      	add	r2, sp, #24
 8003292:	f802 3d01 	strb.w	r3, [r2, #-1]!

  HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, &tmp, 1, 10);
 8003296:	230a      	movs	r3, #10
 8003298:	9302      	str	r3, [sp, #8]
 800329a:	2301      	movs	r3, #1
 800329c:	e88d 000c 	stmia.w	sp, {r2, r3}
 80032a0:	4602      	mov	r2, r0
 80032a2:	4805      	ldr	r0, [pc, #20]	; (80032b8 <BME280_Read8+0x2c>)
 80032a4:	21ec      	movs	r1, #236	; 0xec
 80032a6:	6800      	ldr	r0, [r0, #0]
 80032a8:	f7fe fd64 	bl	8001d74 <HAL_I2C_Mem_Read>

  return tmp;
}
 80032ac:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80032b0:	b007      	add	sp, #28
 80032b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80032b6:	bf00      	nop
 80032b8:	2000022c 	.word	0x2000022c

080032bc <BME280_Read16>:
	return (tmp >> 8) | (tmp << 8);
}
#endif
#ifdef BME280
uint16_t BME280_Read16(uint8_t addr)
{
 80032bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	uint8_t tmp[2];

	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, tmp, 2, 10);
 80032be:	230a      	movs	r3, #10
 80032c0:	9302      	str	r3, [sp, #8]
 80032c2:	2302      	movs	r3, #2
 80032c4:	4602      	mov	r2, r0
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	4808      	ldr	r0, [pc, #32]	; (80032ec <BME280_Read16+0x30>)
 80032ca:	ab05      	add	r3, sp, #20
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	21ec      	movs	r1, #236	; 0xec
 80032d0:	2301      	movs	r3, #1
 80032d2:	6800      	ldr	r0, [r0, #0]
 80032d4:	f7fe fd4e 	bl	8001d74 <HAL_I2C_Mem_Read>

	return ((tmp[0] << 8) | tmp[1]);
 80032d8:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80032dc:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
 80032e0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80032e4:	b007      	add	sp, #28
 80032e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80032ea:	bf00      	nop
 80032ec:	2000022c 	.word	0x2000022c

080032f0 <BME280_Read16LE>:

uint16_t BME280_Read16LE(uint8_t addr)
{
 80032f0:	b508      	push	{r3, lr}
	uint16_t tmp;

	tmp = BME280_Read16(addr);
 80032f2:	f7ff ffe3 	bl	80032bc <BME280_Read16>
	return (tmp >> 8) | (tmp << 8);
 80032f6:	ba40      	rev16	r0, r0
}
 80032f8:	b280      	uxth	r0, r0
 80032fa:	bd08      	pop	{r3, pc}

080032fc <BME280_Write8>:
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
}
#endif
#ifdef BME280
void BME280_Write8(uint8_t address, uint8_t data)
{
 80032fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(i2c_h, BME280_I2CADDR, address, 1, &data, 1, 10);
 80032fe:	230a      	movs	r3, #10
{
 8003300:	aa06      	add	r2, sp, #24
 8003302:	f802 1d01 	strb.w	r1, [r2, #-1]!
	HAL_I2C_Mem_Write(i2c_h, BME280_I2CADDR, address, 1, &data, 1, 10);
 8003306:	9302      	str	r3, [sp, #8]
 8003308:	2301      	movs	r3, #1
 800330a:	e88d 000c 	stmia.w	sp, {r2, r3}
 800330e:	4602      	mov	r2, r0
 8003310:	4803      	ldr	r0, [pc, #12]	; (8003320 <BME280_Write8+0x24>)
 8003312:	21ec      	movs	r1, #236	; 0xec
 8003314:	6800      	ldr	r0, [r0, #0]
 8003316:	f7fe fc97 	bl	8001c48 <HAL_I2C_Mem_Write>
}
 800331a:	b007      	add	sp, #28
 800331c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003320:	2000022c 	.word	0x2000022c

08003324 <BME280_Read24>:

uint32_t BME280_Read24(uint8_t addr)
{
 8003324:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t tmp[3];

	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, tmp, 3, 10);
 8003326:	230a      	movs	r3, #10
 8003328:	9302      	str	r3, [sp, #8]
 800332a:	2303      	movs	r3, #3
 800332c:	4602      	mov	r2, r0
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	480a      	ldr	r0, [pc, #40]	; (800335c <BME280_Read24+0x38>)
 8003332:	ab05      	add	r3, sp, #20
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	21ec      	movs	r1, #236	; 0xec
 8003338:	2301      	movs	r3, #1
 800333a:	6800      	ldr	r0, [r0, #0]
 800333c:	f7fe fd1a 	bl	8001d74 <HAL_I2C_Mem_Read>

	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8003340:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003344:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8003348:	021b      	lsls	r3, r3, #8
 800334a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800334e:	f89d 0016 	ldrb.w	r0, [sp, #22]
}
 8003352:	4318      	orrs	r0, r3
 8003354:	b007      	add	sp, #28
 8003356:	f85d fb04 	ldr.w	pc, [sp], #4
 800335a:	bf00      	nop
 800335c:	2000022c 	.word	0x2000022c

08003360 <BME280_IsReadingCalibration>:
	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
}
#endif
#ifdef BME280
uint8_t BME280_IsReadingCalibration(void)
{
 8003360:	b508      	push	{r3, lr}
	uint8_t Status = BME280_Read8(BME280_STATUS);
 8003362:	20f3      	movs	r0, #243	; 0xf3
 8003364:	f7ff ff92 	bl	800328c <BME280_Read8>

	return ((Status & 1) != 0);
}
 8003368:	f000 0001 	and.w	r0, r0, #1
 800336c:	bd08      	pop	{r3, pc}

0800336e <BME280_SetConfig>:

void BME280_SetConfig(uint8_t standby_time, uint8_t filter)
{
	BME280_Write8(BME280_CONFIG, (uint8_t)(((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
 800336e:	0089      	lsls	r1, r1, #2
 8003370:	f001 011c 	and.w	r1, r1, #28
 8003374:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
 8003378:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 800337c:	20f5      	movs	r0, #245	; 0xf5
 800337e:	f7ff bfbd 	b.w	80032fc <BME280_Write8>
	...

08003384 <BME280_Init>:
}

void BME280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t huminidity_oversampling, uint8_t mode)
{
 8003384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003388:	f89d 4020 	ldrb.w	r4, [sp, #32]
	i2c_h = i2c_handler;
 800338c:	4d63      	ldr	r5, [pc, #396]	; (800351c <BME280_Init+0x198>)
 800338e:	2c03      	cmp	r4, #3
 8003390:	bf28      	it	cs
 8003392:	2403      	movcs	r4, #3
 8003394:	6028      	str	r0, [r5, #0]
	uint8_t HumReg, i;

	if (mode > BME280_NORMALMODE)
	    mode = BME280_NORMALMODE;
	_mode = mode;
 8003396:	4862      	ldr	r0, [pc, #392]	; (8003520 <BME280_Init+0x19c>)
	if(mode == BME280_FORCEDMODE)
		mode = BME280_SLEEPMODE;
 8003398:	2c01      	cmp	r4, #1
	_mode = mode;
 800339a:	7004      	strb	r4, [r0, #0]
		mode = BME280_SLEEPMODE;
 800339c:	bf08      	it	eq
 800339e:	2400      	moveq	r4, #0
 80033a0:	2905      	cmp	r1, #5
 80033a2:	bf28      	it	cs
 80033a4:	2105      	movcs	r1, #5
 80033a6:	2a05      	cmp	r2, #5
 80033a8:	bf28      	it	cs
 80033aa:	2205      	movcs	r2, #5
 80033ac:	4615      	mov	r5, r2
		temperature_resolution = BME280_TEMPERATURE_20BIT;
	_temperature_res = temperature_resolution;

	if (pressure_oversampling > BME280_PRESSURE_ULTRAHIGHRES)
		pressure_oversampling = BME280_PRESSURE_ULTRAHIGHRES;
	_pressure_oversampling = pressure_oversampling;
 80033ae:	4a5d      	ldr	r2, [pc, #372]	; (8003524 <BME280_Init+0x1a0>)

	if (huminidity_oversampling > BME280_HUMINIDITY_ULTRAHIGH)
		huminidity_oversampling = BME280_HUMINIDITY_ULTRAHIGH;
	_huminidity_oversampling = huminidity_oversampling;
 80033b0:	2b05      	cmp	r3, #5
	_pressure_oversampling = pressure_oversampling;
 80033b2:	7015      	strb	r5, [r2, #0]
	_huminidity_oversampling = huminidity_oversampling;
 80033b4:	4a5c      	ldr	r2, [pc, #368]	; (8003528 <BME280_Init+0x1a4>)
 80033b6:	460f      	mov	r7, r1
 80033b8:	bf28      	it	cs
 80033ba:	2305      	movcs	r3, #5
 80033bc:	4690      	mov	r8, r2
	_temperature_res = temperature_resolution;
 80033be:	495b      	ldr	r1, [pc, #364]	; (800352c <BME280_Init+0x1a8>)
	_huminidity_oversampling = huminidity_oversampling;
 80033c0:	7013      	strb	r3, [r2, #0]
	_temperature_res = temperature_resolution;
 80033c2:	700f      	strb	r7, [r1, #0]

	while(BME280_Read8(BME280_CHIPID) != 0x60);
 80033c4:	20d0      	movs	r0, #208	; 0xd0
 80033c6:	f7ff ff61 	bl	800328c <BME280_Read8>
 80033ca:	2860      	cmp	r0, #96	; 0x60
 80033cc:	d1fa      	bne.n	80033c4 <BME280_Init+0x40>

	BME280_Write8(BME280_SOFTRESET, 0xB6);
 80033ce:	21b6      	movs	r1, #182	; 0xb6
 80033d0:	20e0      	movs	r0, #224	; 0xe0
 80033d2:	f7ff ff93 	bl	80032fc <BME280_Write8>
 80033d6:	261e      	movs	r6, #30

	for(i = 0; i<30; i++)
		Delay_us(1000); // Wait  300 msfor wake up
 80033d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033dc:	3e01      	subs	r6, #1
 80033de:	f000 fa57 	bl	8003890 <Delay_us>
	for(i = 0; i<30; i++)
 80033e2:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80033e6:	d1f7      	bne.n	80033d8 <BME280_Init+0x54>

	while(BME280_IsReadingCalibration())
 80033e8:	f7ff ffba 	bl	8003360 <BME280_IsReadingCalibration>
 80033ec:	4606      	mov	r6, r0
 80033ee:	2800      	cmp	r0, #0
 80033f0:	f040 8088 	bne.w	8003504 <BME280_Init+0x180>
		for(i = 0; i<10; i++)
			Delay_us(1000);

	/* read calibration data */
	t1 = BME280_Read16LE(BME280_DIG_T1);
 80033f4:	2088      	movs	r0, #136	; 0x88
 80033f6:	f7ff ff7b 	bl	80032f0 <BME280_Read16LE>
 80033fa:	4b4d      	ldr	r3, [pc, #308]	; (8003530 <BME280_Init+0x1ac>)
 80033fc:	8018      	strh	r0, [r3, #0]
	t2 = BME280_Read16LE(BME280_DIG_T2);
 80033fe:	208a      	movs	r0, #138	; 0x8a
 8003400:	f7ff ff76 	bl	80032f0 <BME280_Read16LE>
 8003404:	4b4b      	ldr	r3, [pc, #300]	; (8003534 <BME280_Init+0x1b0>)
 8003406:	8018      	strh	r0, [r3, #0]
	t3 = BME280_Read16LE(BME280_DIG_T3);
 8003408:	208c      	movs	r0, #140	; 0x8c
 800340a:	f7ff ff71 	bl	80032f0 <BME280_Read16LE>
 800340e:	4b4a      	ldr	r3, [pc, #296]	; (8003538 <BME280_Init+0x1b4>)
 8003410:	8018      	strh	r0, [r3, #0]

	p1 = BME280_Read16LE(BME280_DIG_P1);
 8003412:	208e      	movs	r0, #142	; 0x8e
 8003414:	f7ff ff6c 	bl	80032f0 <BME280_Read16LE>
 8003418:	4b48      	ldr	r3, [pc, #288]	; (800353c <BME280_Init+0x1b8>)
 800341a:	8018      	strh	r0, [r3, #0]
	p2 = BME280_Read16LE(BME280_DIG_P2);
 800341c:	2090      	movs	r0, #144	; 0x90
 800341e:	f7ff ff67 	bl	80032f0 <BME280_Read16LE>
 8003422:	4b47      	ldr	r3, [pc, #284]	; (8003540 <BME280_Init+0x1bc>)
 8003424:	8018      	strh	r0, [r3, #0]
	p3 = BME280_Read16LE(BME280_DIG_P3);
 8003426:	2092      	movs	r0, #146	; 0x92
 8003428:	f7ff ff62 	bl	80032f0 <BME280_Read16LE>
 800342c:	4b45      	ldr	r3, [pc, #276]	; (8003544 <BME280_Init+0x1c0>)
 800342e:	8018      	strh	r0, [r3, #0]
	p4 = BME280_Read16LE(BME280_DIG_P4);
 8003430:	2094      	movs	r0, #148	; 0x94
 8003432:	f7ff ff5d 	bl	80032f0 <BME280_Read16LE>
 8003436:	4b44      	ldr	r3, [pc, #272]	; (8003548 <BME280_Init+0x1c4>)
 8003438:	8018      	strh	r0, [r3, #0]
	p5 = BME280_Read16LE(BME280_DIG_P5);
 800343a:	2096      	movs	r0, #150	; 0x96
 800343c:	f7ff ff58 	bl	80032f0 <BME280_Read16LE>
 8003440:	4b42      	ldr	r3, [pc, #264]	; (800354c <BME280_Init+0x1c8>)
 8003442:	8018      	strh	r0, [r3, #0]
	p6 = BME280_Read16LE(BME280_DIG_P6);
 8003444:	2098      	movs	r0, #152	; 0x98
 8003446:	f7ff ff53 	bl	80032f0 <BME280_Read16LE>
 800344a:	4b41      	ldr	r3, [pc, #260]	; (8003550 <BME280_Init+0x1cc>)
 800344c:	8018      	strh	r0, [r3, #0]
	p7 = BME280_Read16LE(BME280_DIG_P7);
 800344e:	209a      	movs	r0, #154	; 0x9a
 8003450:	f7ff ff4e 	bl	80032f0 <BME280_Read16LE>
 8003454:	4b3f      	ldr	r3, [pc, #252]	; (8003554 <BME280_Init+0x1d0>)
 8003456:	8018      	strh	r0, [r3, #0]
	p8 = BME280_Read16LE(BME280_DIG_P8);
 8003458:	209c      	movs	r0, #156	; 0x9c
 800345a:	f7ff ff49 	bl	80032f0 <BME280_Read16LE>
 800345e:	4b3e      	ldr	r3, [pc, #248]	; (8003558 <BME280_Init+0x1d4>)
 8003460:	8018      	strh	r0, [r3, #0]
	p9 = BME280_Read16LE(BME280_DIG_P9);
 8003462:	209e      	movs	r0, #158	; 0x9e
 8003464:	f7ff ff44 	bl	80032f0 <BME280_Read16LE>
 8003468:	4b3c      	ldr	r3, [pc, #240]	; (800355c <BME280_Init+0x1d8>)
 800346a:	8018      	strh	r0, [r3, #0]

	h1 = BME280_Read8(BME280_DIG_H1);
 800346c:	20a1      	movs	r0, #161	; 0xa1
 800346e:	f7ff ff0d 	bl	800328c <BME280_Read8>
 8003472:	4b3b      	ldr	r3, [pc, #236]	; (8003560 <BME280_Init+0x1dc>)
 8003474:	7018      	strb	r0, [r3, #0]
	h2 = BME280_Read16LE(BME280_DIG_H2);
 8003476:	20e1      	movs	r0, #225	; 0xe1
 8003478:	f7ff ff3a 	bl	80032f0 <BME280_Read16LE>
 800347c:	4b39      	ldr	r3, [pc, #228]	; (8003564 <BME280_Init+0x1e0>)
 800347e:	8018      	strh	r0, [r3, #0]
	h3 = BME280_Read8(BME280_DIG_H3);
 8003480:	20e3      	movs	r0, #227	; 0xe3
 8003482:	f7ff ff03 	bl	800328c <BME280_Read8>
 8003486:	4b38      	ldr	r3, [pc, #224]	; (8003568 <BME280_Init+0x1e4>)
 8003488:	7018      	strb	r0, [r3, #0]
	h4 = ((BME280_Read8(BME280_DIG_H4) << 4 ) | (BME280_Read8(BME280_DIG_H4+1) & 0xF));
 800348a:	20e4      	movs	r0, #228	; 0xe4
 800348c:	f7ff fefe 	bl	800328c <BME280_Read8>
 8003490:	4681      	mov	r9, r0
 8003492:	20e5      	movs	r0, #229	; 0xe5
 8003494:	f7ff fefa 	bl	800328c <BME280_Read8>
 8003498:	4b34      	ldr	r3, [pc, #208]	; (800356c <BME280_Init+0x1e8>)
 800349a:	f000 000f 	and.w	r0, r0, #15
 800349e:	ea40 1009 	orr.w	r0, r0, r9, lsl #4
 80034a2:	8018      	strh	r0, [r3, #0]
	h5 = ((BME280_Read8(BME280_DIG_H5+1) << 4) | (BME280_Read8(BME280_DIG_H5) >> 4));
 80034a4:	20e6      	movs	r0, #230	; 0xe6
 80034a6:	f7ff fef1 	bl	800328c <BME280_Read8>
 80034aa:	4681      	mov	r9, r0
 80034ac:	20e5      	movs	r0, #229	; 0xe5
 80034ae:	f7ff feed 	bl	800328c <BME280_Read8>
 80034b2:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <BME280_Init+0x1ec>)
 80034b4:	f3c0 1007 	ubfx	r0, r0, #4, #8
 80034b8:	ea40 1009 	orr.w	r0, r0, r9, lsl #4
 80034bc:	8018      	strh	r0, [r3, #0]
	h6 = (int8_t)BME280_Read8(BME280_DIG_H6);
 80034be:	20e7      	movs	r0, #231	; 0xe7
 80034c0:	f7ff fee4 	bl	800328c <BME280_Read8>
 80034c4:	4b2b      	ldr	r3, [pc, #172]	; (8003574 <BME280_Init+0x1f0>)
 80034c6:	7018      	strb	r0, [r3, #0]

	HumReg = BME280_Read8(BME280_HUM_CONTROL);
 80034c8:	20f2      	movs	r0, #242	; 0xf2
 80034ca:	f7ff fedf 	bl	800328c <BME280_Read8>
	HumReg &= 0xF8;
	HumReg |= _huminidity_oversampling;
 80034ce:	f898 3000 	ldrb.w	r3, [r8]
	HumReg &= 0xF8;
 80034d2:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	BME280_Write8(BME280_HUM_CONTROL, HumReg);
 80034d6:	4319      	orrs	r1, r3
 80034d8:	20f2      	movs	r0, #242	; 0xf2
 80034da:	f7ff ff0f 	bl	80032fc <BME280_Write8>
	HumReg = BME280_Read8(BME280_HUM_CONTROL);
 80034de:	20f2      	movs	r0, #242	; 0xf2
 80034e0:	f7ff fed4 	bl	800328c <BME280_Read8>
	BME280_Write8(BME280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80034e4:	00a9      	lsls	r1, r5, #2
 80034e6:	ea41 1147 	orr.w	r1, r1, r7, lsl #5
 80034ea:	4321      	orrs	r1, r4
 80034ec:	b2c9      	uxtb	r1, r1
 80034ee:	20f4      	movs	r0, #244	; 0xf4
 80034f0:	f7ff ff04 	bl	80032fc <BME280_Write8>

	if(mode == BME280_NORMALMODE)
 80034f4:	2c03      	cmp	r4, #3
 80034f6:	d10f      	bne.n	8003518 <BME280_Init+0x194>
	BME280_Write8(BME280_CONFIG, (uint8_t)(((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
 80034f8:	4631      	mov	r1, r6
	{
		BME280_SetConfig(BME280_STANDBY_MS_0_5, BME280_FILTER_OFF);
	}
}
 80034fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BME280_Write8(BME280_CONFIG, (uint8_t)(((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
 80034fe:	20f5      	movs	r0, #245	; 0xf5
 8003500:	f7ff befc 	b.w	80032fc <BME280_Write8>
 8003504:	260a      	movs	r6, #10
			Delay_us(1000);
 8003506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800350a:	3e01      	subs	r6, #1
 800350c:	f000 f9c0 	bl	8003890 <Delay_us>
		for(i = 0; i<10; i++)
 8003510:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8003514:	d1f7      	bne.n	8003506 <BME280_Init+0x182>
 8003516:	e767      	b.n	80033e8 <BME280_Init+0x64>
 8003518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800351c:	2000022c 	.word	0x2000022c
 8003520:	20000234 	.word	0x20000234
 8003524:	20000216 	.word	0x20000216
 8003528:	2000020e 	.word	0x2000020e
 800352c:	20000228 	.word	0x20000228
 8003530:	20000226 	.word	0x20000226
 8003534:	20000218 	.word	0x20000218
 8003538:	2000020c 	.word	0x2000020c
 800353c:	2000021e 	.word	0x2000021e
 8003540:	20000210 	.word	0x20000210
 8003544:	20000236 	.word	0x20000236
 8003548:	2000023c 	.word	0x2000023c
 800354c:	2000021a 	.word	0x2000021a
 8003550:	20000224 	.word	0x20000224
 8003554:	20000214 	.word	0x20000214
 8003558:	20000222 	.word	0x20000222
 800355c:	2000023a 	.word	0x2000023a
 8003560:	20000212 	.word	0x20000212
 8003564:	20000220 	.word	0x20000220
 8003568:	20000238 	.word	0x20000238
 800356c:	20000232 	.word	0x20000232
 8003570:	2000021c 	.word	0x2000021c
 8003574:	20000230 	.word	0x20000230

08003578 <BME280_ReadTemperature>:
  return -99;
}
#endif
#ifdef BME280
float BME280_ReadTemperature(void)
{
 8003578:	b508      	push	{r3, lr}
  int32_t var1, var2;

  if(_mode == BME280_FORCEDMODE)
 800357a:	4b21      	ldr	r3, [pc, #132]	; (8003600 <BME280_ReadTemperature+0x88>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d007      	beq.n	8003592 <BME280_ReadTemperature+0x1a>
				  break;
		  }
	  }
  }

  int32_t adc_T = BME280_Read24(BME280_TEMPDATA);
 8003582:	20fa      	movs	r0, #250	; 0xfa
 8003584:	f7ff fece 	bl	8003324 <BME280_Read24>
  if (adc_T == 0x800000)
 8003588:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800358c:	d118      	bne.n	80035c0 <BME280_ReadTemperature+0x48>
	  return -99;
 800358e:	481d      	ldr	r0, [pc, #116]	; (8003604 <BME280_ReadTemperature+0x8c>)

  float T  = (t_fine * 5 + 128) >> 8;
  return T/100;

  return -99;
}
 8003590:	bd08      	pop	{r3, pc}
	  uint8_t ctrl = BME280_Read8(BME280_CONTROL);
 8003592:	20f4      	movs	r0, #244	; 0xf4
 8003594:	f7ff fe7a 	bl	800328c <BME280_Read8>
	  ctrl &= ~(0x03);
 8003598:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
	  BME280_Write8(BME280_CONTROL, ctrl);
 800359c:	f041 0101 	orr.w	r1, r1, #1
 80035a0:	20f4      	movs	r0, #244	; 0xf4
 80035a2:	f7ff feab 	bl	80032fc <BME280_Write8>
	  mode = BME280_Read8(BME280_CONTROL); 	// Read written mode
 80035a6:	20f4      	movs	r0, #244	; 0xf4
 80035a8:	f7ff fe70 	bl	800328c <BME280_Read8>
	  if(mode == BME280_FORCEDMODE)
 80035ac:	f000 0003 	and.w	r0, r0, #3
 80035b0:	2801      	cmp	r0, #1
 80035b2:	d1e6      	bne.n	8003582 <BME280_ReadTemperature+0xa>
			  mode = BME280_Read8(BME280_CONTROL);
 80035b4:	20f4      	movs	r0, #244	; 0xf4
 80035b6:	f7ff fe69 	bl	800328c <BME280_Read8>
			  if(mode == BME280_SLEEPMODE)
 80035ba:	0783      	lsls	r3, r0, #30
 80035bc:	d1fa      	bne.n	80035b4 <BME280_ReadTemperature+0x3c>
 80035be:	e7e0      	b.n	8003582 <BME280_ReadTemperature+0xa>
  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <BME280_ReadTemperature+0x90>)
		  ((int32_t)t3)) >> 14;
 80035c2:	4912      	ldr	r1, [pc, #72]	; (800360c <BME280_ReadTemperature+0x94>)
  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80035c4:	881a      	ldrh	r2, [r3, #0]
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80035c6:	ebc2 2320 	rsb	r3, r2, r0, asr #8
  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80035ca:	0052      	lsls	r2, r2, #1
 80035cc:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
		  ((int32_t)t2)) >> 11;
 80035d0:	4a0f      	ldr	r2, [pc, #60]	; (8003610 <BME280_ReadTemperature+0x98>)
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80035d2:	435b      	muls	r3, r3
		  ((int32_t)t2)) >> 11;
 80035d4:	f9b2 2000 	ldrsh.w	r2, [r2]
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80035d8:	131b      	asrs	r3, r3, #12
  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80035da:	4342      	muls	r2, r0
		  ((int32_t)t3)) >> 14;
 80035dc:	f9b1 0000 	ldrsh.w	r0, [r1]
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80035e0:	4358      	muls	r0, r3
  t_fine = var1 + var2;
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <BME280_ReadTemperature+0x9c>)
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80035e4:	1380      	asrs	r0, r0, #14
  t_fine = var1 + var2;
 80035e6:	eb00 20e2 	add.w	r0, r0, r2, asr #11
 80035ea:	6018      	str	r0, [r3, #0]
  float T  = (t_fine * 5 + 128) >> 8;
 80035ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80035f0:	3080      	adds	r0, #128	; 0x80
 80035f2:	1200      	asrs	r0, r0, #8
 80035f4:	f7fd fafe 	bl	8000bf4 <__aeabi_i2f>
  return T/100;
 80035f8:	4907      	ldr	r1, [pc, #28]	; (8003618 <BME280_ReadTemperature+0xa0>)
 80035fa:	f7fd fc03 	bl	8000e04 <__aeabi_fdiv>
 80035fe:	bd08      	pop	{r3, pc}
 8003600:	20000234 	.word	0x20000234
 8003604:	c2c60000 	.word	0xc2c60000
 8003608:	20000226 	.word	0x20000226
 800360c:	2000020c 	.word	0x2000020c
 8003610:	20000218 	.word	0x20000218
 8003614:	20000240 	.word	0x20000240
 8003618:	42c80000 	.word	0x42c80000

0800361c <BME280_ReadTemperatureAndPressureAndHuminidity>:
	  return altitude;
}
#endif
#ifdef BME280
uint8_t BME280_ReadTemperatureAndPressureAndHuminidity(float *temperature, int32_t *pressure, float *huminidity)
{
 800361c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003620:	4604      	mov	r4, r0
 8003622:	e88d 0006 	stmia.w	sp, {r1, r2}
	int64_t var1, var2, p;

	// Must be done first to get the t_fine variable set up
	*temperature = BME280_ReadTemperature();
 8003626:	f7ff ffa7 	bl	8003578 <BME280_ReadTemperature>

	if(*temperature == -99)
 800362a:	4988      	ldr	r1, [pc, #544]	; (800384c <BME280_ReadTemperatureAndPressureAndHuminidity+0x230>)
	*temperature = BME280_ReadTemperature();
 800362c:	6020      	str	r0, [r4, #0]
	if(*temperature == -99)
 800362e:	f7fd fcc9 	bl	8000fc4 <__aeabi_fcmpeq>
 8003632:	4682      	mov	sl, r0
 8003634:	b118      	cbz	r0, 800363e <BME280_ReadTemperatureAndPressureAndHuminidity+0x22>
	  return -1;
 8003636:	20ff      	movs	r0, #255	; 0xff
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
	float h = (v_x1_u32r>>12);
	*huminidity = h / 1024.0;

	return 0;
}
 8003638:	b003      	add	sp, #12
 800363a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int32_t adc_P = BME280_Read24(BME280_PRESSUREDATA);
 800363e:	20f7      	movs	r0, #247	; 0xf7
 8003640:	f7ff fe70 	bl	8003324 <BME280_Read24>
	var1 = ((int64_t)t_fine) - 128000;
 8003644:	f8df b244 	ldr.w	fp, [pc, #580]	; 800388c <BME280_ReadTemperatureAndPressureAndHuminidity+0x270>
	int32_t adc_P = BME280_Read24(BME280_PRESSUREDATA);
 8003648:	4686      	mov	lr, r0
	var1 = ((int64_t)t_fine) - 128000;
 800364a:	f8db 0000 	ldr.w	r0, [fp]
 800364e:	17c1      	asrs	r1, r0, #31
 8003650:	f5b0 30fa 	subs.w	r0, r0, #128000	; 0x1f400
 8003654:	f141 31ff 	adc.w	r1, r1, #4294967295
	var2 = var1 * var1 * (int64_t)p6;
 8003658:	fba0 8900 	umull	r8, r9, r0, r0
 800365c:	fb00 f301 	mul.w	r3, r0, r1
 8003660:	eb09 0943 	add.w	r9, r9, r3, lsl #1
			((var1 * (int64_t)p2)<<12);
 8003664:	4b7a      	ldr	r3, [pc, #488]	; (8003850 <BME280_ReadTemperatureAndPressureAndHuminidity+0x234>)
 8003666:	f9b3 2000 	ldrsh.w	r2, [r3]
 800366a:	fb02 f401 	mul.w	r4, r2, r1
 800366e:	17d3      	asrs	r3, r2, #31
 8003670:	fb00 4403 	mla	r4, r0, r3, r4
 8003674:	fba2 2300 	umull	r2, r3, r2, r0
 8003678:	4423      	add	r3, r4
 800367a:	031f      	lsls	r7, r3, #12
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800367c:	4b75      	ldr	r3, [pc, #468]	; (8003854 <BME280_ReadTemperatureAndPressureAndHuminidity+0x238>)
			((var1 * (int64_t)p2)<<12);
 800367e:	0316      	lsls	r6, r2, #12
 8003680:	ea47 5712 	orr.w	r7, r7, r2, lsr #20
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8003684:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003688:	fb02 f409 	mul.w	r4, r2, r9
 800368c:	17d3      	asrs	r3, r2, #31
 800368e:	fb08 4303 	mla	r3, r8, r3, r4
 8003692:	fba2 4508 	umull	r4, r5, r2, r8
 8003696:	441d      	add	r5, r3
 8003698:	0a22      	lsrs	r2, r4, #8
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 800369a:	4c6f      	ldr	r4, [pc, #444]	; (8003858 <BME280_ReadTemperatureAndPressureAndHuminidity+0x23c>)
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800369c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 80036a0:	1992      	adds	r2, r2, r6
 80036a2:	ea4f 2325 	mov.w	r3, r5, asr #8
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80036a6:	8826      	ldrh	r6, [r4, #0]
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80036a8:	417b      	adcs	r3, r7
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80036aa:	3200      	adds	r2, #0
 80036ac:	fba2 4506 	umull	r4, r5, r2, r6
 80036b0:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 80036b4:	fb06 5503 	mla	r5, r6, r3, r5
 80036b8:	106a      	asrs	r2, r5, #1
 80036ba:	17eb      	asrs	r3, r5, #31
	if (var1 == 0) {
 80036bc:	ea52 0403 	orrs.w	r4, r2, r3
 80036c0:	f000 80c2 	beq.w	8003848 <BME280_ReadTemperatureAndPressureAndHuminidity+0x22c>
	var2 = var1 * var1 * (int64_t)p6;
 80036c4:	4c65      	ldr	r4, [pc, #404]	; (800385c <BME280_ReadTemperatureAndPressureAndHuminidity+0x240>)
	adc_P >>= 4;
 80036c6:	ea4f 1e2e 	mov.w	lr, lr, asr #4
	var2 = var1 * var1 * (int64_t)p6;
 80036ca:	f9b4 6000 	ldrsh.w	r6, [r4]
	p = 1048576 - adc_P;
 80036ce:	f5ce 1e80 	rsb	lr, lr, #1048576	; 0x100000
	var2 = var1 * var1 * (int64_t)p6;
 80036d2:	fb06 f409 	mul.w	r4, r6, r9
 80036d6:	17f7      	asrs	r7, r6, #31
 80036d8:	fb08 4707 	mla	r7, r8, r7, r4
 80036dc:	fba6 4508 	umull	r4, r5, r6, r8
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 80036e0:	4e5f      	ldr	r6, [pc, #380]	; (8003860 <BME280_ReadTemperatureAndPressureAndHuminidity+0x244>)
	var2 = var1 * var1 * (int64_t)p6;
 80036e2:	443d      	add	r5, r7
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 80036e4:	f9b6 8000 	ldrsh.w	r8, [r6]
 80036e8:	fb08 f101 	mul.w	r1, r8, r1
 80036ec:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80036f0:	fb00 1109 	mla	r1, r0, r9, r1
 80036f4:	fba8 8900 	umull	r8, r9, r8, r0
 80036f8:	4489      	add	r9, r1
	var2 = var2 + (((int64_t)p4)<<35);
 80036fa:	495a      	ldr	r1, [pc, #360]	; (8003864 <BME280_ReadTemperatureAndPressureAndHuminidity+0x248>)
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 80036fc:	ea4f 4749 	mov.w	r7, r9, lsl #17
 8003700:	ea47 37d8 	orr.w	r7, r7, r8, lsr #15
 8003704:	ea4f 4648 	mov.w	r6, r8, lsl #17
	var2 = var2 + (((int64_t)p4)<<35);
 8003708:	f9b1 8000 	ldrsh.w	r8, [r1]
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 800370c:	1936      	adds	r6, r6, r4
 800370e:	416f      	adcs	r7, r5
	p = (((p<<31) - var2)*3125) / var1;
 8003710:	ea4f 74ce 	mov.w	r4, lr, lsl #31
	var2 = var2 + (((int64_t)p4)<<35);
 8003714:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003718:	eb16 060a 	adds.w	r6, r6, sl
 800371c:	414f      	adcs	r7, r1
	p = (((p<<31) - var2)*3125) / var1;
 800371e:	1ba6      	subs	r6, r4, r6
 8003720:	f640 4435 	movw	r4, #3125	; 0xc35
	p = 1048576 - adc_P;
 8003724:	ea4f 79ee 	mov.w	r9, lr, asr #31
	p = (((p<<31) - var2)*3125) / var1;
 8003728:	fba6 0104 	umull	r0, r1, r6, r4
 800372c:	ea4f 75c9 	mov.w	r5, r9, lsl #31
 8003730:	ea45 055e 	orr.w	r5, r5, lr, lsr #1
 8003734:	eb65 0707 	sbc.w	r7, r5, r7
 8003738:	fb04 1107 	mla	r1, r4, r7, r1
 800373c:	f7fd fc74 	bl	8001028 <__aeabi_ldivmod>
	var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8003740:	4b49      	ldr	r3, [pc, #292]	; (8003868 <BME280_ReadTemperatureAndPressureAndHuminidity+0x24c>)
 8003742:	134c      	asrs	r4, r1, #13
 8003744:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003748:	0b45      	lsrs	r5, r0, #13
 800374a:	fb02 f604 	mul.w	r6, r2, r4
 800374e:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
 8003752:	17d3      	asrs	r3, r2, #31
 8003754:	fb05 6603 	mla	r6, r5, r3, r6
 8003758:	fba2 2305 	umull	r2, r3, r2, r5
 800375c:	4354      	muls	r4, r2
 800375e:	4433      	add	r3, r6
 8003760:	fb05 4403 	mla	r4, r5, r3, r4
 8003764:	fba2 2305 	umull	r2, r3, r2, r5
 8003768:	4423      	add	r3, r4
 800376a:	0e54      	lsrs	r4, r2, #25
 800376c:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8003770:	1822      	adds	r2, r4, r0
	var2 = (((int64_t)p8) * p) >> 19;
 8003772:	4c3e      	ldr	r4, [pc, #248]	; (800386c <BME280_ReadTemperatureAndPressureAndHuminidity+0x250>)
	var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8003774:	ea4f 6563 	mov.w	r5, r3, asr #25
	var2 = (((int64_t)p8) * p) >> 19;
 8003778:	f9b4 4000 	ldrsh.w	r4, [r4]
	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 800377c:	eb45 0301 	adc.w	r3, r5, r1
	var2 = (((int64_t)p8) * p) >> 19;
 8003780:	4361      	muls	r1, r4
 8003782:	17e5      	asrs	r5, r4, #31
 8003784:	fb00 1505 	mla	r5, r0, r5, r1
 8003788:	fba4 0100 	umull	r0, r1, r4, r0
 800378c:	4429      	add	r1, r5
 800378e:	0cc4      	lsrs	r4, r0, #19
 8003790:	ea44 3441 	orr.w	r4, r4, r1, lsl #13
	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8003794:	1912      	adds	r2, r2, r4
	var2 = (((int64_t)p8) * p) >> 19;
 8003796:	ea4f 45e1 	mov.w	r5, r1, asr #19
	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 800379a:	416b      	adcs	r3, r5
 800379c:	0a10      	lsrs	r0, r2, #8
 800379e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80037a2:	4b33      	ldr	r3, [pc, #204]	; (8003870 <BME280_ReadTemperatureAndPressureAndHuminidity+0x254>)
 80037a4:	f9b3 4000 	ldrsh.w	r4, [r3]
	*pressure = (int32_t)p/256;
 80037a8:	9b00      	ldr	r3, [sp, #0]
	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 80037aa:	0122      	lsls	r2, r4, #4
 80037ac:	1812      	adds	r2, r2, r0
	*pressure = (int32_t)p/256;
 80037ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 80037b2:	fb92 f2f0 	sdiv	r2, r2, r0
	int32_t adc_H = BME280_Read16(BME280_HUMIDDATA);
 80037b6:	20fd      	movs	r0, #253	; 0xfd
	*pressure = (int32_t)p/256;
 80037b8:	601a      	str	r2, [r3, #0]
	int32_t adc_H = BME280_Read16(BME280_HUMIDDATA);
 80037ba:	f7ff fd7f 	bl	80032bc <BME280_Read16>
	if (adc_H == 0x8000) // value in case humidity measurement was disabled
 80037be:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80037c2:	f43f af38 	beq.w	8003636 <BME280_ReadTemperatureAndPressureAndHuminidity+0x1a>
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 80037c6:	4a2b      	ldr	r2, [pc, #172]	; (8003874 <BME280_ReadTemperatureAndPressureAndHuminidity+0x258>)
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80037c8:	492b      	ldr	r1, [pc, #172]	; (8003878 <BME280_ReadTemperatureAndPressureAndHuminidity+0x25c>)
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 80037ca:	f9b2 2000 	ldrsh.w	r2, [r2]
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80037ce:	f8db 3000 	ldr.w	r3, [fp]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 80037d2:	0512      	lsls	r2, r2, #20
 80037d4:	ebc2 3280 	rsb	r2, r2, r0, lsl #14
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80037d8:	f9b1 0000 	ldrsh.w	r0, [r1]
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80037dc:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 80037e0:	fb03 2010 	mls	r0, r3, r0, r2
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 80037e4:	4925      	ldr	r1, [pc, #148]	; (800387c <BME280_ReadTemperatureAndPressureAndHuminidity+0x260>)
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80037e6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 80037ea:	13c2      	asrs	r2, r0, #15
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 80037ec:	7808      	ldrb	r0, [r1, #0]
 80037ee:	4358      	muls	r0, r3
 80037f0:	12c0      	asrs	r0, r0, #11
 80037f2:	f500 4100 	add.w	r1, r0, #32768	; 0x8000
			   (((((((v_x1_u32r * ((int32_t)h6)) >> 10) *
 80037f6:	4822      	ldr	r0, [pc, #136]	; (8003880 <BME280_ReadTemperatureAndPressureAndHuminidity+0x264>)
 80037f8:	f990 0000 	ldrsb.w	r0, [r0]
 80037fc:	4358      	muls	r0, r3
 80037fe:	1280      	asrs	r0, r0, #10
 8003800:	4348      	muls	r0, r1
				  ((int32_t)2097152)) * ((int32_t)h2) + 8192) >> 14));
 8003802:	4920      	ldr	r1, [pc, #128]	; (8003884 <BME280_ReadTemperatureAndPressureAndHuminidity+0x268>)
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 8003804:	1280      	asrs	r0, r0, #10
 8003806:	f500 1300 	add.w	r3, r0, #2097152	; 0x200000
				  ((int32_t)2097152)) * ((int32_t)h2) + 8192) >> 14));
 800380a:	f9b1 0000 	ldrsh.w	r0, [r1]
 800380e:	4358      	muls	r0, r3
 8003810:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 8003814:	1380      	asrs	r0, r0, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 8003816:	4350      	muls	r0, r2
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8003818:	13c3      	asrs	r3, r0, #15
 800381a:	435b      	muls	r3, r3
							 ((int32_t)h1)) >> 4));
 800381c:	4a1a      	ldr	r2, [pc, #104]	; (8003888 <BME280_ReadTemperatureAndPressureAndHuminidity+0x26c>)
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 800381e:	11db      	asrs	r3, r3, #7
							 ((int32_t)h1)) >> 4));
 8003820:	7812      	ldrb	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8003822:	4353      	muls	r3, r2
 8003824:	eba0 1023 	sub.w	r0, r0, r3, asr #4
	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8003828:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 800382c:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 8003830:	bfa8      	it	ge
 8003832:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
	float h = (v_x1_u32r>>12);
 8003836:	1300      	asrs	r0, r0, #12
 8003838:	f7fd f9dc 	bl	8000bf4 <__aeabi_i2f>
	*huminidity = h / 1024.0;
 800383c:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 8003840:	f7fd fa2c 	bl	8000c9c <__aeabi_fmul>
 8003844:	9b01      	ldr	r3, [sp, #4]
 8003846:	6018      	str	r0, [r3, #0]
		return 0;  // avoid exception caused by division by zero
 8003848:	4650      	mov	r0, sl
 800384a:	e6f5      	b.n	8003638 <BME280_ReadTemperatureAndPressureAndHuminidity+0x1c>
 800384c:	c2c60000 	.word	0xc2c60000
 8003850:	20000210 	.word	0x20000210
 8003854:	20000236 	.word	0x20000236
 8003858:	2000021e 	.word	0x2000021e
 800385c:	20000224 	.word	0x20000224
 8003860:	2000021a 	.word	0x2000021a
 8003864:	2000023c 	.word	0x2000023c
 8003868:	2000023a 	.word	0x2000023a
 800386c:	20000222 	.word	0x20000222
 8003870:	20000214 	.word	0x20000214
 8003874:	20000232 	.word	0x20000232
 8003878:	2000021c 	.word	0x2000021c
 800387c:	20000238 	.word	0x20000238
 8003880:	20000230 	.word	0x20000230
 8003884:	20000220 	.word	0x20000220
 8003888:	20000212 	.word	0x20000212
 800388c:	20000240 	.word	0x20000240

08003890 <Delay_us>:

#include "delays.h"

void Delay_us(uint16_t us)
{
	htim3.Instance->CNT = 0;
 8003890:	2200      	movs	r2, #0
 8003892:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <Delay_us+0x10>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim3.Instance->CNT <= us);
 8003898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800389a:	4282      	cmp	r2, r0
 800389c:	d9fc      	bls.n	8003898 <Delay_us+0x8>
}
 800389e:	4770      	bx	lr
 80038a0:	20000324 	.word	0x20000324

080038a4 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 80038a4:	b510      	push	{r4, lr}
	OneWire_Reset(&OneWire); // Reset the bus
 80038a6:	4c07      	ldr	r4, [pc, #28]	; (80038c4 <DS18B20_StartAll+0x20>)
 80038a8:	4620      	mov	r0, r4
 80038aa:	f000 fb0d 	bl	8003ec8 <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 80038ae:	4620      	mov	r0, r4
 80038b0:	21cc      	movs	r1, #204	; 0xcc
 80038b2:	f000 fb60 	bl	8003f76 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 80038b6:	4620      	mov	r0, r4
}
 80038b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 80038bc:	2144      	movs	r1, #68	; 0x44
 80038be:	f000 bb5a 	b.w	8003f76 <OneWire_WriteByte>
 80038c2:	bf00      	nop
 80038c4:	20000258 	.word	0x20000258

080038c8 <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 80038c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if( number >= TempSensorCount) // If read sensor is not availible
 80038ca:	4b2a      	ldr	r3, [pc, #168]	; (8003974 <DS18B20_Read+0xac>)
{
 80038cc:	460d      	mov	r5, r1
	if( number >= TempSensorCount) // If read sensor is not availible
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	4283      	cmp	r3, r0
 80038d2:	d802      	bhi.n	80038da <DS18B20_Read+0x12>
		return 0;
 80038d4:	2000      	movs	r0, #0
	}
	
	*destination = result;
	
	return 1; //temperature valid
}
 80038d6:	b002      	add	sp, #8
 80038d8:	bd70      	pop	{r4, r5, r6, pc}
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 80038da:	4b27      	ldr	r3, [pc, #156]	; (8003978 <DS18B20_Read+0xb0>)
 80038dc:	0100      	lsls	r0, r0, #4
 80038de:	18c4      	adds	r4, r0, r3
	return 1;
}

uint8_t DS18B20_Is(uint8_t* ROM)
{
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 80038e0:	5cc3      	ldrb	r3, [r0, r3]
 80038e2:	2b28      	cmp	r3, #40	; 0x28
 80038e4:	d1f6      	bne.n	80038d4 <DS18B20_Read+0xc>
	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 80038e6:	4825      	ldr	r0, [pc, #148]	; (800397c <DS18B20_Read+0xb4>)
 80038e8:	f000 fb2a 	bl	8003f40 <OneWire_ReadBit>
 80038ec:	2800      	cmp	r0, #0
 80038ee:	d0f1      	beq.n	80038d4 <DS18B20_Read+0xc>
	OneWire_Reset(&OneWire); // Reset the bus
 80038f0:	4822      	ldr	r0, [pc, #136]	; (800397c <DS18B20_Read+0xb4>)
 80038f2:	f000 fae9 	bl	8003ec8 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80038f6:	4621      	mov	r1, r4
 80038f8:	4820      	ldr	r0, [pc, #128]	; (800397c <DS18B20_Read+0xb4>)
 80038fa:	f000 fbd1 	bl	80040a0 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 80038fe:	21be      	movs	r1, #190	; 0xbe
 8003900:	481e      	ldr	r0, [pc, #120]	; (800397c <DS18B20_Read+0xb4>)
 8003902:	f000 fb38 	bl	8003f76 <OneWire_WriteByte>
 8003906:	2400      	movs	r4, #0
		data[i] = OneWire_ReadByte(&OneWire);
 8003908:	4e1c      	ldr	r6, [pc, #112]	; (800397c <DS18B20_Read+0xb4>)
 800390a:	4630      	mov	r0, r6
 800390c:	f000 fb43 	bl	8003f96 <OneWire_ReadByte>
 8003910:	f80d 0004 	strb.w	r0, [sp, r4]
 8003914:	3401      	adds	r4, #1
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8003916:	2c05      	cmp	r4, #5
 8003918:	d1f7      	bne.n	800390a <DS18B20_Read+0x42>
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 800391a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800391e:	f89d 4000 	ldrb.w	r4, [sp]
	OneWire_Reset(&OneWire); // Reset the bus
 8003922:	4816      	ldr	r0, [pc, #88]	; (800397c <DS18B20_Read+0xb4>)
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8003924:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
	OneWire_Reset(&OneWire); // Reset the bus
 8003928:	f000 face 	bl	8003ec8 <OneWire_Reset>
	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 800392c:	f89d 3004 	ldrb.w	r3, [sp, #4]
			result = temperature*(float)DS18B20_STEP_11BIT;
 8003930:	4620      	mov	r0, r4
	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 8003932:	f3c3 1341 	ubfx	r3, r3, #5, #2
	switch (resolution) // Chceck the correct value dur to resolution
 8003936:	3309      	adds	r3, #9
 8003938:	2b0b      	cmp	r3, #11
 800393a:	d011      	beq.n	8003960 <DS18B20_Read+0x98>
 800393c:	2b0c      	cmp	r3, #12
 800393e:	d014      	beq.n	800396a <DS18B20_Read+0xa2>
 8003940:	2b0a      	cmp	r3, #10
 8003942:	d008      	beq.n	8003956 <DS18B20_Read+0x8e>
			result = temperature*(float)DS18B20_STEP_9BIT;
 8003944:	f7fd f956 	bl	8000bf4 <__aeabi_i2f>
 8003948:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
			result = temperature*(float)DS18B20_STEP_12BIT;
 800394c:	f7fd f9a6 	bl	8000c9c <__aeabi_fmul>
	*destination = result;
 8003950:	6028      	str	r0, [r5, #0]
 8003952:	2001      	movs	r0, #1
 8003954:	e7bf      	b.n	80038d6 <DS18B20_Read+0xe>
			result = temperature*(float)DS18B20_STEP_10BIT;
 8003956:	f7fd f94d 	bl	8000bf4 <__aeabi_i2f>
 800395a:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800395e:	e7f5      	b.n	800394c <DS18B20_Read+0x84>
			result = temperature*(float)DS18B20_STEP_11BIT;
 8003960:	f7fd f948 	bl	8000bf4 <__aeabi_i2f>
 8003964:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8003968:	e7f0      	b.n	800394c <DS18B20_Read+0x84>
			result = temperature*(float)DS18B20_STEP_12BIT;
 800396a:	f7fd f943 	bl	8000bf4 <__aeabi_i2f>
 800396e:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8003972:	e7eb      	b.n	800394c <DS18B20_Read+0x84>
 8003974:	200001f8 	.word	0x200001f8
 8003978:	20000248 	.word	0x20000248
 800397c:	20000258 	.word	0x20000258

08003980 <DS18B20_SetResolution>:
{
 8003980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( number >= TempSensorCount)
 8003984:	4b33      	ldr	r3, [pc, #204]	; (8003a54 <DS18B20_SetResolution+0xd4>)
{
 8003986:	460d      	mov	r5, r1
	if( number >= TempSensorCount)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	4283      	cmp	r3, r0
 800398c:	d905      	bls.n	800399a <DS18B20_SetResolution+0x1a>
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 800398e:	4b32      	ldr	r3, [pc, #200]	; (8003a58 <DS18B20_SetResolution+0xd8>)
 8003990:	0100      	lsls	r0, r0, #4
 8003992:	18c6      	adds	r6, r0, r3
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8003994:	5cc3      	ldrb	r3, [r0, r3]
 8003996:	2b28      	cmp	r3, #40	; 0x28
 8003998:	d016      	beq.n	80039c8 <DS18B20_SetResolution+0x48>
		return 0;
 800399a:	2000      	movs	r0, #0
 800399c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if (resolution == DS18B20_Resolution_10bits) 
 80039a0:	2d0a      	cmp	r5, #10
 80039a2:	d104      	bne.n	80039ae <DS18B20_SetResolution+0x2e>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80039a4:	f004 04bf 	and.w	r4, r4, #191	; 0xbf
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80039a8:	f044 0420 	orr.w	r4, r4, #32
 80039ac:	e02d      	b.n	8003a0a <DS18B20_SetResolution+0x8a>
	else if (resolution == DS18B20_Resolution_11bits)
 80039ae:	2d0b      	cmp	r5, #11
 80039b0:	d104      	bne.n	80039bc <DS18B20_SetResolution+0x3c>
 80039b2:	f004 04df 	and.w	r4, r4, #223	; 0xdf
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80039b6:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80039ba:	e026      	b.n	8003a0a <DS18B20_SetResolution+0x8a>
	else if (resolution == DS18B20_Resolution_12bits)
 80039bc:	2d0c      	cmp	r5, #12
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80039be:	bf04      	itt	eq
 80039c0:	f044 0460 	orreq.w	r4, r4, #96	; 0x60
 80039c4:	b2e4      	uxtbeq	r4, r4
 80039c6:	e020      	b.n	8003a0a <DS18B20_SetResolution+0x8a>
	OneWire_Reset(&OneWire); // Reset the bus
 80039c8:	4824      	ldr	r0, [pc, #144]	; (8003a5c <DS18B20_SetResolution+0xdc>)
 80039ca:	f000 fa7d 	bl	8003ec8 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80039ce:	4631      	mov	r1, r6
 80039d0:	4822      	ldr	r0, [pc, #136]	; (8003a5c <DS18B20_SetResolution+0xdc>)
 80039d2:	f000 fb65 	bl	80040a0 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 80039d6:	21be      	movs	r1, #190	; 0xbe
 80039d8:	4820      	ldr	r0, [pc, #128]	; (8003a5c <DS18B20_SetResolution+0xdc>)
 80039da:	f000 facc 	bl	8003f76 <OneWire_WriteByte>
	OneWire_ReadByte(&OneWire);
 80039de:	481f      	ldr	r0, [pc, #124]	; (8003a5c <DS18B20_SetResolution+0xdc>)
 80039e0:	f000 fad9 	bl	8003f96 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 80039e4:	481d      	ldr	r0, [pc, #116]	; (8003a5c <DS18B20_SetResolution+0xdc>)
 80039e6:	f000 fad6 	bl	8003f96 <OneWire_ReadByte>
	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 80039ea:	481c      	ldr	r0, [pc, #112]	; (8003a5c <DS18B20_SetResolution+0xdc>)
 80039ec:	f000 fad3 	bl	8003f96 <OneWire_ReadByte>
 80039f0:	4607      	mov	r7, r0
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 80039f2:	481a      	ldr	r0, [pc, #104]	; (8003a5c <DS18B20_SetResolution+0xdc>)
 80039f4:	f000 facf 	bl	8003f96 <OneWire_ReadByte>
 80039f8:	4680      	mov	r8, r0
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 80039fa:	4818      	ldr	r0, [pc, #96]	; (8003a5c <DS18B20_SetResolution+0xdc>)
 80039fc:	f000 facb 	bl	8003f96 <OneWire_ReadByte>
	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8003a00:	2d09      	cmp	r5, #9
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8003a02:	4604      	mov	r4, r0
	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8003a04:	d1cc      	bne.n	80039a0 <DS18B20_SetResolution+0x20>
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8003a06:	f004 049f 	and.w	r4, r4, #159	; 0x9f
	OneWire_Reset(&OneWire); // Reset the bus
 8003a0a:	4814      	ldr	r0, [pc, #80]	; (8003a5c <DS18B20_SetResolution+0xdc>)
 8003a0c:	f000 fa5c 	bl	8003ec8 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8003a10:	4631      	mov	r1, r6
 8003a12:	4812      	ldr	r0, [pc, #72]	; (8003a5c <DS18B20_SetResolution+0xdc>)
 8003a14:	f000 fb44 	bl	80040a0 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8003a18:	214e      	movs	r1, #78	; 0x4e
 8003a1a:	4810      	ldr	r0, [pc, #64]	; (8003a5c <DS18B20_SetResolution+0xdc>)
 8003a1c:	f000 faab 	bl	8003f76 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 8003a20:	4639      	mov	r1, r7
 8003a22:	480e      	ldr	r0, [pc, #56]	; (8003a5c <DS18B20_SetResolution+0xdc>)
 8003a24:	f000 faa7 	bl	8003f76 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8003a28:	4641      	mov	r1, r8
 8003a2a:	480c      	ldr	r0, [pc, #48]	; (8003a5c <DS18B20_SetResolution+0xdc>)
 8003a2c:	f000 faa3 	bl	8003f76 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 8003a30:	4621      	mov	r1, r4
 8003a32:	480a      	ldr	r0, [pc, #40]	; (8003a5c <DS18B20_SetResolution+0xdc>)
 8003a34:	f000 fa9f 	bl	8003f76 <OneWire_WriteByte>
	OneWire_Reset(&OneWire); // Reset the bus
 8003a38:	4808      	ldr	r0, [pc, #32]	; (8003a5c <DS18B20_SetResolution+0xdc>)
 8003a3a:	f000 fa45 	bl	8003ec8 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8003a3e:	4631      	mov	r1, r6
 8003a40:	4806      	ldr	r0, [pc, #24]	; (8003a5c <DS18B20_SetResolution+0xdc>)
 8003a42:	f000 fb2d 	bl	80040a0 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 8003a46:	2148      	movs	r1, #72	; 0x48
 8003a48:	4804      	ldr	r0, [pc, #16]	; (8003a5c <DS18B20_SetResolution+0xdc>)
 8003a4a:	f000 fa94 	bl	8003f76 <OneWire_WriteByte>
	return 1;
 8003a4e:	2001      	movs	r0, #1
 8003a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a54:	200001f8 	.word	0x200001f8
 8003a58:	20000248 	.word	0x20000248
 8003a5c:	20000258 	.word	0x20000258

08003a60 <DS18B20_AllDone>:
	return 0;
}

uint8_t DS18B20_AllDone(void)
{
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8003a60:	4801      	ldr	r0, [pc, #4]	; (8003a68 <DS18B20_AllDone+0x8>)
 8003a62:	f000 ba6d 	b.w	8003f40 <OneWire_ReadBit>
 8003a66:	bf00      	nop
 8003a68:	20000258 	.word	0x20000258

08003a6c <DS18B20_ReadAll>:
}

void DS18B20_ReadAll(void)
{
 8003a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i;

	if (DS18B20_AllDone())
 8003a70:	f7ff fff6 	bl	8003a60 <DS18B20_AllDone>
 8003a74:	b1c0      	cbz	r0, 8003aa8 <DS18B20_ReadAll+0x3c>
 8003a76:	2400      	movs	r4, #0
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
		{
			ds18b20[i].ValidDataFlag = 0;
 8003a78:	46a0      	mov	r8, r4
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8003a7a:	4f0c      	ldr	r7, [pc, #48]	; (8003aac <DS18B20_ReadAll+0x40>)
			ds18b20[i].ValidDataFlag = 0;
 8003a7c:	4d0c      	ldr	r5, [pc, #48]	; (8003ab0 <DS18B20_ReadAll+0x44>)
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8003a7e:	783b      	ldrb	r3, [r7, #0]
 8003a80:	b2e0      	uxtb	r0, r4
 8003a82:	4283      	cmp	r3, r0
 8003a84:	d801      	bhi.n	8003a8a <DS18B20_ReadAll+0x1e>
 8003a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ds18b20[i].ValidDataFlag = 0;
 8003a8a:	0101      	lsls	r1, r0, #4
 8003a8c:	186e      	adds	r6, r5, r1
 8003a8e:	f886 800c 	strb.w	r8, [r6, #12]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8003a92:	5c6b      	ldrb	r3, [r5, r1]
 8003a94:	2b28      	cmp	r3, #40	; 0x28
 8003a96:	d001      	beq.n	8003a9c <DS18B20_ReadAll+0x30>
 8003a98:	3401      	adds	r4, #1
 8003a9a:	e7f0      	b.n	8003a7e <DS18B20_ReadAll+0x12>

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 8003a9c:	3108      	adds	r1, #8
 8003a9e:	4429      	add	r1, r5
 8003aa0:	f7ff ff12 	bl	80038c8 <DS18B20_Read>
 8003aa4:	7330      	strb	r0, [r6, #12]
 8003aa6:	e7f7      	b.n	8003a98 <DS18B20_ReadAll+0x2c>
 8003aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aac:	200001f8 	.word	0x200001f8
 8003ab0:	20000248 	.word	0x20000248

08003ab4 <DS18B20_GetTemperature>:
	return TempSensorCount;
}

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
	if(!ds18b20[number].ValidDataFlag)
 8003ab4:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <DS18B20_GetTemperature+0x14>)
 8003ab6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8003aba:	7b18      	ldrb	r0, [r3, #12]
 8003abc:	b110      	cbz	r0, 8003ac4 <DS18B20_GetTemperature+0x10>
		return 0;

	*destination = ds18b20[number].Temperature;
	return 1;
 8003abe:	2001      	movs	r0, #1
	*destination = ds18b20[number].Temperature;
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	600b      	str	r3, [r1, #0]

}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000248 	.word	0x20000248

08003acc <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 8003acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t next = 0, i = 0, j;
	OneWire_Init(&OneWire, DS18B20_GPIO_Port, DS18B20_Pin); // Init OneWire bus
 8003ad0:	491a      	ldr	r1, [pc, #104]	; (8003b3c <DS18B20_Init+0x70>)
 8003ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 8003ad6:	4607      	mov	r7, r0
	OneWire_Init(&OneWire, DS18B20_GPIO_Port, DS18B20_Pin); // Init OneWire bus
 8003ad8:	4819      	ldr	r0, [pc, #100]	; (8003b40 <DS18B20_Init+0x74>)
 8003ada:	f000 fafd 	bl	80040d8 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 8003ade:	4818      	ldr	r0, [pc, #96]	; (8003b40 <DS18B20_Init+0x74>)
 8003ae0:	f000 fad4 	bl	800408c <OneWire_First>
	uint8_t next = 0, i = 0, j;
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4d17      	ldr	r5, [pc, #92]	; (8003b44 <DS18B20_Init+0x78>)
	while(next)
	{
		TempSensorCount++;
 8003ae8:	4e17      	ldr	r6, [pc, #92]	; (8003b48 <DS18B20_Init+0x7c>)
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8003aea:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8003b40 <DS18B20_Init+0x74>
	while(next)
 8003aee:	b940      	cbnz	r0, 8003b02 <DS18B20_Init+0x36>
 8003af0:	460c      	mov	r4, r1
		next = OneWire_Next(&OneWire);
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
			break;
	}

	for(j = 0; j < i; j++)
 8003af2:	2600      	movs	r6, #0
	{
		if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 8003af4:	eb05 1504 	add.w	r5, r5, r4, lsl #4
 8003af8:	b2f0      	uxtb	r0, r6
	for(j = 0; j < i; j++)
 8003afa:	4284      	cmp	r4, r0
 8003afc:	d813      	bhi.n	8003b26 <DS18B20_Init+0x5a>
 8003afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TempSensorCount++;
 8003b02:	7833      	ldrb	r3, [r6, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8003b04:	1c4c      	adds	r4, r1, #1
		TempSensorCount++;
 8003b06:	3301      	adds	r3, #1
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8003b08:	eb05 1101 	add.w	r1, r5, r1, lsl #4
 8003b0c:	4640      	mov	r0, r8
		TempSensorCount++;
 8003b0e:	7033      	strb	r3, [r6, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8003b10:	f000 fad6 	bl	80040c0 <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 8003b14:	4640      	mov	r0, r8
 8003b16:	f000 fac0 	bl	800409a <OneWire_Next>
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 8003b1a:	7833      	ldrb	r3, [r6, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8003b1c:	b2e4      	uxtb	r4, r4
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e7      	bne.n	8003af2 <DS18B20_Init+0x26>
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8003b22:	4621      	mov	r1, r4
 8003b24:	e7e3      	b.n	8003aee <DS18B20_Init+0x22>
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8003b26:	782b      	ldrb	r3, [r5, #0]
 8003b28:	2b28      	cmp	r3, #40	; 0x28
 8003b2a:	d003      	beq.n	8003b34 <DS18B20_Init+0x68>
		{
			DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
		}

		DS18B20_StartAll(); // Start conversion on all sensors
 8003b2c:	f7ff feba 	bl	80038a4 <DS18B20_StartAll>
 8003b30:	3601      	adds	r6, #1
 8003b32:	e7e1      	b.n	8003af8 <DS18B20_Init+0x2c>
			DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 8003b34:	4639      	mov	r1, r7
 8003b36:	f7ff ff23 	bl	8003980 <DS18B20_SetResolution>
 8003b3a:	e7f7      	b.n	8003b2c <DS18B20_Init+0x60>
 8003b3c:	40011000 	.word	0x40011000
 8003b40:	20000258 	.word	0x20000258
 8003b44:	20000248 	.word	0x20000248
 8003b48:	200001f8 	.word	0x200001f8

08003b4c <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4c:	2210      	movs	r2, #16
{
 8003b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b52:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b54:	eb0d 0002 	add.w	r0, sp, r2
 8003b58:	2100      	movs	r1, #0
 8003b5a:	f000 fc87 	bl	800446c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b5e:	4b2f      	ldr	r3, [pc, #188]	; (8003c1c <MX_GPIO_Init+0xd0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003b60:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8003c28 <MX_GPIO_Init+0xdc>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b64:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 8003b66:	4d2e      	ldr	r5, [pc, #184]	; (8003c20 <MX_GPIO_Init+0xd4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b68:	f042 0210 	orr.w	r2, r2, #16
 8003b6c:	619a      	str	r2, [r3, #24]
 8003b6e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003b70:	4640      	mov	r0, r8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b72:	f002 0210 	and.w	r2, r2, #16
 8003b76:	9200      	str	r2, [sp, #0]
 8003b78:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b7a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003b7c:	2120      	movs	r1, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b7e:	f042 0220 	orr.w	r2, r2, #32
 8003b82:	619a      	str	r2, [r3, #24]
 8003b84:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b86:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b88:	f002 0220 	and.w	r2, r2, #32
 8003b8c:	9201      	str	r2, [sp, #4]
 8003b8e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b90:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b92:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b94:	f042 0204 	orr.w	r2, r2, #4
 8003b98:	619a      	str	r2, [r3, #24]
 8003b9a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9c:	2602      	movs	r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b9e:	f002 0204 	and.w	r2, r2, #4
 8003ba2:	9202      	str	r2, [sp, #8]
 8003ba4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	f042 0208 	orr.w	r2, r2, #8
 8003bac:	619a      	str	r2, [r3, #24]
 8003bae:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003bb0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	9303      	str	r3, [sp, #12]
 8003bb8:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003bba:	f7fd fde5 	bl	8001788 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bc6:	f7fd fddf 	bl	8001788 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8003bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bce:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bd0:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <MX_GPIO_Init+0xd8>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003bd2:	a904      	add	r1, sp, #16
 8003bd4:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bd6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003bda:	f7fd fcef 	bl	80015bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8003bde:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003be0:	a904      	add	r1, sp, #16
 8003be2:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LD2_Pin;
 8003be4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003be6:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bea:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003bec:	f7fd fce6 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8003bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8003bf4:	a904      	add	r1, sp, #16
 8003bf6:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8003bf8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bfa:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bfe:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8003c00:	f7fd fcdc 	bl	80015bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003c04:	4622      	mov	r2, r4
 8003c06:	4621      	mov	r1, r4
 8003c08:	2028      	movs	r0, #40	; 0x28
 8003c0a:	f7fd fc39 	bl	8001480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c0e:	2028      	movs	r0, #40	; 0x28
 8003c10:	f7fd fc6a 	bl	80014e8 <HAL_NVIC_EnableIRQ>

}
 8003c14:	b008      	add	sp, #32
 8003c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40011000 	.word	0x40011000
 8003c24:	10110000 	.word	0x10110000
 8003c28:	40010800 	.word	0x40010800

08003c2c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003c2c:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003c2e:	480c      	ldr	r0, [pc, #48]	; (8003c60 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <MX_I2C1_Init+0x38>)
 8003c32:	f8df e034 	ldr.w	lr, [pc, #52]	; 8003c68 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8003c3a:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c3e:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c40:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c42:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c44:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c46:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c48:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c4a:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c4c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c4e:	f7fd ff7b 	bl	8001b48 <HAL_I2C_Init>
 8003c52:	b118      	cbz	r0, 8003c5c <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8003c54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003c58:	f000 b904 	b.w	8003e64 <Error_Handler>
 8003c5c:	bd08      	pop	{r3, pc}
 8003c5e:	bf00      	nop
 8003c60:	2000026c 	.word	0x2000026c
 8003c64:	40005400 	.word	0x40005400
 8003c68:	000186a0 	.word	0x000186a0

08003c6c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003c6c:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8003c6e:	480c      	ldr	r0, [pc, #48]	; (8003ca0 <MX_I2C2_Init+0x34>)
  hi2c2.Init.ClockSpeed = 100000;
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <MX_I2C2_Init+0x38>)
 8003c72:	f8df e034 	ldr.w	lr, [pc, #52]	; 8003ca8 <MX_I2C2_Init+0x3c>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 100000;
 8003c7a:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c7e:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c80:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c82:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003c84:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c86:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003c88:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c8a:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c8c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003c8e:	f7fd ff5b 	bl	8001b48 <HAL_I2C_Init>
 8003c92:	b118      	cbz	r0, 8003c9c <MX_I2C2_Init+0x30>
  {
    Error_Handler();
  }

}
 8003c94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003c98:	f000 b8e4 	b.w	8003e64 <Error_Handler>
 8003c9c:	bd08      	pop	{r3, pc}
 8003c9e:	bf00      	nop
 8003ca0:	200002c0 	.word	0x200002c0
 8003ca4:	40005800 	.word	0x40005800
 8003ca8:	000186a0 	.word	0x000186a0

08003cac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cac:	2210      	movs	r2, #16
{
 8003cae:	b510      	push	{r4, lr}
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb4:	eb0d 0002 	add.w	r0, sp, r2
 8003cb8:	2100      	movs	r1, #0
 8003cba:	f000 fbd7 	bl	800446c <memset>
  if(i2cHandle->Instance==I2C1)
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	4a29      	ldr	r2, [pc, #164]	; (8003d68 <HAL_I2C_MspInit+0xbc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d12e      	bne.n	8003d24 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc6:	4c29      	ldr	r4, [pc, #164]	; (8003d6c <HAL_I2C_MspInit+0xc0>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cc8:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cca:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ccc:	4828      	ldr	r0, [pc, #160]	; (8003d70 <HAL_I2C_MspInit+0xc4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cce:	f043 0308 	orr.w	r3, r3, #8
 8003cd2:	61a3      	str	r3, [r4, #24]
 8003cd4:	69a3      	ldr	r3, [r4, #24]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cde:	23c0      	movs	r3, #192	; 0xc0
 8003ce0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ce2:	2312      	movs	r3, #18
 8003ce4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cea:	f7fd fc67 	bl	80015bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003cee:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cf0:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003cf2:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cf8:	61e3      	str	r3, [r4, #28]
 8003cfa:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003cfc:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d02:	9301      	str	r3, [sp, #4]
 8003d04:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003d06:	f7fd fbbb 	bl	8001480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003d0a:	201f      	movs	r0, #31
 8003d0c:	f7fd fbec 	bl	80014e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003d10:	2200      	movs	r2, #0
 8003d12:	2020      	movs	r0, #32
 8003d14:	4611      	mov	r1, r2
 8003d16:	f7fd fbb3 	bl	8001480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003d1a:	2020      	movs	r0, #32
 8003d1c:	f7fd fbe4 	bl	80014e8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003d20:	b008      	add	sp, #32
 8003d22:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C2)
 8003d24:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <HAL_I2C_MspInit+0xc8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d1fa      	bne.n	8003d20 <HAL_I2C_MspInit+0x74>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d2a:	4c10      	ldr	r4, [pc, #64]	; (8003d6c <HAL_I2C_MspInit+0xc0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d2c:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d2e:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d30:	480f      	ldr	r0, [pc, #60]	; (8003d70 <HAL_I2C_MspInit+0xc4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d32:	f043 0308 	orr.w	r3, r3, #8
 8003d36:	61a3      	str	r3, [r4, #24]
 8003d38:	69a3      	ldr	r3, [r4, #24]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	9302      	str	r3, [sp, #8]
 8003d40:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d46:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d48:	2312      	movs	r3, #18
 8003d4a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d50:	f7fd fc34 	bl	80015bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d54:	69e3      	ldr	r3, [r4, #28]
 8003d56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d5a:	61e3      	str	r3, [r4, #28]
 8003d5c:	69e3      	ldr	r3, [r4, #28]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d62:	9303      	str	r3, [sp, #12]
 8003d64:	9b03      	ldr	r3, [sp, #12]
}
 8003d66:	e7db      	b.n	8003d20 <HAL_I2C_MspInit+0x74>
 8003d68:	40005400 	.word	0x40005400
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40010c00 	.word	0x40010c00
 8003d74:	40005800 	.word	0x40005800

08003d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d78:	b510      	push	{r4, lr}
 8003d7a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d7c:	2228      	movs	r2, #40	; 0x28
 8003d7e:	2100      	movs	r1, #0
 8003d80:	a806      	add	r0, sp, #24
 8003d82:	f000 fb73 	bl	800446c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d86:	2214      	movs	r2, #20
 8003d88:	2100      	movs	r1, #0
 8003d8a:	a801      	add	r0, sp, #4
 8003d8c:	f000 fb6e 	bl	800446c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d90:	2301      	movs	r3, #1
 8003d92:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d94:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d96:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d98:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003d9a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d9e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003da0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003da2:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003da4:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003da6:	f7fe fdd1 	bl	800294c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003daa:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003db0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003db2:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003db4:	4621      	mov	r1, r4
 8003db6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003db8:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dba:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003dbc:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003dbe:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003dc0:	f7fe ff8c 	bl	8002cdc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8003dc4:	b010      	add	sp, #64	; 0x40
 8003dc6:	bd10      	pop	{r4, pc}

08003dc8 <main>:
{
 8003dc8:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8003dca:	f7fd fb11 	bl	80013f0 <HAL_Init>
  SystemClock_Config();
 8003dce:	f7ff ffd3 	bl	8003d78 <SystemClock_Config>
  MX_GPIO_Init();
 8003dd2:	f7ff febb 	bl	8003b4c <MX_GPIO_Init>
  MX_I2C1_Init();
 8003dd6:	f7ff ff29 	bl	8003c2c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8003dda:	f000 faab 	bl	8004334 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8003dde:	f000 fa4f 	bl	8004280 <MX_TIM3_Init>
  MX_I2C2_Init();
 8003de2:	f7ff ff43 	bl	8003c6c <MX_I2C2_Init>
  MX_TIM1_Init();
 8003de6:	f000 fa15 	bl	8004214 <MX_TIM1_Init>
  HAL_TIM_Base_Start(&htim3);
 8003dea:	4817      	ldr	r0, [pc, #92]	; (8003e48 <main+0x80>)
 8003dec:	f7ff f848 	bl	8002e80 <HAL_TIM_Base_Start>
  BME280_Init(&hi2c2, BME280_TEMPERATURE_16BIT, BME280_PRESSURE_ULTRALOWPOWER, BME280_HUMINIDITY_STANDARD, BME280_NORMALMODE);
 8003df0:	2303      	movs	r3, #3
 8003df2:	2201      	movs	r2, #1
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	4611      	mov	r1, r2
 8003df8:	4814      	ldr	r0, [pc, #80]	; (8003e4c <main+0x84>)
 8003dfa:	f7ff fac3 	bl	8003384 <BME280_Init>
  BME280_SetConfig(BME280_STANDBY_MS_10, BME280_FILTER_OFF);
 8003dfe:	2100      	movs	r1, #0
 8003e00:	2006      	movs	r0, #6
 8003e02:	f7ff fab4 	bl	800336e <BME280_SetConfig>
  DS18B20_Init(DS18B20_Resolution_9bits);
 8003e06:	2009      	movs	r0, #9
 8003e08:	f7ff fe60 	bl	8003acc <DS18B20_Init>
  HAL_Delay(1000);
 8003e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e10:	f7fd fb12 	bl	8001438 <HAL_Delay>
	  BME280_ReadTemperatureAndPressureAndHuminidity(&temperature, &pressure, &huminidity);
 8003e14:	4e0e      	ldr	r6, [pc, #56]	; (8003e50 <main+0x88>)
 8003e16:	4d0f      	ldr	r5, [pc, #60]	; (8003e54 <main+0x8c>)
	  	  	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003e18:	4c0f      	ldr	r4, [pc, #60]	; (8003e58 <main+0x90>)
	  BME280_ReadTemperatureAndPressureAndHuminidity(&temperature, &pressure, &huminidity);
 8003e1a:	4632      	mov	r2, r6
 8003e1c:	4629      	mov	r1, r5
 8003e1e:	480f      	ldr	r0, [pc, #60]	; (8003e5c <main+0x94>)
 8003e20:	f7ff fbfc 	bl	800361c <BME280_ReadTemperatureAndPressureAndHuminidity>
	  DS18B20_ReadAll();
 8003e24:	f7ff fe22 	bl	8003a6c <DS18B20_ReadAll>
	  DS18B20_StartAll();
 8003e28:	f7ff fd3c 	bl	80038a4 <DS18B20_StartAll>
	  if (DS18B20_GetTemperature(0, &dstemperature)) {
 8003e2c:	490c      	ldr	r1, [pc, #48]	; (8003e60 <main+0x98>)
 8003e2e:	2000      	movs	r0, #0
 8003e30:	f7ff fe40 	bl	8003ab4 <DS18B20_GetTemperature>
	  	  	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003e34:	4620      	mov	r0, r4
 8003e36:	2120      	movs	r1, #32
 8003e38:	f7fd fcab 	bl	8001792 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8003e3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e40:	f7fd fafa 	bl	8001438 <HAL_Delay>
 8003e44:	e7e9      	b.n	8003e1a <main+0x52>
 8003e46:	bf00      	nop
 8003e48:	20000324 	.word	0x20000324
 8003e4c:	200002c0 	.word	0x200002c0
 8003e50:	2000031c 	.word	0x2000031c
 8003e54:	20000320 	.word	0x20000320
 8003e58:	40010800 	.word	0x40010800
 8003e5c:	20000318 	.word	0x20000318
 8003e60:	20000314 	.word	0x20000314

08003e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e64:	4770      	bx	lr
	...

08003e68 <OneWire_Delay>:
//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
	_DS18B20_TIMER.Instance->CNT = 0;
 8003e68:	2200      	movs	r2, #0
 8003e6a:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <OneWire_Delay+0x10>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 8003e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e72:	4282      	cmp	r2, r0
 8003e74:	d9fc      	bls.n	8003e70 <OneWire_Delay+0x8>
}
 8003e76:	4770      	bx	lr
 8003e78:	20000364 	.word	0x20000364

08003e7c <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 8003e7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8003e82:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8003e84:	2301      	movs	r3, #1
 8003e86:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8003e88:	8883      	ldrh	r3, [r0, #4]
 8003e8a:	a904      	add	r1, sp, #16
 8003e8c:	f841 3d10 	str.w	r3, [r1, #-16]!
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8003e90:	6800      	ldr	r0, [r0, #0]
 8003e92:	f7fd fb93 	bl	80015bc <HAL_GPIO_Init>
}	
 8003e96:	b005      	add	sp, #20
 8003e98:	f85d fb04 	ldr.w	pc, [sp], #4

08003e9c <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8003e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8003e9e:	2311      	movs	r3, #17
 8003ea0:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8003eaa:	8883      	ldrh	r3, [r0, #4]
 8003eac:	a904      	add	r1, sp, #16
 8003eae:	f841 3d10 	str.w	r3, [r1, #-16]!
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8003eb2:	6800      	ldr	r0, [r0, #0]
 8003eb4:	f7fd fb82 	bl	80015bc <HAL_GPIO_Init>
}
 8003eb8:	b005      	add	sp, #20
 8003eba:	f85d fb04 	ldr.w	pc, [sp], #4

08003ebe <OneWire_OutputLow>:
//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8003ebe:	8883      	ldrh	r3, [r0, #4]
 8003ec0:	6802      	ldr	r2, [r0, #0]
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	6113      	str	r3, [r2, #16]
 8003ec6:	4770      	bx	lr

08003ec8 <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 8003ec8:	b510      	push	{r4, lr}
 8003eca:	4604      	mov	r4, r0
	uint8_t i;
	
	OneWire_OutputLow(onewire);  // Write bus output low
 8003ecc:	f7ff fff7 	bl	8003ebe <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8003ed0:	f7ff ffe4 	bl	8003e9c <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 8003ed4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003ed8:	f7ff ffc6 	bl	8003e68 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 8003edc:	4620      	mov	r0, r4
 8003ede:	f7ff ffcd 	bl	8003e7c <OneWire_BusInputDirection>
	OneWire_Delay(70);
 8003ee2:	2046      	movs	r0, #70	; 0x46
 8003ee4:	f7ff ffc0 	bl	8003e68 <OneWire_Delay>
	
	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8003ee8:	88a1      	ldrh	r1, [r4, #4]
 8003eea:	6820      	ldr	r0, [r4, #0]
 8003eec:	f7fd fc46 	bl	800177c <HAL_GPIO_ReadPin>
 8003ef0:	4601      	mov	r1, r0
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8003ef2:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8003ef6:	f7ff ffb7 	bl	8003e68 <OneWire_Delay>

	return i;
}
 8003efa:	4608      	mov	r0, r1
 8003efc:	bd10      	pop	{r4, pc}

08003efe <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 8003efe:	b510      	push	{r4, lr}
 8003f00:	4604      	mov	r4, r0
	if (bit) // Send '1',
 8003f02:	b189      	cbz	r1, 8003f28 <OneWire_WriteBit+0x2a>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 8003f04:	f7ff ffdb 	bl	8003ebe <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8003f08:	f7ff ffc8 	bl	8003e9c <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8003f0c:	2006      	movs	r0, #6
 8003f0e:	f7ff ffab 	bl	8003e68 <OneWire_Delay>
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8003f12:	4620      	mov	r0, r4
 8003f14:	f7ff ffb2 	bl	8003e7c <OneWire_BusInputDirection>
		
		OneWire_Delay(64);
 8003f18:	2040      	movs	r0, #64	; 0x40
		OneWire_BusOutputDirection(onewire);
		OneWire_Delay(60);
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		
		OneWire_Delay(10);
 8003f1a:	f7ff ffa5 	bl	8003e68 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus
 8003f1e:	4620      	mov	r0, r4
	}
}
 8003f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		OneWire_BusInputDirection(onewire); // Release bus
 8003f24:	f7ff bfaa 	b.w	8003e7c <OneWire_BusInputDirection>
		OneWire_OutputLow(onewire); // Set the bus low
 8003f28:	f7ff ffc9 	bl	8003ebe <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8003f2c:	f7ff ffb6 	bl	8003e9c <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 8003f30:	203c      	movs	r0, #60	; 0x3c
 8003f32:	f7ff ff99 	bl	8003e68 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8003f36:	4620      	mov	r0, r4
 8003f38:	f7ff ffa0 	bl	8003e7c <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8003f3c:	200a      	movs	r0, #10
 8003f3e:	e7ec      	b.n	8003f1a <OneWire_WriteBit+0x1c>

08003f40 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 8003f40:	b510      	push	{r4, lr}
 8003f42:	4604      	mov	r4, r0
	uint8_t bit = 0; // Default read bit state is low
	
	OneWire_OutputLow(onewire); // Set low to initiate reading
 8003f44:	f7ff ffbb 	bl	8003ebe <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8003f48:	f7ff ffa8 	bl	8003e9c <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 8003f4c:	2002      	movs	r0, #2
 8003f4e:	f7ff ff8b 	bl	8003e68 <OneWire_Delay>
	
	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 8003f52:	4620      	mov	r0, r4
 8003f54:	f7ff ff92 	bl	8003e7c <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8003f58:	200a      	movs	r0, #10
 8003f5a:	f7ff ff85 	bl	8003e68 <OneWire_Delay>
	
	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 8003f5e:	88a1      	ldrh	r1, [r4, #4]
 8003f60:	6820      	ldr	r0, [r4, #0]
 8003f62:	f7fd fc0b 	bl	800177c <HAL_GPIO_ReadPin>
 8003f66:	4601      	mov	r1, r0
		bit = 1;
	
	OneWire_Delay(50); // Wait for end of read cycle
 8003f68:	2032      	movs	r0, #50	; 0x32
 8003f6a:	f7ff ff7d 	bl	8003e68 <OneWire_Delay>

	return bit;
}
 8003f6e:	1c08      	adds	r0, r1, #0
 8003f70:	bf18      	it	ne
 8003f72:	2001      	movne	r0, #1
 8003f74:	bd10      	pop	{r4, pc}

08003f76 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8003f76:	b570      	push	{r4, r5, r6, lr}
 8003f78:	4606      	mov	r6, r0
 8003f7a:	460d      	mov	r5, r1
 8003f7c:	2408      	movs	r4, #8
	uint8_t i = 8;

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8003f7e:	f005 0101 	and.w	r1, r5, #1
 8003f82:	4630      	mov	r0, r6
 8003f84:	3c01      	subs	r4, #1
 8003f86:	f7ff ffba 	bl	8003efe <OneWire_WriteBit>
		byte >>= 1;
	} while(--i);
 8003f8a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		byte >>= 1;
 8003f8e:	ea4f 0555 	mov.w	r5, r5, lsr #1
	} while(--i);
 8003f92:	d1f4      	bne.n	8003f7e <OneWire_WriteByte+0x8>
}
 8003f94:	bd70      	pop	{r4, r5, r6, pc}

08003f96 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8003f96:	b570      	push	{r4, r5, r6, lr}
 8003f98:	4606      	mov	r6, r0
 8003f9a:	2508      	movs	r5, #8
	uint8_t i = 8, byte = 0;
 8003f9c:	2400      	movs	r4, #0

	do{
		byte >>= 1;
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	f7ff ffce 	bl	8003f40 <OneWire_ReadBit>
		byte >>= 1;
 8003fa4:	0864      	lsrs	r4, r4, #1
 8003fa6:	3d01      	subs	r5, #1
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8003fa8:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
	} while(--i);
 8003fac:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8003fb0:	b2e4      	uxtb	r4, r4
	} while(--i);
 8003fb2:	d1f4      	bne.n	8003f9e <OneWire_ReadByte+0x8>
	
	return byte;
}
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}

08003fb8 <OneWire_Search>:
	onewire->LastDeviceFlag = 0;
	onewire->LastFamilyDiscrepancy = 0;
}

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8003fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	last_zero = 0;
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = 0;

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8003fbc:	7a03      	ldrb	r3, [r0, #8]
{
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	460d      	mov	r5, r1
	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8003fc2:	b91b      	cbnz	r3, 8003fcc <OneWire_Search+0x14>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 8003fc4:	f7ff ff80 	bl	8003ec8 <OneWire_Reset>
 8003fc8:	4681      	mov	r9, r0
 8003fca:	b128      	cbz	r0, 8003fd8 <OneWire_Search+0x20>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8003fcc:	2000      	movs	r0, #0
 8003fce:	71a0      	strb	r0, [r4, #6]
			onewire->LastDeviceFlag = 0;
 8003fd0:	7220      	strb	r0, [r4, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8003fd2:	71e0      	strb	r0, [r4, #7]
			return 0;
 8003fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	rom_byte_mask = 1;
 8003fd8:	2601      	movs	r6, #1
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8003fda:	4629      	mov	r1, r5
 8003fdc:	4620      	mov	r0, r4
 8003fde:	f7ff ffca 	bl	8003f76 <OneWire_WriteByte>
	rom_byte_number = 0;
 8003fe2:	464f      	mov	r7, r9
	id_bit_number = 1;
 8003fe4:	4635      	mov	r5, r6

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f7ff ffaa 	bl	8003f40 <OneWire_ReadBit>
 8003fec:	4680      	mov	r8, r0
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f7ff ffa6 	bl	8003f40 <OneWire_ReadBit>

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8003ff4:	f1b8 0f01 	cmp.w	r8, #1
 8003ff8:	d110      	bne.n	800401c <OneWire_Search+0x64>
 8003ffa:	2801      	cmp	r0, #1
 8003ffc:	d12e      	bne.n	800405c <OneWire_Search+0xa4>
					rom_byte_mask = 1; // Reset the mask - first bit
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8003ffe:	2d40      	cmp	r5, #64	; 0x40
 8004000:	d9e4      	bls.n	8003fcc <OneWire_Search+0x14>
		{
			onewire->LastDiscrepancy = last_zero;
 8004002:	f884 9006 	strb.w	r9, [r4, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8004006:	f1b9 0f00 	cmp.w	r9, #0
 800400a:	d101      	bne.n	8004010 <OneWire_Search+0x58>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 800400c:	2301      	movs	r3, #1
 800400e:	7223      	strb	r3, [r4, #8]
			search_result = 1; // Searching successful
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8004010:	7a63      	ldrb	r3, [r4, #9]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0da      	beq.n	8003fcc <OneWire_Search+0x14>
 8004016:	2001      	movs	r0, #1
		onewire->LastFamilyDiscrepancy = 0;
		search_result = 0;
	}

	return search_result;
}
 8004018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (id_bit != cmp_id_bit)
 800401c:	4580      	cmp	r8, r0
 800401e:	eb04 0307 	add.w	r3, r4, r7
 8004022:	d110      	bne.n	8004046 <OneWire_Search+0x8e>
					if (id_bit_number < onewire->LastDiscrepancy)
 8004024:	79a2      	ldrb	r2, [r4, #6]
 8004026:	4295      	cmp	r5, r2
 8004028:	d212      	bcs.n	8004050 <OneWire_Search+0x98>
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 800402a:	7a5a      	ldrb	r2, [r3, #9]
 800402c:	4216      	tst	r6, r2
 800402e:	bf14      	ite	ne
 8004030:	f04f 0801 	movne.w	r8, #1
 8004034:	f04f 0800 	moveq.w	r8, #0
					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8004038:	f1b8 0f00 	cmp.w	r8, #0
 800403c:	d10e      	bne.n	800405c <OneWire_Search+0xa4>
						if (last_zero < 9) // Check for last discrepancy in family
 800403e:	2d08      	cmp	r5, #8
 8004040:	d800      	bhi.n	8004044 <OneWire_Search+0x8c>
							onewire->LastFamilyDiscrepancy = last_zero;
 8004042:	71e5      	strb	r5, [r4, #7]
 8004044:	46a9      	mov	r9, r5
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8004046:	7a5a      	ldrb	r2, [r3, #9]
 8004048:	ea22 0206 	bic.w	r2, r2, r6
 800404c:	725a      	strb	r2, [r3, #9]
 800404e:	e00b      	b.n	8004068 <OneWire_Search+0xb0>
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8004050:	bf0c      	ite	eq
 8004052:	f04f 0801 	moveq.w	r8, #1
 8004056:	f04f 0800 	movne.w	r8, #0
 800405a:	e7ed      	b.n	8004038 <OneWire_Search+0x80>
 800405c:	f04f 0801 	mov.w	r8, #1
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8004060:	19e2      	adds	r2, r4, r7
 8004062:	7a53      	ldrb	r3, [r2, #9]
 8004064:	4333      	orrs	r3, r6
 8004066:	7253      	strb	r3, [r2, #9]
				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8004068:	4641      	mov	r1, r8
 800406a:	4620      	mov	r0, r4
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 800406c:	0076      	lsls	r6, r6, #1
				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 800406e:	f7ff ff46 	bl	8003efe <OneWire_WriteBit>
				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 8004072:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
					rom_byte_number++; // Next byte number
 8004076:	bf04      	itt	eq
 8004078:	3701      	addeq	r7, #1
 800407a:	b2ff      	uxtbeq	r7, r7
				id_bit_number++; // Next bit search - increase the id
 800407c:	f105 0501 	add.w	r5, r5, #1
					rom_byte_mask = 1; // Reset the mask - first bit
 8004080:	bf08      	it	eq
 8004082:	2601      	moveq	r6, #1
		} while(rom_byte_number < 8);  // Read 8 bytes
 8004084:	2f07      	cmp	r7, #7
				id_bit_number++; // Next bit search - increase the id
 8004086:	b2ed      	uxtb	r5, r5
		} while(rom_byte_number < 8);  // Read 8 bytes
 8004088:	d9ad      	bls.n	8003fe6 <OneWire_Search+0x2e>
 800408a:	e7b8      	b.n	8003ffe <OneWire_Search+0x46>

0800408c <OneWire_First>:
	onewire->LastDiscrepancy = 0;
 800408c:	2200      	movs	r2, #0
//
uint8_t OneWire_First(OneWire_t* onewire)
{
	OneWire_ResetSearch(onewire);

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 800408e:	21f0      	movs	r1, #240	; 0xf0
	onewire->LastDiscrepancy = 0;
 8004090:	7182      	strb	r2, [r0, #6]
	onewire->LastDeviceFlag = 0;
 8004092:	7202      	strb	r2, [r0, #8]
	onewire->LastFamilyDiscrepancy = 0;
 8004094:	71c2      	strb	r2, [r0, #7]
	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8004096:	f7ff bf8f 	b.w	8003fb8 <OneWire_Search>

0800409a <OneWire_Next>:
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 800409a:	21f0      	movs	r1, #240	; 0xf0
 800409c:	f7ff bf8c 	b.w	8003fb8 <OneWire_Search>

080040a0 <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	460c      	mov	r4, r1
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 80040a4:	2155      	movs	r1, #85	; 0x55
{
 80040a6:	4606      	mov	r6, r0
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 80040a8:	f7ff ff65 	bl	8003f76 <OneWire_WriteByte>
 80040ac:	1e65      	subs	r5, r4, #1
 80040ae:	3407      	adds	r4, #7
	
	for (i = 0; i < 8; i++)
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 80040b0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80040b4:	4630      	mov	r0, r6
 80040b6:	f7ff ff5e 	bl	8003f76 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 80040ba:	42a5      	cmp	r5, r4
 80040bc:	d1f8      	bne.n	80040b0 <OneWire_SelectWithPointer+0x10>
	}	
}
 80040be:	bd70      	pop	{r4, r5, r6, pc}

080040c0 <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 80040c0:	f100 0309 	add.w	r3, r0, #9
 80040c4:	3901      	subs	r1, #1
 80040c6:	3011      	adds	r0, #17
	uint8_t i;
	for (i = 0; i < 8; i++) {
		*(firstIndex + i) = onewire->ROM_NO[i];
 80040c8:	f813 2b01 	ldrb.w	r2, [r3], #1
	for (i = 0; i < 8; i++) {
 80040cc:	4283      	cmp	r3, r0
		*(firstIndex + i) = onewire->ROM_NO[i];
 80040ce:	f801 2f01 	strb.w	r2, [r1, #1]!
	for (i = 0; i < 8; i++) {
 80040d2:	d1f9      	bne.n	80040c8 <OneWire_GetFullROM+0x8>
	}
}
 80040d4:	4770      	bx	lr
	...

080040d8 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040d8:	b570      	push	{r4, r5, r6, lr}
 80040da:	4604      	mov	r4, r0
 80040dc:	460e      	mov	r6, r1
 80040de:	4615      	mov	r5, r2
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 80040e0:	480d      	ldr	r0, [pc, #52]	; (8004118 <OneWire_Init+0x40>)
 80040e2:	f7fe fecd 	bl	8002e80 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
	onewire->GPIO_Pin = GPIO_Pin;

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 80040e6:	4620      	mov	r0, r4
	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 80040e8:	6026      	str	r6, [r4, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 80040ea:	80a5      	strh	r5, [r4, #4]
	OneWire_BusOutputDirection(onewire);
 80040ec:	f7ff fed6 	bl	8003e9c <OneWire_BusOutputDirection>
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	88a2      	ldrh	r2, [r4, #4]
	OneWire_OutputHigh(onewire);
	HAL_Delay(100);
 80040f4:	2064      	movs	r0, #100	; 0x64
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 80040f6:	611a      	str	r2, [r3, #16]
	HAL_Delay(100);
 80040f8:	f7fd f99e 	bl	8001438 <HAL_Delay>
	OneWire_OutputLow(onewire);
 80040fc:	4620      	mov	r0, r4
 80040fe:	f7ff fede 	bl	8003ebe <OneWire_OutputLow>
	HAL_Delay(100);
 8004102:	2064      	movs	r0, #100	; 0x64
 8004104:	f7fd f998 	bl	8001438 <HAL_Delay>
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	88a2      	ldrh	r2, [r4, #4]
	OneWire_OutputHigh(onewire);
	HAL_Delay(200);
 800410c:	20c8      	movs	r0, #200	; 0xc8
}
 800410e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8004112:	611a      	str	r2, [r3, #16]
	HAL_Delay(200);
 8004114:	f7fd b990 	b.w	8001438 <HAL_Delay>
 8004118:	20000364 	.word	0x20000364

0800411c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800411c:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <HAL_MspInit+0x3c>)
{
 800411e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	619a      	str	r2, [r3, #24]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	f002 0201 	and.w	r2, r2, #1
 800412e:	9200      	str	r2, [sp, #0]
 8004130:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004138:	61da      	str	r2, [r3, #28]
 800413a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800413c:	4a07      	ldr	r2, [pc, #28]	; (800415c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800413e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004142:	9301      	str	r3, [sp, #4]
 8004144:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004146:	6853      	ldr	r3, [r2, #4]
 8004148:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800414c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004150:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004152:	b002      	add	sp, #8
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40021000 	.word	0x40021000
 800415c:	40010000 	.word	0x40010000

08004160 <NMI_Handler>:
 8004160:	4770      	bx	lr

08004162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004162:	e7fe      	b.n	8004162 <HardFault_Handler>

08004164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004164:	e7fe      	b.n	8004164 <MemManage_Handler>

08004166 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004166:	e7fe      	b.n	8004166 <BusFault_Handler>

08004168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004168:	e7fe      	b.n	8004168 <UsageFault_Handler>

0800416a <SVC_Handler>:
 800416a:	4770      	bx	lr

0800416c <DebugMon_Handler>:
 800416c:	4770      	bx	lr

0800416e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800416e:	4770      	bx	lr

08004170 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004170:	f7fd b950 	b.w	8001414 <HAL_IncTick>

08004174 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004174:	4801      	ldr	r0, [pc, #4]	; (800417c <I2C1_EV_IRQHandler+0x8>)
 8004176:	f7fd bfbb 	b.w	80020f0 <HAL_I2C_EV_IRQHandler>
 800417a:	bf00      	nop
 800417c:	2000026c 	.word	0x2000026c

08004180 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004180:	4801      	ldr	r0, [pc, #4]	; (8004188 <I2C1_ER_IRQHandler+0x8>)
 8004182:	f7fe bb1f 	b.w	80027c4 <HAL_I2C_ER_IRQHandler>
 8004186:	bf00      	nop
 8004188:	2000026c 	.word	0x2000026c

0800418c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800418c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004190:	f7fd bb04 	b.w	800179c <HAL_GPIO_EXTI_IRQHandler>

08004194 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004194:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004196:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <_sbrk+0x2c>)
{
 8004198:	4602      	mov	r2, r0
	if (heap_end == 0)
 800419a:	6819      	ldr	r1, [r3, #0]
 800419c:	b909      	cbnz	r1, 80041a2 <_sbrk+0xe>
		heap_end = &end;
 800419e:	4909      	ldr	r1, [pc, #36]	; (80041c4 <_sbrk+0x30>)
 80041a0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80041a2:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80041a4:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80041a6:	4402      	add	r2, r0
 80041a8:	428a      	cmp	r2, r1
 80041aa:	d906      	bls.n	80041ba <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80041ac:	f000 f934 	bl	8004418 <__errno>
 80041b0:	230c      	movs	r3, #12
 80041b2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295
 80041b8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80041ba:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80041bc:	bd08      	pop	{r3, pc}
 80041be:	bf00      	nop
 80041c0:	200001fc 	.word	0x200001fc
 80041c4:	200003e8 	.word	0x200003e8

080041c8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80041c8:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <SystemInit+0x40>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	f042 0201 	orr.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	4a0d      	ldr	r2, [pc, #52]	; (800420c <SystemInit+0x44>)
 80041d6:	400a      	ands	r2, r1
 80041d8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80041e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80041e4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041ec:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80041f4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80041f6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80041fa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80041fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004200:	4b03      	ldr	r3, [pc, #12]	; (8004210 <SystemInit+0x48>)
 8004202:	609a      	str	r2, [r3, #8]
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
 800420c:	f8ff0000 	.word	0xf8ff0000
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004214:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004216:	2210      	movs	r2, #16
 8004218:	2100      	movs	r1, #0
 800421a:	a802      	add	r0, sp, #8
 800421c:	f000 f926 	bl	800446c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 63;
 8004220:	223f      	movs	r2, #63	; 0x3f
  htim1.Instance = TIM1;
 8004222:	4815      	ldr	r0, [pc, #84]	; (8004278 <MX_TIM1_Init+0x64>)
  htim1.Init.Prescaler = 63;
 8004224:	4915      	ldr	r1, [pc, #84]	; (800427c <MX_TIM1_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004226:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 63;
 8004228:	e880 0006 	stmia.w	r0, {r1, r2}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xFFFF;
 800422c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	9301      	str	r3, [sp, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004234:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 0xFFFF;
 8004236:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004238:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800423a:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800423c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800423e:	f7fe ff1d 	bl	800307c <HAL_TIM_Base_Init>
 8004242:	b108      	cbz	r0, 8004248 <MX_TIM1_Init+0x34>
  {
    Error_Handler();
 8004244:	f7ff fe0e 	bl	8003e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800424c:	a902      	add	r1, sp, #8
 800424e:	480a      	ldr	r0, [pc, #40]	; (8004278 <MX_TIM1_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004250:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004252:	f7fe fe22 	bl	8002e9a <HAL_TIM_ConfigClockSource>
 8004256:	b108      	cbz	r0, 800425c <MX_TIM1_Init+0x48>
  {
    Error_Handler();
 8004258:	f7ff fe04 	bl	8003e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800425c:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800425e:	4669      	mov	r1, sp
 8004260:	4805      	ldr	r0, [pc, #20]	; (8004278 <MX_TIM1_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004262:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004264:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004266:	f7fe ff23 	bl	80030b0 <HAL_TIMEx_MasterConfigSynchronization>
 800426a:	b108      	cbz	r0, 8004270 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800426c:	f7ff fdfa 	bl	8003e64 <Error_Handler>
  }

}
 8004270:	b007      	add	sp, #28
 8004272:	f85d fb04 	ldr.w	pc, [sp], #4
 8004276:	bf00      	nop
 8004278:	20000364 	.word	0x20000364
 800427c:	40012c00 	.word	0x40012c00

08004280 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004280:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004282:	2210      	movs	r2, #16
 8004284:	2100      	movs	r1, #0
 8004286:	a802      	add	r0, sp, #8
 8004288:	f000 f8f0 	bl	800446c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 63;
 800428c:	223f      	movs	r2, #63	; 0x3f
  htim3.Instance = TIM3;
 800428e:	4814      	ldr	r0, [pc, #80]	; (80042e0 <MX_TIM3_Init+0x60>)
  htim3.Init.Prescaler = 63;
 8004290:	4914      	ldr	r1, [pc, #80]	; (80042e4 <MX_TIM3_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004292:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 63;
 8004294:	e880 0006 	stmia.w	r0, {r1, r2}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 0xFFFF;
 8004298:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042a0:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 0xFFFF;
 80042a2:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042a4:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042a6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80042a8:	f7fe fee8 	bl	800307c <HAL_TIM_Base_Init>
 80042ac:	b108      	cbz	r0, 80042b2 <MX_TIM3_Init+0x32>
  {
    Error_Handler();
 80042ae:	f7ff fdd9 	bl	8003e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80042b6:	a902      	add	r1, sp, #8
 80042b8:	4809      	ldr	r0, [pc, #36]	; (80042e0 <MX_TIM3_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042ba:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80042bc:	f7fe fded 	bl	8002e9a <HAL_TIM_ConfigClockSource>
 80042c0:	b108      	cbz	r0, 80042c6 <MX_TIM3_Init+0x46>
  {
    Error_Handler();
 80042c2:	f7ff fdcf 	bl	8003e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042c6:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042c8:	4669      	mov	r1, sp
 80042ca:	4805      	ldr	r0, [pc, #20]	; (80042e0 <MX_TIM3_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042cc:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042ce:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042d0:	f7fe feee 	bl	80030b0 <HAL_TIMEx_MasterConfigSynchronization>
 80042d4:	b108      	cbz	r0, 80042da <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80042d6:	f7ff fdc5 	bl	8003e64 <Error_Handler>
  }

}
 80042da:	b007      	add	sp, #28
 80042dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80042e0:	20000324 	.word	0x20000324
 80042e4:	40000400 	.word	0x40000400

080042e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 80042e8:	6803      	ldr	r3, [r0, #0]
 80042ea:	4a0f      	ldr	r2, [pc, #60]	; (8004328 <HAL_TIM_Base_MspInit+0x40>)
{
 80042ec:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d10b      	bne.n	800430a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042f2:	4b0e      	ldr	r3, [pc, #56]	; (800432c <HAL_TIM_Base_MspInit+0x44>)
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042fa:	619a      	str	r2, [r3, #24]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004306:	b002      	add	sp, #8
 8004308:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM3)
 800430a:	4a09      	ldr	r2, [pc, #36]	; (8004330 <HAL_TIM_Base_MspInit+0x48>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d1fa      	bne.n	8004306 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <HAL_TIM_Base_MspInit+0x44>)
 8004312:	69da      	ldr	r2, [r3, #28]
 8004314:	f042 0202 	orr.w	r2, r2, #2
 8004318:	61da      	str	r2, [r3, #28]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	9301      	str	r3, [sp, #4]
 8004322:	9b01      	ldr	r3, [sp, #4]
}
 8004324:	e7ef      	b.n	8004306 <HAL_TIM_Base_MspInit+0x1e>
 8004326:	bf00      	nop
 8004328:	40012c00 	.word	0x40012c00
 800432c:	40021000 	.word	0x40021000
 8004330:	40000400 	.word	0x40000400

08004334 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004334:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8004336:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart2.Instance = USART2;
 800433a:	480a      	ldr	r0, [pc, #40]	; (8004364 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <MX_USART2_UART_Init+0x34>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800433e:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8004340:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004344:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004346:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004348:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800434a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800434c:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800434e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004350:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004352:	f7fe ff6d 	bl	8003230 <HAL_UART_Init>
 8004356:	b118      	cbz	r0, 8004360 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8004358:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800435c:	f7ff bd82 	b.w	8003e64 <Error_Handler>
 8004360:	bd08      	pop	{r3, pc}
 8004362:	bf00      	nop
 8004364:	200003a4 	.word	0x200003a4
 8004368:	40004400 	.word	0x40004400

0800436c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800436c:	b510      	push	{r4, lr}
 800436e:	4604      	mov	r4, r0
 8004370:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004372:	2210      	movs	r2, #16
 8004374:	2100      	movs	r1, #0
 8004376:	a802      	add	r0, sp, #8
 8004378:	f000 f878 	bl	800446c <memset>
  if(uartHandle->Instance==USART2)
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <HAL_UART_MspInit+0x58>)
 8004380:	429a      	cmp	r2, r3
 8004382:	d11c      	bne.n	80043be <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004384:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8004388:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800438a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 800438c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004390:	61da      	str	r2, [r3, #28]
 8004392:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004394:	480c      	ldr	r0, [pc, #48]	; (80043c8 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004396:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800439a:	9200      	str	r2, [sp, #0]
 800439c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800439e:	699a      	ldr	r2, [r3, #24]
 80043a0:	f042 0204 	orr.w	r2, r2, #4
 80043a4:	619a      	str	r2, [r3, #24]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80043b0:	230c      	movs	r3, #12
 80043b2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b4:	2302      	movs	r3, #2
 80043b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ba:	f7fd f8ff 	bl	80015bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80043be:	b006      	add	sp, #24
 80043c0:	bd10      	pop	{r4, pc}
 80043c2:	bf00      	nop
 80043c4:	40004400 	.word	0x40004400
 80043c8:	40010800 	.word	0x40010800

080043cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80043cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80043ce:	e003      	b.n	80043d8 <LoopCopyDataInit>

080043d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80043d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80043d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80043d6:	3104      	adds	r1, #4

080043d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80043d8:	480a      	ldr	r0, [pc, #40]	; (8004404 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80043dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80043de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80043e0:	d3f6      	bcc.n	80043d0 <CopyDataInit>
  ldr r2, =_sbss
 80043e2:	4a0a      	ldr	r2, [pc, #40]	; (800440c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80043e4:	e002      	b.n	80043ec <LoopFillZerobss>

080043e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80043e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80043e8:	f842 3b04 	str.w	r3, [r2], #4

080043ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80043ec:	4b08      	ldr	r3, [pc, #32]	; (8004410 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80043ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80043f0:	d3f9      	bcc.n	80043e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80043f2:	f7ff fee9 	bl	80041c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043f6:	f000 f815 	bl	8004424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80043fa:	f7ff fce5 	bl	8003dc8 <main>
  bx lr
 80043fe:	4770      	bx	lr
  ldr r3, =_sidata
 8004400:	08006158 	.word	0x08006158
  ldr r0, =_sdata
 8004404:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004408:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 800440c:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8004410:	200003e8 	.word	0x200003e8

08004414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004414:	e7fe      	b.n	8004414 <ADC1_2_IRQHandler>
	...

08004418 <__errno>:
 8004418:	4b01      	ldr	r3, [pc, #4]	; (8004420 <__errno+0x8>)
 800441a:	6818      	ldr	r0, [r3, #0]
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	2000000c 	.word	0x2000000c

08004424 <__libc_init_array>:
 8004424:	b570      	push	{r4, r5, r6, lr}
 8004426:	2500      	movs	r5, #0
 8004428:	4e0c      	ldr	r6, [pc, #48]	; (800445c <__libc_init_array+0x38>)
 800442a:	4c0d      	ldr	r4, [pc, #52]	; (8004460 <__libc_init_array+0x3c>)
 800442c:	1ba4      	subs	r4, r4, r6
 800442e:	10a4      	asrs	r4, r4, #2
 8004430:	42a5      	cmp	r5, r4
 8004432:	d109      	bne.n	8004448 <__libc_init_array+0x24>
 8004434:	f001 fd54 	bl	8005ee0 <_init>
 8004438:	2500      	movs	r5, #0
 800443a:	4e0a      	ldr	r6, [pc, #40]	; (8004464 <__libc_init_array+0x40>)
 800443c:	4c0a      	ldr	r4, [pc, #40]	; (8004468 <__libc_init_array+0x44>)
 800443e:	1ba4      	subs	r4, r4, r6
 8004440:	10a4      	asrs	r4, r4, #2
 8004442:	42a5      	cmp	r5, r4
 8004444:	d105      	bne.n	8004452 <__libc_init_array+0x2e>
 8004446:	bd70      	pop	{r4, r5, r6, pc}
 8004448:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800444c:	4798      	blx	r3
 800444e:	3501      	adds	r5, #1
 8004450:	e7ee      	b.n	8004430 <__libc_init_array+0xc>
 8004452:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004456:	4798      	blx	r3
 8004458:	3501      	adds	r5, #1
 800445a:	e7f2      	b.n	8004442 <__libc_init_array+0x1e>
 800445c:	08006150 	.word	0x08006150
 8004460:	08006150 	.word	0x08006150
 8004464:	08006150 	.word	0x08006150
 8004468:	08006154 	.word	0x08006154

0800446c <memset>:
 800446c:	4603      	mov	r3, r0
 800446e:	4402      	add	r2, r0
 8004470:	4293      	cmp	r3, r2
 8004472:	d100      	bne.n	8004476 <memset+0xa>
 8004474:	4770      	bx	lr
 8004476:	f803 1b01 	strb.w	r1, [r3], #1
 800447a:	e7f9      	b.n	8004470 <memset+0x4>

0800447c <__cvt>:
 800447c:	2b00      	cmp	r3, #0
 800447e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004482:	461e      	mov	r6, r3
 8004484:	bfbb      	ittet	lt
 8004486:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800448a:	461e      	movlt	r6, r3
 800448c:	2300      	movge	r3, #0
 800448e:	232d      	movlt	r3, #45	; 0x2d
 8004490:	b088      	sub	sp, #32
 8004492:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004494:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004496:	f027 0720 	bic.w	r7, r7, #32
 800449a:	2f46      	cmp	r7, #70	; 0x46
 800449c:	4614      	mov	r4, r2
 800449e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80044a0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80044a4:	700b      	strb	r3, [r1, #0]
 80044a6:	d004      	beq.n	80044b2 <__cvt+0x36>
 80044a8:	2f45      	cmp	r7, #69	; 0x45
 80044aa:	d100      	bne.n	80044ae <__cvt+0x32>
 80044ac:	3501      	adds	r5, #1
 80044ae:	2302      	movs	r3, #2
 80044b0:	e000      	b.n	80044b4 <__cvt+0x38>
 80044b2:	2303      	movs	r3, #3
 80044b4:	aa07      	add	r2, sp, #28
 80044b6:	9204      	str	r2, [sp, #16]
 80044b8:	aa06      	add	r2, sp, #24
 80044ba:	9203      	str	r2, [sp, #12]
 80044bc:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 80044c0:	4622      	mov	r2, r4
 80044c2:	4633      	mov	r3, r6
 80044c4:	f000 fba8 	bl	8004c18 <_dtoa_r>
 80044c8:	2f47      	cmp	r7, #71	; 0x47
 80044ca:	4680      	mov	r8, r0
 80044cc:	d102      	bne.n	80044d4 <__cvt+0x58>
 80044ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80044d0:	07db      	lsls	r3, r3, #31
 80044d2:	d526      	bpl.n	8004522 <__cvt+0xa6>
 80044d4:	2f46      	cmp	r7, #70	; 0x46
 80044d6:	eb08 0905 	add.w	r9, r8, r5
 80044da:	d111      	bne.n	8004500 <__cvt+0x84>
 80044dc:	f898 3000 	ldrb.w	r3, [r8]
 80044e0:	2b30      	cmp	r3, #48	; 0x30
 80044e2:	d10a      	bne.n	80044fa <__cvt+0x7e>
 80044e4:	2200      	movs	r2, #0
 80044e6:	2300      	movs	r3, #0
 80044e8:	4620      	mov	r0, r4
 80044ea:	4631      	mov	r1, r6
 80044ec:	f7fc fa58 	bl	80009a0 <__aeabi_dcmpeq>
 80044f0:	b918      	cbnz	r0, 80044fa <__cvt+0x7e>
 80044f2:	f1c5 0501 	rsb	r5, r5, #1
 80044f6:	f8ca 5000 	str.w	r5, [sl]
 80044fa:	f8da 3000 	ldr.w	r3, [sl]
 80044fe:	4499      	add	r9, r3
 8004500:	2200      	movs	r2, #0
 8004502:	2300      	movs	r3, #0
 8004504:	4620      	mov	r0, r4
 8004506:	4631      	mov	r1, r6
 8004508:	f7fc fa4a 	bl	80009a0 <__aeabi_dcmpeq>
 800450c:	b938      	cbnz	r0, 800451e <__cvt+0xa2>
 800450e:	2230      	movs	r2, #48	; 0x30
 8004510:	9b07      	ldr	r3, [sp, #28]
 8004512:	4599      	cmp	r9, r3
 8004514:	d905      	bls.n	8004522 <__cvt+0xa6>
 8004516:	1c59      	adds	r1, r3, #1
 8004518:	9107      	str	r1, [sp, #28]
 800451a:	701a      	strb	r2, [r3, #0]
 800451c:	e7f8      	b.n	8004510 <__cvt+0x94>
 800451e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004522:	4640      	mov	r0, r8
 8004524:	9b07      	ldr	r3, [sp, #28]
 8004526:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004528:	eba3 0308 	sub.w	r3, r3, r8
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	b008      	add	sp, #32
 8004530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004534 <__exponent>:
 8004534:	4603      	mov	r3, r0
 8004536:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004538:	2900      	cmp	r1, #0
 800453a:	f803 2b02 	strb.w	r2, [r3], #2
 800453e:	bfb6      	itet	lt
 8004540:	222d      	movlt	r2, #45	; 0x2d
 8004542:	222b      	movge	r2, #43	; 0x2b
 8004544:	4249      	neglt	r1, r1
 8004546:	2909      	cmp	r1, #9
 8004548:	7042      	strb	r2, [r0, #1]
 800454a:	dd21      	ble.n	8004590 <__exponent+0x5c>
 800454c:	f10d 0207 	add.w	r2, sp, #7
 8004550:	4617      	mov	r7, r2
 8004552:	260a      	movs	r6, #10
 8004554:	fb91 f5f6 	sdiv	r5, r1, r6
 8004558:	fb06 1115 	mls	r1, r6, r5, r1
 800455c:	2d09      	cmp	r5, #9
 800455e:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004562:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004566:	f102 34ff 	add.w	r4, r2, #4294967295
 800456a:	4629      	mov	r1, r5
 800456c:	dc09      	bgt.n	8004582 <__exponent+0x4e>
 800456e:	3130      	adds	r1, #48	; 0x30
 8004570:	3a02      	subs	r2, #2
 8004572:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004576:	42ba      	cmp	r2, r7
 8004578:	461c      	mov	r4, r3
 800457a:	d304      	bcc.n	8004586 <__exponent+0x52>
 800457c:	1a20      	subs	r0, r4, r0
 800457e:	b003      	add	sp, #12
 8004580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004582:	4622      	mov	r2, r4
 8004584:	e7e6      	b.n	8004554 <__exponent+0x20>
 8004586:	f812 1b01 	ldrb.w	r1, [r2], #1
 800458a:	f803 1b01 	strb.w	r1, [r3], #1
 800458e:	e7f2      	b.n	8004576 <__exponent+0x42>
 8004590:	2230      	movs	r2, #48	; 0x30
 8004592:	461c      	mov	r4, r3
 8004594:	4411      	add	r1, r2
 8004596:	f804 2b02 	strb.w	r2, [r4], #2
 800459a:	7059      	strb	r1, [r3, #1]
 800459c:	e7ee      	b.n	800457c <__exponent+0x48>
	...

080045a0 <_printf_float>:
 80045a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a4:	b091      	sub	sp, #68	; 0x44
 80045a6:	460c      	mov	r4, r1
 80045a8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80045aa:	4693      	mov	fp, r2
 80045ac:	461e      	mov	r6, r3
 80045ae:	4605      	mov	r5, r0
 80045b0:	f001 f906 	bl	80057c0 <_localeconv_r>
 80045b4:	6803      	ldr	r3, [r0, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	9309      	str	r3, [sp, #36]	; 0x24
 80045ba:	f7fb fdc9 	bl	8000150 <strlen>
 80045be:	2300      	movs	r3, #0
 80045c0:	930e      	str	r3, [sp, #56]	; 0x38
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	900a      	str	r0, [sp, #40]	; 0x28
 80045c6:	3307      	adds	r3, #7
 80045c8:	f023 0307 	bic.w	r3, r3, #7
 80045cc:	f103 0208 	add.w	r2, r3, #8
 80045d0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80045d4:	f8d4 a000 	ldr.w	sl, [r4]
 80045d8:	603a      	str	r2, [r7, #0]
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80045e2:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 80045e6:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 80045e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80045ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80045ee:	f04f 32ff 	mov.w	r2, #4294967295
 80045f2:	4ba6      	ldr	r3, [pc, #664]	; (800488c <_printf_float+0x2ec>)
 80045f4:	4638      	mov	r0, r7
 80045f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045f8:	f7fc fa04 	bl	8000a04 <__aeabi_dcmpun>
 80045fc:	2800      	cmp	r0, #0
 80045fe:	f040 81f7 	bne.w	80049f0 <_printf_float+0x450>
 8004602:	f04f 32ff 	mov.w	r2, #4294967295
 8004606:	4ba1      	ldr	r3, [pc, #644]	; (800488c <_printf_float+0x2ec>)
 8004608:	4638      	mov	r0, r7
 800460a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800460c:	f7fc f9dc 	bl	80009c8 <__aeabi_dcmple>
 8004610:	2800      	cmp	r0, #0
 8004612:	f040 81ed 	bne.w	80049f0 <_printf_float+0x450>
 8004616:	2200      	movs	r2, #0
 8004618:	2300      	movs	r3, #0
 800461a:	4638      	mov	r0, r7
 800461c:	4649      	mov	r1, r9
 800461e:	f7fc f9c9 	bl	80009b4 <__aeabi_dcmplt>
 8004622:	b110      	cbz	r0, 800462a <_printf_float+0x8a>
 8004624:	232d      	movs	r3, #45	; 0x2d
 8004626:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800462a:	4b99      	ldr	r3, [pc, #612]	; (8004890 <_printf_float+0x2f0>)
 800462c:	4f99      	ldr	r7, [pc, #612]	; (8004894 <_printf_float+0x2f4>)
 800462e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004632:	bf98      	it	ls
 8004634:	461f      	movls	r7, r3
 8004636:	2303      	movs	r3, #3
 8004638:	f04f 0900 	mov.w	r9, #0
 800463c:	6123      	str	r3, [r4, #16]
 800463e:	f02a 0304 	bic.w	r3, sl, #4
 8004642:	6023      	str	r3, [r4, #0]
 8004644:	9600      	str	r6, [sp, #0]
 8004646:	465b      	mov	r3, fp
 8004648:	aa0f      	add	r2, sp, #60	; 0x3c
 800464a:	4621      	mov	r1, r4
 800464c:	4628      	mov	r0, r5
 800464e:	f000 f9df 	bl	8004a10 <_printf_common>
 8004652:	3001      	adds	r0, #1
 8004654:	f040 809a 	bne.w	800478c <_printf_float+0x1ec>
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	b011      	add	sp, #68	; 0x44
 800465e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004662:	6862      	ldr	r2, [r4, #4]
 8004664:	a80e      	add	r0, sp, #56	; 0x38
 8004666:	1c53      	adds	r3, r2, #1
 8004668:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 800466c:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 8004670:	d141      	bne.n	80046f6 <_printf_float+0x156>
 8004672:	2206      	movs	r2, #6
 8004674:	6062      	str	r2, [r4, #4]
 8004676:	2100      	movs	r1, #0
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	9301      	str	r3, [sp, #4]
 800467c:	6863      	ldr	r3, [r4, #4]
 800467e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004682:	9005      	str	r0, [sp, #20]
 8004684:	9202      	str	r2, [sp, #8]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	463a      	mov	r2, r7
 800468a:	464b      	mov	r3, r9
 800468c:	9106      	str	r1, [sp, #24]
 800468e:	f8cd 8010 	str.w	r8, [sp, #16]
 8004692:	f8cd e00c 	str.w	lr, [sp, #12]
 8004696:	4628      	mov	r0, r5
 8004698:	f7ff fef0 	bl	800447c <__cvt>
 800469c:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80046a0:	2b47      	cmp	r3, #71	; 0x47
 80046a2:	4607      	mov	r7, r0
 80046a4:	d109      	bne.n	80046ba <_printf_float+0x11a>
 80046a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046a8:	1cd8      	adds	r0, r3, #3
 80046aa:	db02      	blt.n	80046b2 <_printf_float+0x112>
 80046ac:	6862      	ldr	r2, [r4, #4]
 80046ae:	4293      	cmp	r3, r2
 80046b0:	dd59      	ble.n	8004766 <_printf_float+0x1c6>
 80046b2:	f1a8 0802 	sub.w	r8, r8, #2
 80046b6:	fa5f f888 	uxtb.w	r8, r8
 80046ba:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80046be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80046c0:	d836      	bhi.n	8004730 <_printf_float+0x190>
 80046c2:	3901      	subs	r1, #1
 80046c4:	4642      	mov	r2, r8
 80046c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80046ca:	910d      	str	r1, [sp, #52]	; 0x34
 80046cc:	f7ff ff32 	bl	8004534 <__exponent>
 80046d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046d2:	4681      	mov	r9, r0
 80046d4:	1883      	adds	r3, r0, r2
 80046d6:	2a01      	cmp	r2, #1
 80046d8:	6123      	str	r3, [r4, #16]
 80046da:	dc02      	bgt.n	80046e2 <_printf_float+0x142>
 80046dc:	6822      	ldr	r2, [r4, #0]
 80046de:	07d1      	lsls	r1, r2, #31
 80046e0:	d501      	bpl.n	80046e6 <_printf_float+0x146>
 80046e2:	3301      	adds	r3, #1
 80046e4:	6123      	str	r3, [r4, #16]
 80046e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0aa      	beq.n	8004644 <_printf_float+0xa4>
 80046ee:	232d      	movs	r3, #45	; 0x2d
 80046f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f4:	e7a6      	b.n	8004644 <_printf_float+0xa4>
 80046f6:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80046fa:	d002      	beq.n	8004702 <_printf_float+0x162>
 80046fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004700:	d1b9      	bne.n	8004676 <_printf_float+0xd6>
 8004702:	b19a      	cbz	r2, 800472c <_printf_float+0x18c>
 8004704:	2100      	movs	r1, #0
 8004706:	9106      	str	r1, [sp, #24]
 8004708:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800470c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004710:	6023      	str	r3, [r4, #0]
 8004712:	9005      	str	r0, [sp, #20]
 8004714:	463a      	mov	r2, r7
 8004716:	f8cd 8010 	str.w	r8, [sp, #16]
 800471a:	f8cd e00c 	str.w	lr, [sp, #12]
 800471e:	9102      	str	r1, [sp, #8]
 8004720:	464b      	mov	r3, r9
 8004722:	4628      	mov	r0, r5
 8004724:	f7ff feaa 	bl	800447c <__cvt>
 8004728:	4607      	mov	r7, r0
 800472a:	e7bc      	b.n	80046a6 <_printf_float+0x106>
 800472c:	2201      	movs	r2, #1
 800472e:	e7a1      	b.n	8004674 <_printf_float+0xd4>
 8004730:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004734:	d119      	bne.n	800476a <_printf_float+0x1ca>
 8004736:	2900      	cmp	r1, #0
 8004738:	6863      	ldr	r3, [r4, #4]
 800473a:	dd0c      	ble.n	8004756 <_printf_float+0x1b6>
 800473c:	6121      	str	r1, [r4, #16]
 800473e:	b913      	cbnz	r3, 8004746 <_printf_float+0x1a6>
 8004740:	6822      	ldr	r2, [r4, #0]
 8004742:	07d2      	lsls	r2, r2, #31
 8004744:	d502      	bpl.n	800474c <_printf_float+0x1ac>
 8004746:	3301      	adds	r3, #1
 8004748:	440b      	add	r3, r1
 800474a:	6123      	str	r3, [r4, #16]
 800474c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800474e:	f04f 0900 	mov.w	r9, #0
 8004752:	65a3      	str	r3, [r4, #88]	; 0x58
 8004754:	e7c7      	b.n	80046e6 <_printf_float+0x146>
 8004756:	b913      	cbnz	r3, 800475e <_printf_float+0x1be>
 8004758:	6822      	ldr	r2, [r4, #0]
 800475a:	07d0      	lsls	r0, r2, #31
 800475c:	d501      	bpl.n	8004762 <_printf_float+0x1c2>
 800475e:	3302      	adds	r3, #2
 8004760:	e7f3      	b.n	800474a <_printf_float+0x1aa>
 8004762:	2301      	movs	r3, #1
 8004764:	e7f1      	b.n	800474a <_printf_float+0x1aa>
 8004766:	f04f 0867 	mov.w	r8, #103	; 0x67
 800476a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800476c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800476e:	4293      	cmp	r3, r2
 8004770:	db05      	blt.n	800477e <_printf_float+0x1de>
 8004772:	6822      	ldr	r2, [r4, #0]
 8004774:	6123      	str	r3, [r4, #16]
 8004776:	07d1      	lsls	r1, r2, #31
 8004778:	d5e8      	bpl.n	800474c <_printf_float+0x1ac>
 800477a:	3301      	adds	r3, #1
 800477c:	e7e5      	b.n	800474a <_printf_float+0x1aa>
 800477e:	2b00      	cmp	r3, #0
 8004780:	bfcc      	ite	gt
 8004782:	2301      	movgt	r3, #1
 8004784:	f1c3 0302 	rsble	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	e7de      	b.n	800474a <_printf_float+0x1aa>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	055a      	lsls	r2, r3, #21
 8004790:	d407      	bmi.n	80047a2 <_printf_float+0x202>
 8004792:	6923      	ldr	r3, [r4, #16]
 8004794:	463a      	mov	r2, r7
 8004796:	4659      	mov	r1, fp
 8004798:	4628      	mov	r0, r5
 800479a:	47b0      	blx	r6
 800479c:	3001      	adds	r0, #1
 800479e:	d12a      	bne.n	80047f6 <_printf_float+0x256>
 80047a0:	e75a      	b.n	8004658 <_printf_float+0xb8>
 80047a2:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80047a6:	f240 80dc 	bls.w	8004962 <_printf_float+0x3c2>
 80047aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047ae:	2200      	movs	r2, #0
 80047b0:	2300      	movs	r3, #0
 80047b2:	f7fc f8f5 	bl	80009a0 <__aeabi_dcmpeq>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d039      	beq.n	800482e <_printf_float+0x28e>
 80047ba:	2301      	movs	r3, #1
 80047bc:	4a36      	ldr	r2, [pc, #216]	; (8004898 <_printf_float+0x2f8>)
 80047be:	4659      	mov	r1, fp
 80047c0:	4628      	mov	r0, r5
 80047c2:	47b0      	blx	r6
 80047c4:	3001      	adds	r0, #1
 80047c6:	f43f af47 	beq.w	8004658 <_printf_float+0xb8>
 80047ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80047ce:	429a      	cmp	r2, r3
 80047d0:	db02      	blt.n	80047d8 <_printf_float+0x238>
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	07d8      	lsls	r0, r3, #31
 80047d6:	d50e      	bpl.n	80047f6 <_printf_float+0x256>
 80047d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047dc:	4659      	mov	r1, fp
 80047de:	4628      	mov	r0, r5
 80047e0:	47b0      	blx	r6
 80047e2:	3001      	adds	r0, #1
 80047e4:	f43f af38 	beq.w	8004658 <_printf_float+0xb8>
 80047e8:	2700      	movs	r7, #0
 80047ea:	f104 081a 	add.w	r8, r4, #26
 80047ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047f0:	3b01      	subs	r3, #1
 80047f2:	429f      	cmp	r7, r3
 80047f4:	db11      	blt.n	800481a <_printf_float+0x27a>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	079f      	lsls	r7, r3, #30
 80047fa:	d508      	bpl.n	800480e <_printf_float+0x26e>
 80047fc:	2700      	movs	r7, #0
 80047fe:	f104 0819 	add.w	r8, r4, #25
 8004802:	68e3      	ldr	r3, [r4, #12]
 8004804:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	429f      	cmp	r7, r3
 800480a:	f2c0 80e7 	blt.w	80049dc <_printf_float+0x43c>
 800480e:	68e0      	ldr	r0, [r4, #12]
 8004810:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004812:	4298      	cmp	r0, r3
 8004814:	bfb8      	it	lt
 8004816:	4618      	movlt	r0, r3
 8004818:	e720      	b.n	800465c <_printf_float+0xbc>
 800481a:	2301      	movs	r3, #1
 800481c:	4642      	mov	r2, r8
 800481e:	4659      	mov	r1, fp
 8004820:	4628      	mov	r0, r5
 8004822:	47b0      	blx	r6
 8004824:	3001      	adds	r0, #1
 8004826:	f43f af17 	beq.w	8004658 <_printf_float+0xb8>
 800482a:	3701      	adds	r7, #1
 800482c:	e7df      	b.n	80047ee <_printf_float+0x24e>
 800482e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004830:	2b00      	cmp	r3, #0
 8004832:	dc33      	bgt.n	800489c <_printf_float+0x2fc>
 8004834:	2301      	movs	r3, #1
 8004836:	4a18      	ldr	r2, [pc, #96]	; (8004898 <_printf_float+0x2f8>)
 8004838:	4659      	mov	r1, fp
 800483a:	4628      	mov	r0, r5
 800483c:	47b0      	blx	r6
 800483e:	3001      	adds	r0, #1
 8004840:	f43f af0a 	beq.w	8004658 <_printf_float+0xb8>
 8004844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004846:	b923      	cbnz	r3, 8004852 <_printf_float+0x2b2>
 8004848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800484a:	b913      	cbnz	r3, 8004852 <_printf_float+0x2b2>
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	07d9      	lsls	r1, r3, #31
 8004850:	d5d1      	bpl.n	80047f6 <_printf_float+0x256>
 8004852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004856:	4659      	mov	r1, fp
 8004858:	4628      	mov	r0, r5
 800485a:	47b0      	blx	r6
 800485c:	3001      	adds	r0, #1
 800485e:	f43f aefb 	beq.w	8004658 <_printf_float+0xb8>
 8004862:	f04f 0800 	mov.w	r8, #0
 8004866:	f104 091a 	add.w	r9, r4, #26
 800486a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800486c:	425b      	negs	r3, r3
 800486e:	4598      	cmp	r8, r3
 8004870:	db01      	blt.n	8004876 <_printf_float+0x2d6>
 8004872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004874:	e78e      	b.n	8004794 <_printf_float+0x1f4>
 8004876:	2301      	movs	r3, #1
 8004878:	464a      	mov	r2, r9
 800487a:	4659      	mov	r1, fp
 800487c:	4628      	mov	r0, r5
 800487e:	47b0      	blx	r6
 8004880:	3001      	adds	r0, #1
 8004882:	f43f aee9 	beq.w	8004658 <_printf_float+0xb8>
 8004886:	f108 0801 	add.w	r8, r8, #1
 800488a:	e7ee      	b.n	800486a <_printf_float+0x2ca>
 800488c:	7fefffff 	.word	0x7fefffff
 8004890:	08005f20 	.word	0x08005f20
 8004894:	08005f24 	.word	0x08005f24
 8004898:	08005f30 	.word	0x08005f30
 800489c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800489e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048a0:	429a      	cmp	r2, r3
 80048a2:	bfa8      	it	ge
 80048a4:	461a      	movge	r2, r3
 80048a6:	2a00      	cmp	r2, #0
 80048a8:	4690      	mov	r8, r2
 80048aa:	dc36      	bgt.n	800491a <_printf_float+0x37a>
 80048ac:	f04f 0a00 	mov.w	sl, #0
 80048b0:	f104 031a 	add.w	r3, r4, #26
 80048b4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80048b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80048ba:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80048be:	eba9 0308 	sub.w	r3, r9, r8
 80048c2:	459a      	cmp	sl, r3
 80048c4:	db31      	blt.n	800492a <_printf_float+0x38a>
 80048c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80048ca:	429a      	cmp	r2, r3
 80048cc:	db38      	blt.n	8004940 <_printf_float+0x3a0>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	07da      	lsls	r2, r3, #31
 80048d2:	d435      	bmi.n	8004940 <_printf_float+0x3a0>
 80048d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80048d8:	eba3 0209 	sub.w	r2, r3, r9
 80048dc:	eba3 0801 	sub.w	r8, r3, r1
 80048e0:	4590      	cmp	r8, r2
 80048e2:	bfa8      	it	ge
 80048e4:	4690      	movge	r8, r2
 80048e6:	f1b8 0f00 	cmp.w	r8, #0
 80048ea:	dc31      	bgt.n	8004950 <_printf_float+0x3b0>
 80048ec:	2700      	movs	r7, #0
 80048ee:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80048f2:	f104 091a 	add.w	r9, r4, #26
 80048f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80048f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	eba3 0308 	sub.w	r3, r3, r8
 8004900:	429f      	cmp	r7, r3
 8004902:	f6bf af78 	bge.w	80047f6 <_printf_float+0x256>
 8004906:	2301      	movs	r3, #1
 8004908:	464a      	mov	r2, r9
 800490a:	4659      	mov	r1, fp
 800490c:	4628      	mov	r0, r5
 800490e:	47b0      	blx	r6
 8004910:	3001      	adds	r0, #1
 8004912:	f43f aea1 	beq.w	8004658 <_printf_float+0xb8>
 8004916:	3701      	adds	r7, #1
 8004918:	e7ed      	b.n	80048f6 <_printf_float+0x356>
 800491a:	4613      	mov	r3, r2
 800491c:	4659      	mov	r1, fp
 800491e:	463a      	mov	r2, r7
 8004920:	4628      	mov	r0, r5
 8004922:	47b0      	blx	r6
 8004924:	3001      	adds	r0, #1
 8004926:	d1c1      	bne.n	80048ac <_printf_float+0x30c>
 8004928:	e696      	b.n	8004658 <_printf_float+0xb8>
 800492a:	2301      	movs	r3, #1
 800492c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800492e:	4659      	mov	r1, fp
 8004930:	4628      	mov	r0, r5
 8004932:	47b0      	blx	r6
 8004934:	3001      	adds	r0, #1
 8004936:	f43f ae8f 	beq.w	8004658 <_printf_float+0xb8>
 800493a:	f10a 0a01 	add.w	sl, sl, #1
 800493e:	e7bc      	b.n	80048ba <_printf_float+0x31a>
 8004940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004944:	4659      	mov	r1, fp
 8004946:	4628      	mov	r0, r5
 8004948:	47b0      	blx	r6
 800494a:	3001      	adds	r0, #1
 800494c:	d1c2      	bne.n	80048d4 <_printf_float+0x334>
 800494e:	e683      	b.n	8004658 <_printf_float+0xb8>
 8004950:	4643      	mov	r3, r8
 8004952:	eb07 0209 	add.w	r2, r7, r9
 8004956:	4659      	mov	r1, fp
 8004958:	4628      	mov	r0, r5
 800495a:	47b0      	blx	r6
 800495c:	3001      	adds	r0, #1
 800495e:	d1c5      	bne.n	80048ec <_printf_float+0x34c>
 8004960:	e67a      	b.n	8004658 <_printf_float+0xb8>
 8004962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004964:	2a01      	cmp	r2, #1
 8004966:	dc01      	bgt.n	800496c <_printf_float+0x3cc>
 8004968:	07db      	lsls	r3, r3, #31
 800496a:	d534      	bpl.n	80049d6 <_printf_float+0x436>
 800496c:	2301      	movs	r3, #1
 800496e:	463a      	mov	r2, r7
 8004970:	4659      	mov	r1, fp
 8004972:	4628      	mov	r0, r5
 8004974:	47b0      	blx	r6
 8004976:	3001      	adds	r0, #1
 8004978:	f43f ae6e 	beq.w	8004658 <_printf_float+0xb8>
 800497c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800497e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004980:	4659      	mov	r1, fp
 8004982:	4628      	mov	r0, r5
 8004984:	47b0      	blx	r6
 8004986:	3001      	adds	r0, #1
 8004988:	f43f ae66 	beq.w	8004658 <_printf_float+0xb8>
 800498c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004990:	2200      	movs	r2, #0
 8004992:	2300      	movs	r3, #0
 8004994:	f7fc f804 	bl	80009a0 <__aeabi_dcmpeq>
 8004998:	b150      	cbz	r0, 80049b0 <_printf_float+0x410>
 800499a:	2700      	movs	r7, #0
 800499c:	f104 081a 	add.w	r8, r4, #26
 80049a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049a2:	3b01      	subs	r3, #1
 80049a4:	429f      	cmp	r7, r3
 80049a6:	db0c      	blt.n	80049c2 <_printf_float+0x422>
 80049a8:	464b      	mov	r3, r9
 80049aa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049ae:	e6f2      	b.n	8004796 <_printf_float+0x1f6>
 80049b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049b2:	1c7a      	adds	r2, r7, #1
 80049b4:	3b01      	subs	r3, #1
 80049b6:	4659      	mov	r1, fp
 80049b8:	4628      	mov	r0, r5
 80049ba:	47b0      	blx	r6
 80049bc:	3001      	adds	r0, #1
 80049be:	d1f3      	bne.n	80049a8 <_printf_float+0x408>
 80049c0:	e64a      	b.n	8004658 <_printf_float+0xb8>
 80049c2:	2301      	movs	r3, #1
 80049c4:	4642      	mov	r2, r8
 80049c6:	4659      	mov	r1, fp
 80049c8:	4628      	mov	r0, r5
 80049ca:	47b0      	blx	r6
 80049cc:	3001      	adds	r0, #1
 80049ce:	f43f ae43 	beq.w	8004658 <_printf_float+0xb8>
 80049d2:	3701      	adds	r7, #1
 80049d4:	e7e4      	b.n	80049a0 <_printf_float+0x400>
 80049d6:	2301      	movs	r3, #1
 80049d8:	463a      	mov	r2, r7
 80049da:	e7ec      	b.n	80049b6 <_printf_float+0x416>
 80049dc:	2301      	movs	r3, #1
 80049de:	4642      	mov	r2, r8
 80049e0:	4659      	mov	r1, fp
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b0      	blx	r6
 80049e6:	3001      	adds	r0, #1
 80049e8:	f43f ae36 	beq.w	8004658 <_printf_float+0xb8>
 80049ec:	3701      	adds	r7, #1
 80049ee:	e708      	b.n	8004802 <_printf_float+0x262>
 80049f0:	463a      	mov	r2, r7
 80049f2:	464b      	mov	r3, r9
 80049f4:	4638      	mov	r0, r7
 80049f6:	4649      	mov	r1, r9
 80049f8:	f7fc f804 	bl	8000a04 <__aeabi_dcmpun>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	f43f ae30 	beq.w	8004662 <_printf_float+0xc2>
 8004a02:	4b01      	ldr	r3, [pc, #4]	; (8004a08 <_printf_float+0x468>)
 8004a04:	4f01      	ldr	r7, [pc, #4]	; (8004a0c <_printf_float+0x46c>)
 8004a06:	e612      	b.n	800462e <_printf_float+0x8e>
 8004a08:	08005f28 	.word	0x08005f28
 8004a0c:	08005f2c 	.word	0x08005f2c

08004a10 <_printf_common>:
 8004a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a14:	4691      	mov	r9, r2
 8004a16:	461f      	mov	r7, r3
 8004a18:	688a      	ldr	r2, [r1, #8]
 8004a1a:	690b      	ldr	r3, [r1, #16]
 8004a1c:	4606      	mov	r6, r0
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	bfb8      	it	lt
 8004a22:	4613      	movlt	r3, r2
 8004a24:	f8c9 3000 	str.w	r3, [r9]
 8004a28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a32:	b112      	cbz	r2, 8004a3a <_printf_common+0x2a>
 8004a34:	3301      	adds	r3, #1
 8004a36:	f8c9 3000 	str.w	r3, [r9]
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	0699      	lsls	r1, r3, #26
 8004a3e:	bf42      	ittt	mi
 8004a40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a44:	3302      	addmi	r3, #2
 8004a46:	f8c9 3000 	strmi.w	r3, [r9]
 8004a4a:	6825      	ldr	r5, [r4, #0]
 8004a4c:	f015 0506 	ands.w	r5, r5, #6
 8004a50:	d107      	bne.n	8004a62 <_printf_common+0x52>
 8004a52:	f104 0a19 	add.w	sl, r4, #25
 8004a56:	68e3      	ldr	r3, [r4, #12]
 8004a58:	f8d9 2000 	ldr.w	r2, [r9]
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	429d      	cmp	r5, r3
 8004a60:	db2a      	blt.n	8004ab8 <_printf_common+0xa8>
 8004a62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a66:	6822      	ldr	r2, [r4, #0]
 8004a68:	3300      	adds	r3, #0
 8004a6a:	bf18      	it	ne
 8004a6c:	2301      	movne	r3, #1
 8004a6e:	0692      	lsls	r2, r2, #26
 8004a70:	d42f      	bmi.n	8004ad2 <_printf_common+0xc2>
 8004a72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a76:	4639      	mov	r1, r7
 8004a78:	4630      	mov	r0, r6
 8004a7a:	47c0      	blx	r8
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d022      	beq.n	8004ac6 <_printf_common+0xb6>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	68e5      	ldr	r5, [r4, #12]
 8004a84:	f003 0306 	and.w	r3, r3, #6
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	bf18      	it	ne
 8004a8c:	2500      	movne	r5, #0
 8004a8e:	f8d9 2000 	ldr.w	r2, [r9]
 8004a92:	f04f 0900 	mov.w	r9, #0
 8004a96:	bf08      	it	eq
 8004a98:	1aad      	subeq	r5, r5, r2
 8004a9a:	68a3      	ldr	r3, [r4, #8]
 8004a9c:	6922      	ldr	r2, [r4, #16]
 8004a9e:	bf08      	it	eq
 8004aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	bfc4      	itt	gt
 8004aa8:	1a9b      	subgt	r3, r3, r2
 8004aaa:	18ed      	addgt	r5, r5, r3
 8004aac:	341a      	adds	r4, #26
 8004aae:	454d      	cmp	r5, r9
 8004ab0:	d11b      	bne.n	8004aea <_printf_common+0xda>
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab8:	2301      	movs	r3, #1
 8004aba:	4652      	mov	r2, sl
 8004abc:	4639      	mov	r1, r7
 8004abe:	4630      	mov	r0, r6
 8004ac0:	47c0      	blx	r8
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d103      	bne.n	8004ace <_printf_common+0xbe>
 8004ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ace:	3501      	adds	r5, #1
 8004ad0:	e7c1      	b.n	8004a56 <_printf_common+0x46>
 8004ad2:	2030      	movs	r0, #48	; 0x30
 8004ad4:	18e1      	adds	r1, r4, r3
 8004ad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ae0:	4422      	add	r2, r4
 8004ae2:	3302      	adds	r3, #2
 8004ae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ae8:	e7c3      	b.n	8004a72 <_printf_common+0x62>
 8004aea:	2301      	movs	r3, #1
 8004aec:	4622      	mov	r2, r4
 8004aee:	4639      	mov	r1, r7
 8004af0:	4630      	mov	r0, r6
 8004af2:	47c0      	blx	r8
 8004af4:	3001      	adds	r0, #1
 8004af6:	d0e6      	beq.n	8004ac6 <_printf_common+0xb6>
 8004af8:	f109 0901 	add.w	r9, r9, #1
 8004afc:	e7d7      	b.n	8004aae <_printf_common+0x9e>

08004afe <quorem>:
 8004afe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b02:	6903      	ldr	r3, [r0, #16]
 8004b04:	690c      	ldr	r4, [r1, #16]
 8004b06:	4680      	mov	r8, r0
 8004b08:	429c      	cmp	r4, r3
 8004b0a:	f300 8082 	bgt.w	8004c12 <quorem+0x114>
 8004b0e:	3c01      	subs	r4, #1
 8004b10:	f101 0714 	add.w	r7, r1, #20
 8004b14:	f100 0614 	add.w	r6, r0, #20
 8004b18:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004b1c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004b20:	3501      	adds	r5, #1
 8004b22:	fbb0 f5f5 	udiv	r5, r0, r5
 8004b26:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004b2a:	eb06 030e 	add.w	r3, r6, lr
 8004b2e:	eb07 090e 	add.w	r9, r7, lr
 8004b32:	9301      	str	r3, [sp, #4]
 8004b34:	b38d      	cbz	r5, 8004b9a <quorem+0x9c>
 8004b36:	f04f 0a00 	mov.w	sl, #0
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	46b4      	mov	ip, r6
 8004b3e:	46d3      	mov	fp, sl
 8004b40:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b44:	b293      	uxth	r3, r2
 8004b46:	fb05 a303 	mla	r3, r5, r3, sl
 8004b4a:	0c12      	lsrs	r2, r2, #16
 8004b4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b50:	fb05 a202 	mla	r2, r5, r2, sl
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	ebab 0303 	sub.w	r3, fp, r3
 8004b5a:	f8bc b000 	ldrh.w	fp, [ip]
 8004b5e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004b62:	445b      	add	r3, fp
 8004b64:	fa1f fb82 	uxth.w	fp, r2
 8004b68:	f8dc 2000 	ldr.w	r2, [ip]
 8004b6c:	4581      	cmp	r9, r0
 8004b6e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004b72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b7c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004b80:	f84c 3b04 	str.w	r3, [ip], #4
 8004b84:	d2dc      	bcs.n	8004b40 <quorem+0x42>
 8004b86:	f856 300e 	ldr.w	r3, [r6, lr]
 8004b8a:	b933      	cbnz	r3, 8004b9a <quorem+0x9c>
 8004b8c:	9b01      	ldr	r3, [sp, #4]
 8004b8e:	3b04      	subs	r3, #4
 8004b90:	429e      	cmp	r6, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	d331      	bcc.n	8004bfa <quorem+0xfc>
 8004b96:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b9a:	4640      	mov	r0, r8
 8004b9c:	f001 f839 	bl	8005c12 <__mcmp>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	db26      	blt.n	8004bf2 <quorem+0xf4>
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	f04f 0e00 	mov.w	lr, #0
 8004baa:	3501      	adds	r5, #1
 8004bac:	f857 1b04 	ldr.w	r1, [r7], #4
 8004bb0:	f8d0 c000 	ldr.w	ip, [r0]
 8004bb4:	b28b      	uxth	r3, r1
 8004bb6:	ebae 0303 	sub.w	r3, lr, r3
 8004bba:	fa1f f28c 	uxth.w	r2, ip
 8004bbe:	4413      	add	r3, r2
 8004bc0:	0c0a      	lsrs	r2, r1, #16
 8004bc2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004bc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bd0:	45b9      	cmp	r9, r7
 8004bd2:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004bd6:	f840 3b04 	str.w	r3, [r0], #4
 8004bda:	d2e7      	bcs.n	8004bac <quorem+0xae>
 8004bdc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004be0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004be4:	b92a      	cbnz	r2, 8004bf2 <quorem+0xf4>
 8004be6:	3b04      	subs	r3, #4
 8004be8:	429e      	cmp	r6, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	d30b      	bcc.n	8004c06 <quorem+0x108>
 8004bee:	f8c8 4010 	str.w	r4, [r8, #16]
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	b003      	add	sp, #12
 8004bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	3b04      	subs	r3, #4
 8004bfe:	2a00      	cmp	r2, #0
 8004c00:	d1c9      	bne.n	8004b96 <quorem+0x98>
 8004c02:	3c01      	subs	r4, #1
 8004c04:	e7c4      	b.n	8004b90 <quorem+0x92>
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	3b04      	subs	r3, #4
 8004c0a:	2a00      	cmp	r2, #0
 8004c0c:	d1ef      	bne.n	8004bee <quorem+0xf0>
 8004c0e:	3c01      	subs	r4, #1
 8004c10:	e7ea      	b.n	8004be8 <quorem+0xea>
 8004c12:	2000      	movs	r0, #0
 8004c14:	e7ee      	b.n	8004bf4 <quorem+0xf6>
	...

08004c18 <_dtoa_r>:
 8004c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004c1e:	b095      	sub	sp, #84	; 0x54
 8004c20:	4604      	mov	r4, r0
 8004c22:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8004c24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c28:	b93e      	cbnz	r6, 8004c3a <_dtoa_r+0x22>
 8004c2a:	2010      	movs	r0, #16
 8004c2c:	f000 fdd6 	bl	80057dc <malloc>
 8004c30:	6260      	str	r0, [r4, #36]	; 0x24
 8004c32:	6046      	str	r6, [r0, #4]
 8004c34:	6086      	str	r6, [r0, #8]
 8004c36:	6006      	str	r6, [r0, #0]
 8004c38:	60c6      	str	r6, [r0, #12]
 8004c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c3c:	6819      	ldr	r1, [r3, #0]
 8004c3e:	b151      	cbz	r1, 8004c56 <_dtoa_r+0x3e>
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	2301      	movs	r3, #1
 8004c44:	4093      	lsls	r3, r2
 8004c46:	604a      	str	r2, [r1, #4]
 8004c48:	608b      	str	r3, [r1, #8]
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f000 fe0d 	bl	800586a <_Bfree>
 8004c50:	2200      	movs	r2, #0
 8004c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	9b03      	ldr	r3, [sp, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bfb7      	itett	lt
 8004c5c:	2301      	movlt	r3, #1
 8004c5e:	2300      	movge	r3, #0
 8004c60:	602b      	strlt	r3, [r5, #0]
 8004c62:	9b03      	ldrlt	r3, [sp, #12]
 8004c64:	bfae      	itee	ge
 8004c66:	602b      	strge	r3, [r5, #0]
 8004c68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c6c:	9303      	strlt	r3, [sp, #12]
 8004c6e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004c72:	4bab      	ldr	r3, [pc, #684]	; (8004f20 <_dtoa_r+0x308>)
 8004c74:	ea33 0309 	bics.w	r3, r3, r9
 8004c78:	d11b      	bne.n	8004cb2 <_dtoa_r+0x9a>
 8004c7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c7e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	9b02      	ldr	r3, [sp, #8]
 8004c84:	b923      	cbnz	r3, 8004c90 <_dtoa_r+0x78>
 8004c86:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	f000 8583 	beq.w	8005796 <_dtoa_r+0xb7e>
 8004c90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c92:	b953      	cbnz	r3, 8004caa <_dtoa_r+0x92>
 8004c94:	4ba3      	ldr	r3, [pc, #652]	; (8004f24 <_dtoa_r+0x30c>)
 8004c96:	e021      	b.n	8004cdc <_dtoa_r+0xc4>
 8004c98:	4ba3      	ldr	r3, [pc, #652]	; (8004f28 <_dtoa_r+0x310>)
 8004c9a:	9306      	str	r3, [sp, #24]
 8004c9c:	3308      	adds	r3, #8
 8004c9e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	9806      	ldr	r0, [sp, #24]
 8004ca4:	b015      	add	sp, #84	; 0x54
 8004ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004caa:	4b9e      	ldr	r3, [pc, #632]	; (8004f24 <_dtoa_r+0x30c>)
 8004cac:	9306      	str	r3, [sp, #24]
 8004cae:	3303      	adds	r3, #3
 8004cb0:	e7f5      	b.n	8004c9e <_dtoa_r+0x86>
 8004cb2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2300      	movs	r3, #0
 8004cba:	4630      	mov	r0, r6
 8004cbc:	4639      	mov	r1, r7
 8004cbe:	f7fb fe6f 	bl	80009a0 <__aeabi_dcmpeq>
 8004cc2:	4680      	mov	r8, r0
 8004cc4:	b160      	cbz	r0, 8004ce0 <_dtoa_r+0xc8>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 855e 	beq.w	8005790 <_dtoa_r+0xb78>
 8004cd4:	4b95      	ldr	r3, [pc, #596]	; (8004f2c <_dtoa_r+0x314>)
 8004cd6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	9306      	str	r3, [sp, #24]
 8004cde:	e7e0      	b.n	8004ca2 <_dtoa_r+0x8a>
 8004ce0:	ab12      	add	r3, sp, #72	; 0x48
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	ab13      	add	r3, sp, #76	; 0x4c
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	4632      	mov	r2, r6
 8004cea:	463b      	mov	r3, r7
 8004cec:	4620      	mov	r0, r4
 8004cee:	f001 f809 	bl	8005d04 <__d2b>
 8004cf2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004cf6:	4682      	mov	sl, r0
 8004cf8:	2d00      	cmp	r5, #0
 8004cfa:	d07d      	beq.n	8004df8 <_dtoa_r+0x1e0>
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d02:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004d06:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004d0a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d0e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004d12:	2200      	movs	r2, #0
 8004d14:	4b86      	ldr	r3, [pc, #536]	; (8004f30 <_dtoa_r+0x318>)
 8004d16:	f7fb fa27 	bl	8000168 <__aeabi_dsub>
 8004d1a:	a37b      	add	r3, pc, #492	; (adr r3, 8004f08 <_dtoa_r+0x2f0>)
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	f7fb fbd6 	bl	80004d0 <__aeabi_dmul>
 8004d24:	a37a      	add	r3, pc, #488	; (adr r3, 8004f10 <_dtoa_r+0x2f8>)
 8004d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2a:	f7fb fa1f 	bl	800016c <__adddf3>
 8004d2e:	4606      	mov	r6, r0
 8004d30:	4628      	mov	r0, r5
 8004d32:	460f      	mov	r7, r1
 8004d34:	f7fb fb66 	bl	8000404 <__aeabi_i2d>
 8004d38:	a377      	add	r3, pc, #476	; (adr r3, 8004f18 <_dtoa_r+0x300>)
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f7fb fbc7 	bl	80004d0 <__aeabi_dmul>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4630      	mov	r0, r6
 8004d48:	4639      	mov	r1, r7
 8004d4a:	f7fb fa0f 	bl	800016c <__adddf3>
 8004d4e:	4606      	mov	r6, r0
 8004d50:	460f      	mov	r7, r1
 8004d52:	f7fb fe6d 	bl	8000a30 <__aeabi_d2iz>
 8004d56:	2200      	movs	r2, #0
 8004d58:	4683      	mov	fp, r0
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	4639      	mov	r1, r7
 8004d60:	f7fb fe28 	bl	80009b4 <__aeabi_dcmplt>
 8004d64:	b158      	cbz	r0, 8004d7e <_dtoa_r+0x166>
 8004d66:	4658      	mov	r0, fp
 8004d68:	f7fb fb4c 	bl	8000404 <__aeabi_i2d>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4630      	mov	r0, r6
 8004d72:	4639      	mov	r1, r7
 8004d74:	f7fb fe14 	bl	80009a0 <__aeabi_dcmpeq>
 8004d78:	b908      	cbnz	r0, 8004d7e <_dtoa_r+0x166>
 8004d7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d7e:	f1bb 0f16 	cmp.w	fp, #22
 8004d82:	d858      	bhi.n	8004e36 <_dtoa_r+0x21e>
 8004d84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d88:	496a      	ldr	r1, [pc, #424]	; (8004f34 <_dtoa_r+0x31c>)
 8004d8a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d92:	f7fb fe2d 	bl	80009f0 <__aeabi_dcmpgt>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d04f      	beq.n	8004e3a <_dtoa_r+0x222>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004da0:	930d      	str	r3, [sp, #52]	; 0x34
 8004da2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004da4:	1b5d      	subs	r5, r3, r5
 8004da6:	1e6b      	subs	r3, r5, #1
 8004da8:	9307      	str	r3, [sp, #28]
 8004daa:	bf43      	ittte	mi
 8004dac:	2300      	movmi	r3, #0
 8004dae:	f1c5 0801 	rsbmi	r8, r5, #1
 8004db2:	9307      	strmi	r3, [sp, #28]
 8004db4:	f04f 0800 	movpl.w	r8, #0
 8004db8:	f1bb 0f00 	cmp.w	fp, #0
 8004dbc:	db3f      	blt.n	8004e3e <_dtoa_r+0x226>
 8004dbe:	9b07      	ldr	r3, [sp, #28]
 8004dc0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8004dc4:	445b      	add	r3, fp
 8004dc6:	9307      	str	r3, [sp, #28]
 8004dc8:	2300      	movs	r3, #0
 8004dca:	9308      	str	r3, [sp, #32]
 8004dcc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004dce:	2b09      	cmp	r3, #9
 8004dd0:	f200 80b4 	bhi.w	8004f3c <_dtoa_r+0x324>
 8004dd4:	2b05      	cmp	r3, #5
 8004dd6:	bfc4      	itt	gt
 8004dd8:	3b04      	subgt	r3, #4
 8004dda:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004ddc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004dde:	bfc8      	it	gt
 8004de0:	2600      	movgt	r6, #0
 8004de2:	f1a3 0302 	sub.w	r3, r3, #2
 8004de6:	bfd8      	it	le
 8004de8:	2601      	movle	r6, #1
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	f200 80b2 	bhi.w	8004f54 <_dtoa_r+0x33c>
 8004df0:	e8df f003 	tbb	[pc, r3]
 8004df4:	782d8684 	.word	0x782d8684
 8004df8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004dfa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004dfc:	441d      	add	r5, r3
 8004dfe:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	dd11      	ble.n	8004e2a <_dtoa_r+0x212>
 8004e06:	9a02      	ldr	r2, [sp, #8]
 8004e08:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004e0c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004e10:	fa22 f000 	lsr.w	r0, r2, r0
 8004e14:	fa09 f303 	lsl.w	r3, r9, r3
 8004e18:	4318      	orrs	r0, r3
 8004e1a:	f7fb fae3 	bl	80003e4 <__aeabi_ui2d>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004e24:	3d01      	subs	r5, #1
 8004e26:	9310      	str	r3, [sp, #64]	; 0x40
 8004e28:	e773      	b.n	8004d12 <_dtoa_r+0xfa>
 8004e2a:	f1c3 0020 	rsb	r0, r3, #32
 8004e2e:	9b02      	ldr	r3, [sp, #8]
 8004e30:	fa03 f000 	lsl.w	r0, r3, r0
 8004e34:	e7f1      	b.n	8004e1a <_dtoa_r+0x202>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e7b2      	b.n	8004da0 <_dtoa_r+0x188>
 8004e3a:	900d      	str	r0, [sp, #52]	; 0x34
 8004e3c:	e7b1      	b.n	8004da2 <_dtoa_r+0x18a>
 8004e3e:	f1cb 0300 	rsb	r3, fp, #0
 8004e42:	9308      	str	r3, [sp, #32]
 8004e44:	2300      	movs	r3, #0
 8004e46:	eba8 080b 	sub.w	r8, r8, fp
 8004e4a:	930c      	str	r3, [sp, #48]	; 0x30
 8004e4c:	e7be      	b.n	8004dcc <_dtoa_r+0x1b4>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	9309      	str	r3, [sp, #36]	; 0x24
 8004e52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f340 8080 	ble.w	8004f5a <_dtoa_r+0x342>
 8004e5a:	4699      	mov	r9, r3
 8004e5c:	9304      	str	r3, [sp, #16]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2104      	movs	r1, #4
 8004e62:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004e64:	606a      	str	r2, [r5, #4]
 8004e66:	f101 0214 	add.w	r2, r1, #20
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d97a      	bls.n	8004f64 <_dtoa_r+0x34c>
 8004e6e:	6869      	ldr	r1, [r5, #4]
 8004e70:	4620      	mov	r0, r4
 8004e72:	f000 fcc6 	bl	8005802 <_Balloc>
 8004e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e78:	6028      	str	r0, [r5, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f1b9 0f0e 	cmp.w	r9, #14
 8004e80:	9306      	str	r3, [sp, #24]
 8004e82:	f200 80f0 	bhi.w	8005066 <_dtoa_r+0x44e>
 8004e86:	2e00      	cmp	r6, #0
 8004e88:	f000 80ed 	beq.w	8005066 <_dtoa_r+0x44e>
 8004e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e90:	f1bb 0f00 	cmp.w	fp, #0
 8004e94:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004e98:	dd79      	ble.n	8004f8e <_dtoa_r+0x376>
 8004e9a:	4a26      	ldr	r2, [pc, #152]	; (8004f34 <_dtoa_r+0x31c>)
 8004e9c:	f00b 030f 	and.w	r3, fp, #15
 8004ea0:	ea4f 162b 	mov.w	r6, fp, asr #4
 8004ea4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ea8:	06f0      	lsls	r0, r6, #27
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004eb2:	d55c      	bpl.n	8004f6e <_dtoa_r+0x356>
 8004eb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004eb8:	4b1f      	ldr	r3, [pc, #124]	; (8004f38 <_dtoa_r+0x320>)
 8004eba:	2503      	movs	r5, #3
 8004ebc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ec0:	f7fb fc30 	bl	8000724 <__aeabi_ddiv>
 8004ec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ec8:	f006 060f 	and.w	r6, r6, #15
 8004ecc:	4f1a      	ldr	r7, [pc, #104]	; (8004f38 <_dtoa_r+0x320>)
 8004ece:	2e00      	cmp	r6, #0
 8004ed0:	d14f      	bne.n	8004f72 <_dtoa_r+0x35a>
 8004ed2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eda:	f7fb fc23 	bl	8000724 <__aeabi_ddiv>
 8004ede:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ee2:	e06e      	b.n	8004fc2 <_dtoa_r+0x3aa>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004eea:	445b      	add	r3, fp
 8004eec:	f103 0901 	add.w	r9, r3, #1
 8004ef0:	9304      	str	r3, [sp, #16]
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	bfb8      	it	lt
 8004ef8:	2301      	movlt	r3, #1
 8004efa:	e7b0      	b.n	8004e5e <_dtoa_r+0x246>
 8004efc:	2300      	movs	r3, #0
 8004efe:	e7a7      	b.n	8004e50 <_dtoa_r+0x238>
 8004f00:	2300      	movs	r3, #0
 8004f02:	e7f0      	b.n	8004ee6 <_dtoa_r+0x2ce>
 8004f04:	f3af 8000 	nop.w
 8004f08:	636f4361 	.word	0x636f4361
 8004f0c:	3fd287a7 	.word	0x3fd287a7
 8004f10:	8b60c8b3 	.word	0x8b60c8b3
 8004f14:	3fc68a28 	.word	0x3fc68a28
 8004f18:	509f79fb 	.word	0x509f79fb
 8004f1c:	3fd34413 	.word	0x3fd34413
 8004f20:	7ff00000 	.word	0x7ff00000
 8004f24:	08005f3b 	.word	0x08005f3b
 8004f28:	08005f32 	.word	0x08005f32
 8004f2c:	08005f31 	.word	0x08005f31
 8004f30:	3ff80000 	.word	0x3ff80000
 8004f34:	08005f68 	.word	0x08005f68
 8004f38:	08005f40 	.word	0x08005f40
 8004f3c:	2601      	movs	r6, #1
 8004f3e:	2300      	movs	r3, #0
 8004f40:	9609      	str	r6, [sp, #36]	; 0x24
 8004f42:	931e      	str	r3, [sp, #120]	; 0x78
 8004f44:	f04f 33ff 	mov.w	r3, #4294967295
 8004f48:	2200      	movs	r2, #0
 8004f4a:	9304      	str	r3, [sp, #16]
 8004f4c:	4699      	mov	r9, r3
 8004f4e:	2312      	movs	r3, #18
 8004f50:	921f      	str	r2, [sp, #124]	; 0x7c
 8004f52:	e784      	b.n	8004e5e <_dtoa_r+0x246>
 8004f54:	2301      	movs	r3, #1
 8004f56:	9309      	str	r3, [sp, #36]	; 0x24
 8004f58:	e7f4      	b.n	8004f44 <_dtoa_r+0x32c>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	9304      	str	r3, [sp, #16]
 8004f5e:	4699      	mov	r9, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	e7f5      	b.n	8004f50 <_dtoa_r+0x338>
 8004f64:	686a      	ldr	r2, [r5, #4]
 8004f66:	0049      	lsls	r1, r1, #1
 8004f68:	3201      	adds	r2, #1
 8004f6a:	606a      	str	r2, [r5, #4]
 8004f6c:	e77b      	b.n	8004e66 <_dtoa_r+0x24e>
 8004f6e:	2502      	movs	r5, #2
 8004f70:	e7ac      	b.n	8004ecc <_dtoa_r+0x2b4>
 8004f72:	07f1      	lsls	r1, r6, #31
 8004f74:	d508      	bpl.n	8004f88 <_dtoa_r+0x370>
 8004f76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f7e:	f7fb faa7 	bl	80004d0 <__aeabi_dmul>
 8004f82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f86:	3501      	adds	r5, #1
 8004f88:	1076      	asrs	r6, r6, #1
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	e79f      	b.n	8004ece <_dtoa_r+0x2b6>
 8004f8e:	f000 80a5 	beq.w	80050dc <_dtoa_r+0x4c4>
 8004f92:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004f96:	f1cb 0600 	rsb	r6, fp, #0
 8004f9a:	4ba2      	ldr	r3, [pc, #648]	; (8005224 <_dtoa_r+0x60c>)
 8004f9c:	f006 020f 	and.w	r2, r6, #15
 8004fa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa8:	f7fb fa92 	bl	80004d0 <__aeabi_dmul>
 8004fac:	2502      	movs	r5, #2
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fb4:	4f9c      	ldr	r7, [pc, #624]	; (8005228 <_dtoa_r+0x610>)
 8004fb6:	1136      	asrs	r6, r6, #4
 8004fb8:	2e00      	cmp	r6, #0
 8004fba:	f040 8084 	bne.w	80050c6 <_dtoa_r+0x4ae>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d18d      	bne.n	8004ede <_dtoa_r+0x2c6>
 8004fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 808b 	beq.w	80050e0 <_dtoa_r+0x4c8>
 8004fca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004fd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	4b94      	ldr	r3, [pc, #592]	; (800522c <_dtoa_r+0x614>)
 8004fda:	f7fb fceb 	bl	80009b4 <__aeabi_dcmplt>
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	d07e      	beq.n	80050e0 <_dtoa_r+0x4c8>
 8004fe2:	f1b9 0f00 	cmp.w	r9, #0
 8004fe6:	d07b      	beq.n	80050e0 <_dtoa_r+0x4c8>
 8004fe8:	9b04      	ldr	r3, [sp, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	dd37      	ble.n	800505e <_dtoa_r+0x446>
 8004fee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	4b8e      	ldr	r3, [pc, #568]	; (8005230 <_dtoa_r+0x618>)
 8004ff6:	f7fb fa6b 	bl	80004d0 <__aeabi_dmul>
 8004ffa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ffe:	9e04      	ldr	r6, [sp, #16]
 8005000:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005004:	3501      	adds	r5, #1
 8005006:	4628      	mov	r0, r5
 8005008:	f7fb f9fc 	bl	8000404 <__aeabi_i2d>
 800500c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005010:	f7fb fa5e 	bl	80004d0 <__aeabi_dmul>
 8005014:	4b87      	ldr	r3, [pc, #540]	; (8005234 <_dtoa_r+0x61c>)
 8005016:	2200      	movs	r2, #0
 8005018:	f7fb f8a8 	bl	800016c <__adddf3>
 800501c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005022:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8005026:	950b      	str	r5, [sp, #44]	; 0x2c
 8005028:	2e00      	cmp	r6, #0
 800502a:	d15c      	bne.n	80050e6 <_dtoa_r+0x4ce>
 800502c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005030:	2200      	movs	r2, #0
 8005032:	4b81      	ldr	r3, [pc, #516]	; (8005238 <_dtoa_r+0x620>)
 8005034:	f7fb f898 	bl	8000168 <__aeabi_dsub>
 8005038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800503a:	462b      	mov	r3, r5
 800503c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005040:	f7fb fcd6 	bl	80009f0 <__aeabi_dcmpgt>
 8005044:	2800      	cmp	r0, #0
 8005046:	f040 82f7 	bne.w	8005638 <_dtoa_r+0xa20>
 800504a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800504e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005050:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005054:	f7fb fcae 	bl	80009b4 <__aeabi_dcmplt>
 8005058:	2800      	cmp	r0, #0
 800505a:	f040 82eb 	bne.w	8005634 <_dtoa_r+0xa1c>
 800505e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005062:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005066:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005068:	2b00      	cmp	r3, #0
 800506a:	f2c0 8150 	blt.w	800530e <_dtoa_r+0x6f6>
 800506e:	f1bb 0f0e 	cmp.w	fp, #14
 8005072:	f300 814c 	bgt.w	800530e <_dtoa_r+0x6f6>
 8005076:	4b6b      	ldr	r3, [pc, #428]	; (8005224 <_dtoa_r+0x60c>)
 8005078:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005080:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005084:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005086:	2b00      	cmp	r3, #0
 8005088:	f280 80da 	bge.w	8005240 <_dtoa_r+0x628>
 800508c:	f1b9 0f00 	cmp.w	r9, #0
 8005090:	f300 80d6 	bgt.w	8005240 <_dtoa_r+0x628>
 8005094:	f040 82cd 	bne.w	8005632 <_dtoa_r+0xa1a>
 8005098:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800509c:	2200      	movs	r2, #0
 800509e:	4b66      	ldr	r3, [pc, #408]	; (8005238 <_dtoa_r+0x620>)
 80050a0:	f7fb fa16 	bl	80004d0 <__aeabi_dmul>
 80050a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050a8:	f7fb fc98 	bl	80009dc <__aeabi_dcmpge>
 80050ac:	464e      	mov	r6, r9
 80050ae:	464f      	mov	r7, r9
 80050b0:	2800      	cmp	r0, #0
 80050b2:	f040 82a4 	bne.w	80055fe <_dtoa_r+0x9e6>
 80050b6:	9b06      	ldr	r3, [sp, #24]
 80050b8:	9a06      	ldr	r2, [sp, #24]
 80050ba:	1c5d      	adds	r5, r3, #1
 80050bc:	2331      	movs	r3, #49	; 0x31
 80050be:	f10b 0b01 	add.w	fp, fp, #1
 80050c2:	7013      	strb	r3, [r2, #0]
 80050c4:	e29f      	b.n	8005606 <_dtoa_r+0x9ee>
 80050c6:	07f2      	lsls	r2, r6, #31
 80050c8:	d505      	bpl.n	80050d6 <_dtoa_r+0x4be>
 80050ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ce:	f7fb f9ff 	bl	80004d0 <__aeabi_dmul>
 80050d2:	2301      	movs	r3, #1
 80050d4:	3501      	adds	r5, #1
 80050d6:	1076      	asrs	r6, r6, #1
 80050d8:	3708      	adds	r7, #8
 80050da:	e76d      	b.n	8004fb8 <_dtoa_r+0x3a0>
 80050dc:	2502      	movs	r5, #2
 80050de:	e770      	b.n	8004fc2 <_dtoa_r+0x3aa>
 80050e0:	465f      	mov	r7, fp
 80050e2:	464e      	mov	r6, r9
 80050e4:	e78f      	b.n	8005006 <_dtoa_r+0x3ee>
 80050e6:	9a06      	ldr	r2, [sp, #24]
 80050e8:	4b4e      	ldr	r3, [pc, #312]	; (8005224 <_dtoa_r+0x60c>)
 80050ea:	4432      	add	r2, r6
 80050ec:	9211      	str	r2, [sp, #68]	; 0x44
 80050ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050f0:	1e71      	subs	r1, r6, #1
 80050f2:	2a00      	cmp	r2, #0
 80050f4:	d048      	beq.n	8005188 <_dtoa_r+0x570>
 80050f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fe:	2000      	movs	r0, #0
 8005100:	494e      	ldr	r1, [pc, #312]	; (800523c <_dtoa_r+0x624>)
 8005102:	f7fb fb0f 	bl	8000724 <__aeabi_ddiv>
 8005106:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800510a:	f7fb f82d 	bl	8000168 <__aeabi_dsub>
 800510e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005112:	9d06      	ldr	r5, [sp, #24]
 8005114:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005118:	f7fb fc8a 	bl	8000a30 <__aeabi_d2iz>
 800511c:	4606      	mov	r6, r0
 800511e:	f7fb f971 	bl	8000404 <__aeabi_i2d>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800512a:	f7fb f81d 	bl	8000168 <__aeabi_dsub>
 800512e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005132:	3630      	adds	r6, #48	; 0x30
 8005134:	f805 6b01 	strb.w	r6, [r5], #1
 8005138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800513c:	f7fb fc3a 	bl	80009b4 <__aeabi_dcmplt>
 8005140:	2800      	cmp	r0, #0
 8005142:	d164      	bne.n	800520e <_dtoa_r+0x5f6>
 8005144:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005148:	2000      	movs	r0, #0
 800514a:	4938      	ldr	r1, [pc, #224]	; (800522c <_dtoa_r+0x614>)
 800514c:	f7fb f80c 	bl	8000168 <__aeabi_dsub>
 8005150:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005154:	f7fb fc2e 	bl	80009b4 <__aeabi_dcmplt>
 8005158:	2800      	cmp	r0, #0
 800515a:	f040 80b9 	bne.w	80052d0 <_dtoa_r+0x6b8>
 800515e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005160:	429d      	cmp	r5, r3
 8005162:	f43f af7c 	beq.w	800505e <_dtoa_r+0x446>
 8005166:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800516a:	2200      	movs	r2, #0
 800516c:	4b30      	ldr	r3, [pc, #192]	; (8005230 <_dtoa_r+0x618>)
 800516e:	f7fb f9af 	bl	80004d0 <__aeabi_dmul>
 8005172:	2200      	movs	r2, #0
 8005174:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005178:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800517c:	4b2c      	ldr	r3, [pc, #176]	; (8005230 <_dtoa_r+0x618>)
 800517e:	f7fb f9a7 	bl	80004d0 <__aeabi_dmul>
 8005182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005186:	e7c5      	b.n	8005114 <_dtoa_r+0x4fc>
 8005188:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800518c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005190:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005194:	f7fb f99c 	bl	80004d0 <__aeabi_dmul>
 8005198:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800519c:	9d06      	ldr	r5, [sp, #24]
 800519e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051a2:	f7fb fc45 	bl	8000a30 <__aeabi_d2iz>
 80051a6:	4606      	mov	r6, r0
 80051a8:	f7fb f92c 	bl	8000404 <__aeabi_i2d>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051b4:	f7fa ffd8 	bl	8000168 <__aeabi_dsub>
 80051b8:	3630      	adds	r6, #48	; 0x30
 80051ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051bc:	f805 6b01 	strb.w	r6, [r5], #1
 80051c0:	42ab      	cmp	r3, r5
 80051c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	d124      	bne.n	8005216 <_dtoa_r+0x5fe>
 80051cc:	4b1b      	ldr	r3, [pc, #108]	; (800523c <_dtoa_r+0x624>)
 80051ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80051d2:	f7fa ffcb 	bl	800016c <__adddf3>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051de:	f7fb fc07 	bl	80009f0 <__aeabi_dcmpgt>
 80051e2:	2800      	cmp	r0, #0
 80051e4:	d174      	bne.n	80052d0 <_dtoa_r+0x6b8>
 80051e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80051ea:	2000      	movs	r0, #0
 80051ec:	4913      	ldr	r1, [pc, #76]	; (800523c <_dtoa_r+0x624>)
 80051ee:	f7fa ffbb 	bl	8000168 <__aeabi_dsub>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051fa:	f7fb fbdb 	bl	80009b4 <__aeabi_dcmplt>
 80051fe:	2800      	cmp	r0, #0
 8005200:	f43f af2d 	beq.w	800505e <_dtoa_r+0x446>
 8005204:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005208:	1e6a      	subs	r2, r5, #1
 800520a:	2b30      	cmp	r3, #48	; 0x30
 800520c:	d001      	beq.n	8005212 <_dtoa_r+0x5fa>
 800520e:	46bb      	mov	fp, r7
 8005210:	e04d      	b.n	80052ae <_dtoa_r+0x696>
 8005212:	4615      	mov	r5, r2
 8005214:	e7f6      	b.n	8005204 <_dtoa_r+0x5ec>
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <_dtoa_r+0x618>)
 8005218:	f7fb f95a 	bl	80004d0 <__aeabi_dmul>
 800521c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005220:	e7bd      	b.n	800519e <_dtoa_r+0x586>
 8005222:	bf00      	nop
 8005224:	08005f68 	.word	0x08005f68
 8005228:	08005f40 	.word	0x08005f40
 800522c:	3ff00000 	.word	0x3ff00000
 8005230:	40240000 	.word	0x40240000
 8005234:	401c0000 	.word	0x401c0000
 8005238:	40140000 	.word	0x40140000
 800523c:	3fe00000 	.word	0x3fe00000
 8005240:	9d06      	ldr	r5, [sp, #24]
 8005242:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800524a:	4630      	mov	r0, r6
 800524c:	4639      	mov	r1, r7
 800524e:	f7fb fa69 	bl	8000724 <__aeabi_ddiv>
 8005252:	f7fb fbed 	bl	8000a30 <__aeabi_d2iz>
 8005256:	4680      	mov	r8, r0
 8005258:	f7fb f8d4 	bl	8000404 <__aeabi_i2d>
 800525c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005260:	f7fb f936 	bl	80004d0 <__aeabi_dmul>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4630      	mov	r0, r6
 800526a:	4639      	mov	r1, r7
 800526c:	f7fa ff7c 	bl	8000168 <__aeabi_dsub>
 8005270:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005274:	f805 6b01 	strb.w	r6, [r5], #1
 8005278:	9e06      	ldr	r6, [sp, #24]
 800527a:	4602      	mov	r2, r0
 800527c:	1bae      	subs	r6, r5, r6
 800527e:	45b1      	cmp	r9, r6
 8005280:	460b      	mov	r3, r1
 8005282:	d137      	bne.n	80052f4 <_dtoa_r+0x6dc>
 8005284:	f7fa ff72 	bl	800016c <__adddf3>
 8005288:	4606      	mov	r6, r0
 800528a:	460f      	mov	r7, r1
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005294:	f7fb fb8e 	bl	80009b4 <__aeabi_dcmplt>
 8005298:	b9c8      	cbnz	r0, 80052ce <_dtoa_r+0x6b6>
 800529a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800529e:	4632      	mov	r2, r6
 80052a0:	463b      	mov	r3, r7
 80052a2:	f7fb fb7d 	bl	80009a0 <__aeabi_dcmpeq>
 80052a6:	b110      	cbz	r0, 80052ae <_dtoa_r+0x696>
 80052a8:	f018 0f01 	tst.w	r8, #1
 80052ac:	d10f      	bne.n	80052ce <_dtoa_r+0x6b6>
 80052ae:	4651      	mov	r1, sl
 80052b0:	4620      	mov	r0, r4
 80052b2:	f000 fada 	bl	800586a <_Bfree>
 80052b6:	2300      	movs	r3, #0
 80052b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052ba:	702b      	strb	r3, [r5, #0]
 80052bc:	f10b 0301 	add.w	r3, fp, #1
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f43f acec 	beq.w	8004ca2 <_dtoa_r+0x8a>
 80052ca:	601d      	str	r5, [r3, #0]
 80052cc:	e4e9      	b.n	8004ca2 <_dtoa_r+0x8a>
 80052ce:	465f      	mov	r7, fp
 80052d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80052d4:	1e6b      	subs	r3, r5, #1
 80052d6:	2a39      	cmp	r2, #57	; 0x39
 80052d8:	d106      	bne.n	80052e8 <_dtoa_r+0x6d0>
 80052da:	9a06      	ldr	r2, [sp, #24]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d107      	bne.n	80052f0 <_dtoa_r+0x6d8>
 80052e0:	2330      	movs	r3, #48	; 0x30
 80052e2:	7013      	strb	r3, [r2, #0]
 80052e4:	4613      	mov	r3, r2
 80052e6:	3701      	adds	r7, #1
 80052e8:	781a      	ldrb	r2, [r3, #0]
 80052ea:	3201      	adds	r2, #1
 80052ec:	701a      	strb	r2, [r3, #0]
 80052ee:	e78e      	b.n	800520e <_dtoa_r+0x5f6>
 80052f0:	461d      	mov	r5, r3
 80052f2:	e7ed      	b.n	80052d0 <_dtoa_r+0x6b8>
 80052f4:	2200      	movs	r2, #0
 80052f6:	4bb5      	ldr	r3, [pc, #724]	; (80055cc <_dtoa_r+0x9b4>)
 80052f8:	f7fb f8ea 	bl	80004d0 <__aeabi_dmul>
 80052fc:	2200      	movs	r2, #0
 80052fe:	2300      	movs	r3, #0
 8005300:	4606      	mov	r6, r0
 8005302:	460f      	mov	r7, r1
 8005304:	f7fb fb4c 	bl	80009a0 <__aeabi_dcmpeq>
 8005308:	2800      	cmp	r0, #0
 800530a:	d09c      	beq.n	8005246 <_dtoa_r+0x62e>
 800530c:	e7cf      	b.n	80052ae <_dtoa_r+0x696>
 800530e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005310:	2a00      	cmp	r2, #0
 8005312:	f000 8129 	beq.w	8005568 <_dtoa_r+0x950>
 8005316:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005318:	2a01      	cmp	r2, #1
 800531a:	f300 810e 	bgt.w	800553a <_dtoa_r+0x922>
 800531e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005320:	2a00      	cmp	r2, #0
 8005322:	f000 8106 	beq.w	8005532 <_dtoa_r+0x91a>
 8005326:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800532a:	4645      	mov	r5, r8
 800532c:	9e08      	ldr	r6, [sp, #32]
 800532e:	9a07      	ldr	r2, [sp, #28]
 8005330:	2101      	movs	r1, #1
 8005332:	441a      	add	r2, r3
 8005334:	4620      	mov	r0, r4
 8005336:	4498      	add	r8, r3
 8005338:	9207      	str	r2, [sp, #28]
 800533a:	f000 fb36 	bl	80059aa <__i2b>
 800533e:	4607      	mov	r7, r0
 8005340:	2d00      	cmp	r5, #0
 8005342:	dd0b      	ble.n	800535c <_dtoa_r+0x744>
 8005344:	9b07      	ldr	r3, [sp, #28]
 8005346:	2b00      	cmp	r3, #0
 8005348:	dd08      	ble.n	800535c <_dtoa_r+0x744>
 800534a:	42ab      	cmp	r3, r5
 800534c:	bfa8      	it	ge
 800534e:	462b      	movge	r3, r5
 8005350:	9a07      	ldr	r2, [sp, #28]
 8005352:	eba8 0803 	sub.w	r8, r8, r3
 8005356:	1aed      	subs	r5, r5, r3
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	9307      	str	r3, [sp, #28]
 800535c:	9b08      	ldr	r3, [sp, #32]
 800535e:	b1fb      	cbz	r3, 80053a0 <_dtoa_r+0x788>
 8005360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 8104 	beq.w	8005570 <_dtoa_r+0x958>
 8005368:	2e00      	cmp	r6, #0
 800536a:	dd11      	ble.n	8005390 <_dtoa_r+0x778>
 800536c:	4639      	mov	r1, r7
 800536e:	4632      	mov	r2, r6
 8005370:	4620      	mov	r0, r4
 8005372:	f000 fbaf 	bl	8005ad4 <__pow5mult>
 8005376:	4652      	mov	r2, sl
 8005378:	4601      	mov	r1, r0
 800537a:	4607      	mov	r7, r0
 800537c:	4620      	mov	r0, r4
 800537e:	f000 fb1d 	bl	80059bc <__multiply>
 8005382:	4651      	mov	r1, sl
 8005384:	900a      	str	r0, [sp, #40]	; 0x28
 8005386:	4620      	mov	r0, r4
 8005388:	f000 fa6f 	bl	800586a <_Bfree>
 800538c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800538e:	469a      	mov	sl, r3
 8005390:	9b08      	ldr	r3, [sp, #32]
 8005392:	1b9a      	subs	r2, r3, r6
 8005394:	d004      	beq.n	80053a0 <_dtoa_r+0x788>
 8005396:	4651      	mov	r1, sl
 8005398:	4620      	mov	r0, r4
 800539a:	f000 fb9b 	bl	8005ad4 <__pow5mult>
 800539e:	4682      	mov	sl, r0
 80053a0:	2101      	movs	r1, #1
 80053a2:	4620      	mov	r0, r4
 80053a4:	f000 fb01 	bl	80059aa <__i2b>
 80053a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053aa:	4606      	mov	r6, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f340 80e1 	ble.w	8005574 <_dtoa_r+0x95c>
 80053b2:	461a      	mov	r2, r3
 80053b4:	4601      	mov	r1, r0
 80053b6:	4620      	mov	r0, r4
 80053b8:	f000 fb8c 	bl	8005ad4 <__pow5mult>
 80053bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053be:	4606      	mov	r6, r0
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	f340 80da 	ble.w	800557a <_dtoa_r+0x962>
 80053c6:	2300      	movs	r3, #0
 80053c8:	9308      	str	r3, [sp, #32]
 80053ca:	6933      	ldr	r3, [r6, #16]
 80053cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80053d0:	6918      	ldr	r0, [r3, #16]
 80053d2:	f000 fa9c 	bl	800590e <__hi0bits>
 80053d6:	f1c0 0020 	rsb	r0, r0, #32
 80053da:	9b07      	ldr	r3, [sp, #28]
 80053dc:	4418      	add	r0, r3
 80053de:	f010 001f 	ands.w	r0, r0, #31
 80053e2:	f000 80f0 	beq.w	80055c6 <_dtoa_r+0x9ae>
 80053e6:	f1c0 0320 	rsb	r3, r0, #32
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	f340 80e2 	ble.w	80055b4 <_dtoa_r+0x99c>
 80053f0:	9b07      	ldr	r3, [sp, #28]
 80053f2:	f1c0 001c 	rsb	r0, r0, #28
 80053f6:	4480      	add	r8, r0
 80053f8:	4405      	add	r5, r0
 80053fa:	4403      	add	r3, r0
 80053fc:	9307      	str	r3, [sp, #28]
 80053fe:	f1b8 0f00 	cmp.w	r8, #0
 8005402:	dd05      	ble.n	8005410 <_dtoa_r+0x7f8>
 8005404:	4651      	mov	r1, sl
 8005406:	4642      	mov	r2, r8
 8005408:	4620      	mov	r0, r4
 800540a:	f000 fbb1 	bl	8005b70 <__lshift>
 800540e:	4682      	mov	sl, r0
 8005410:	9b07      	ldr	r3, [sp, #28]
 8005412:	2b00      	cmp	r3, #0
 8005414:	dd05      	ble.n	8005422 <_dtoa_r+0x80a>
 8005416:	4631      	mov	r1, r6
 8005418:	461a      	mov	r2, r3
 800541a:	4620      	mov	r0, r4
 800541c:	f000 fba8 	bl	8005b70 <__lshift>
 8005420:	4606      	mov	r6, r0
 8005422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 80d3 	beq.w	80055d0 <_dtoa_r+0x9b8>
 800542a:	4631      	mov	r1, r6
 800542c:	4650      	mov	r0, sl
 800542e:	f000 fbf0 	bl	8005c12 <__mcmp>
 8005432:	2800      	cmp	r0, #0
 8005434:	f280 80cc 	bge.w	80055d0 <_dtoa_r+0x9b8>
 8005438:	2300      	movs	r3, #0
 800543a:	4651      	mov	r1, sl
 800543c:	220a      	movs	r2, #10
 800543e:	4620      	mov	r0, r4
 8005440:	f000 fa2a 	bl	8005898 <__multadd>
 8005444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005446:	f10b 3bff 	add.w	fp, fp, #4294967295
 800544a:	4682      	mov	sl, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 81a9 	beq.w	80057a4 <_dtoa_r+0xb8c>
 8005452:	2300      	movs	r3, #0
 8005454:	4639      	mov	r1, r7
 8005456:	220a      	movs	r2, #10
 8005458:	4620      	mov	r0, r4
 800545a:	f000 fa1d 	bl	8005898 <__multadd>
 800545e:	9b04      	ldr	r3, [sp, #16]
 8005460:	4607      	mov	r7, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	dc03      	bgt.n	800546e <_dtoa_r+0x856>
 8005466:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005468:	2b02      	cmp	r3, #2
 800546a:	f300 80b9 	bgt.w	80055e0 <_dtoa_r+0x9c8>
 800546e:	2d00      	cmp	r5, #0
 8005470:	dd05      	ble.n	800547e <_dtoa_r+0x866>
 8005472:	4639      	mov	r1, r7
 8005474:	462a      	mov	r2, r5
 8005476:	4620      	mov	r0, r4
 8005478:	f000 fb7a 	bl	8005b70 <__lshift>
 800547c:	4607      	mov	r7, r0
 800547e:	9b08      	ldr	r3, [sp, #32]
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 8110 	beq.w	80056a6 <_dtoa_r+0xa8e>
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	4620      	mov	r0, r4
 800548a:	f000 f9ba 	bl	8005802 <_Balloc>
 800548e:	4605      	mov	r5, r0
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	f107 010c 	add.w	r1, r7, #12
 8005496:	3202      	adds	r2, #2
 8005498:	0092      	lsls	r2, r2, #2
 800549a:	300c      	adds	r0, #12
 800549c:	f000 f9a6 	bl	80057ec <memcpy>
 80054a0:	2201      	movs	r2, #1
 80054a2:	4629      	mov	r1, r5
 80054a4:	4620      	mov	r0, r4
 80054a6:	f000 fb63 	bl	8005b70 <__lshift>
 80054aa:	9707      	str	r7, [sp, #28]
 80054ac:	4607      	mov	r7, r0
 80054ae:	9b02      	ldr	r3, [sp, #8]
 80054b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	9308      	str	r3, [sp, #32]
 80054ba:	4631      	mov	r1, r6
 80054bc:	4650      	mov	r0, sl
 80054be:	f7ff fb1e 	bl	8004afe <quorem>
 80054c2:	9907      	ldr	r1, [sp, #28]
 80054c4:	4605      	mov	r5, r0
 80054c6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80054ca:	4650      	mov	r0, sl
 80054cc:	f000 fba1 	bl	8005c12 <__mcmp>
 80054d0:	463a      	mov	r2, r7
 80054d2:	9002      	str	r0, [sp, #8]
 80054d4:	4631      	mov	r1, r6
 80054d6:	4620      	mov	r0, r4
 80054d8:	f000 fbb5 	bl	8005c46 <__mdiff>
 80054dc:	68c3      	ldr	r3, [r0, #12]
 80054de:	4602      	mov	r2, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f040 80e2 	bne.w	80056aa <_dtoa_r+0xa92>
 80054e6:	4601      	mov	r1, r0
 80054e8:	9009      	str	r0, [sp, #36]	; 0x24
 80054ea:	4650      	mov	r0, sl
 80054ec:	f000 fb91 	bl	8005c12 <__mcmp>
 80054f0:	4603      	mov	r3, r0
 80054f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054f4:	4611      	mov	r1, r2
 80054f6:	4620      	mov	r0, r4
 80054f8:	9309      	str	r3, [sp, #36]	; 0x24
 80054fa:	f000 f9b6 	bl	800586a <_Bfree>
 80054fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005500:	2b00      	cmp	r3, #0
 8005502:	f040 80d4 	bne.w	80056ae <_dtoa_r+0xa96>
 8005506:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005508:	2a00      	cmp	r2, #0
 800550a:	f040 80d0 	bne.w	80056ae <_dtoa_r+0xa96>
 800550e:	9a08      	ldr	r2, [sp, #32]
 8005510:	2a00      	cmp	r2, #0
 8005512:	f040 80cc 	bne.w	80056ae <_dtoa_r+0xa96>
 8005516:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800551a:	f000 80e8 	beq.w	80056ee <_dtoa_r+0xad6>
 800551e:	9b02      	ldr	r3, [sp, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	dd01      	ble.n	8005528 <_dtoa_r+0x910>
 8005524:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8005528:	f108 0501 	add.w	r5, r8, #1
 800552c:	f888 9000 	strb.w	r9, [r8]
 8005530:	e06b      	b.n	800560a <_dtoa_r+0x9f2>
 8005532:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005534:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005538:	e6f7      	b.n	800532a <_dtoa_r+0x712>
 800553a:	9b08      	ldr	r3, [sp, #32]
 800553c:	f109 36ff 	add.w	r6, r9, #4294967295
 8005540:	42b3      	cmp	r3, r6
 8005542:	bfb7      	itett	lt
 8005544:	9b08      	ldrlt	r3, [sp, #32]
 8005546:	1b9e      	subge	r6, r3, r6
 8005548:	1af2      	sublt	r2, r6, r3
 800554a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800554c:	bfbf      	itttt	lt
 800554e:	9608      	strlt	r6, [sp, #32]
 8005550:	189b      	addlt	r3, r3, r2
 8005552:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005554:	2600      	movlt	r6, #0
 8005556:	f1b9 0f00 	cmp.w	r9, #0
 800555a:	bfb9      	ittee	lt
 800555c:	eba8 0509 	sublt.w	r5, r8, r9
 8005560:	2300      	movlt	r3, #0
 8005562:	4645      	movge	r5, r8
 8005564:	464b      	movge	r3, r9
 8005566:	e6e2      	b.n	800532e <_dtoa_r+0x716>
 8005568:	9e08      	ldr	r6, [sp, #32]
 800556a:	4645      	mov	r5, r8
 800556c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800556e:	e6e7      	b.n	8005340 <_dtoa_r+0x728>
 8005570:	9a08      	ldr	r2, [sp, #32]
 8005572:	e710      	b.n	8005396 <_dtoa_r+0x77e>
 8005574:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005576:	2b01      	cmp	r3, #1
 8005578:	dc18      	bgt.n	80055ac <_dtoa_r+0x994>
 800557a:	9b02      	ldr	r3, [sp, #8]
 800557c:	b9b3      	cbnz	r3, 80055ac <_dtoa_r+0x994>
 800557e:	9b03      	ldr	r3, [sp, #12]
 8005580:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005584:	b9a3      	cbnz	r3, 80055b0 <_dtoa_r+0x998>
 8005586:	9b03      	ldr	r3, [sp, #12]
 8005588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800558c:	0d1b      	lsrs	r3, r3, #20
 800558e:	051b      	lsls	r3, r3, #20
 8005590:	b12b      	cbz	r3, 800559e <_dtoa_r+0x986>
 8005592:	9b07      	ldr	r3, [sp, #28]
 8005594:	f108 0801 	add.w	r8, r8, #1
 8005598:	3301      	adds	r3, #1
 800559a:	9307      	str	r3, [sp, #28]
 800559c:	2301      	movs	r3, #1
 800559e:	9308      	str	r3, [sp, #32]
 80055a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f47f af11 	bne.w	80053ca <_dtoa_r+0x7b2>
 80055a8:	2001      	movs	r0, #1
 80055aa:	e716      	b.n	80053da <_dtoa_r+0x7c2>
 80055ac:	2300      	movs	r3, #0
 80055ae:	e7f6      	b.n	800559e <_dtoa_r+0x986>
 80055b0:	9b02      	ldr	r3, [sp, #8]
 80055b2:	e7f4      	b.n	800559e <_dtoa_r+0x986>
 80055b4:	f43f af23 	beq.w	80053fe <_dtoa_r+0x7e6>
 80055b8:	9a07      	ldr	r2, [sp, #28]
 80055ba:	331c      	adds	r3, #28
 80055bc:	441a      	add	r2, r3
 80055be:	4498      	add	r8, r3
 80055c0:	441d      	add	r5, r3
 80055c2:	4613      	mov	r3, r2
 80055c4:	e71a      	b.n	80053fc <_dtoa_r+0x7e4>
 80055c6:	4603      	mov	r3, r0
 80055c8:	e7f6      	b.n	80055b8 <_dtoa_r+0x9a0>
 80055ca:	bf00      	nop
 80055cc:	40240000 	.word	0x40240000
 80055d0:	f1b9 0f00 	cmp.w	r9, #0
 80055d4:	dc33      	bgt.n	800563e <_dtoa_r+0xa26>
 80055d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80055d8:	2b02      	cmp	r3, #2
 80055da:	dd30      	ble.n	800563e <_dtoa_r+0xa26>
 80055dc:	f8cd 9010 	str.w	r9, [sp, #16]
 80055e0:	9b04      	ldr	r3, [sp, #16]
 80055e2:	b963      	cbnz	r3, 80055fe <_dtoa_r+0x9e6>
 80055e4:	4631      	mov	r1, r6
 80055e6:	2205      	movs	r2, #5
 80055e8:	4620      	mov	r0, r4
 80055ea:	f000 f955 	bl	8005898 <__multadd>
 80055ee:	4601      	mov	r1, r0
 80055f0:	4606      	mov	r6, r0
 80055f2:	4650      	mov	r0, sl
 80055f4:	f000 fb0d 	bl	8005c12 <__mcmp>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	f73f ad5c 	bgt.w	80050b6 <_dtoa_r+0x49e>
 80055fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005600:	9d06      	ldr	r5, [sp, #24]
 8005602:	ea6f 0b03 	mvn.w	fp, r3
 8005606:	2300      	movs	r3, #0
 8005608:	9307      	str	r3, [sp, #28]
 800560a:	4631      	mov	r1, r6
 800560c:	4620      	mov	r0, r4
 800560e:	f000 f92c 	bl	800586a <_Bfree>
 8005612:	2f00      	cmp	r7, #0
 8005614:	f43f ae4b 	beq.w	80052ae <_dtoa_r+0x696>
 8005618:	9b07      	ldr	r3, [sp, #28]
 800561a:	b12b      	cbz	r3, 8005628 <_dtoa_r+0xa10>
 800561c:	42bb      	cmp	r3, r7
 800561e:	d003      	beq.n	8005628 <_dtoa_r+0xa10>
 8005620:	4619      	mov	r1, r3
 8005622:	4620      	mov	r0, r4
 8005624:	f000 f921 	bl	800586a <_Bfree>
 8005628:	4639      	mov	r1, r7
 800562a:	4620      	mov	r0, r4
 800562c:	f000 f91d 	bl	800586a <_Bfree>
 8005630:	e63d      	b.n	80052ae <_dtoa_r+0x696>
 8005632:	2600      	movs	r6, #0
 8005634:	4637      	mov	r7, r6
 8005636:	e7e2      	b.n	80055fe <_dtoa_r+0x9e6>
 8005638:	46bb      	mov	fp, r7
 800563a:	4637      	mov	r7, r6
 800563c:	e53b      	b.n	80050b6 <_dtoa_r+0x49e>
 800563e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005640:	f8cd 9010 	str.w	r9, [sp, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	f47f af12 	bne.w	800546e <_dtoa_r+0x856>
 800564a:	9d06      	ldr	r5, [sp, #24]
 800564c:	4631      	mov	r1, r6
 800564e:	4650      	mov	r0, sl
 8005650:	f7ff fa55 	bl	8004afe <quorem>
 8005654:	9b06      	ldr	r3, [sp, #24]
 8005656:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800565a:	f805 9b01 	strb.w	r9, [r5], #1
 800565e:	9a04      	ldr	r2, [sp, #16]
 8005660:	1aeb      	subs	r3, r5, r3
 8005662:	429a      	cmp	r2, r3
 8005664:	f300 8081 	bgt.w	800576a <_dtoa_r+0xb52>
 8005668:	9b06      	ldr	r3, [sp, #24]
 800566a:	2a01      	cmp	r2, #1
 800566c:	bfac      	ite	ge
 800566e:	189b      	addge	r3, r3, r2
 8005670:	3301      	addlt	r3, #1
 8005672:	4698      	mov	r8, r3
 8005674:	2300      	movs	r3, #0
 8005676:	9307      	str	r3, [sp, #28]
 8005678:	4651      	mov	r1, sl
 800567a:	2201      	movs	r2, #1
 800567c:	4620      	mov	r0, r4
 800567e:	f000 fa77 	bl	8005b70 <__lshift>
 8005682:	4631      	mov	r1, r6
 8005684:	4682      	mov	sl, r0
 8005686:	f000 fac4 	bl	8005c12 <__mcmp>
 800568a:	2800      	cmp	r0, #0
 800568c:	dc34      	bgt.n	80056f8 <_dtoa_r+0xae0>
 800568e:	d102      	bne.n	8005696 <_dtoa_r+0xa7e>
 8005690:	f019 0f01 	tst.w	r9, #1
 8005694:	d130      	bne.n	80056f8 <_dtoa_r+0xae0>
 8005696:	4645      	mov	r5, r8
 8005698:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800569c:	1e6a      	subs	r2, r5, #1
 800569e:	2b30      	cmp	r3, #48	; 0x30
 80056a0:	d1b3      	bne.n	800560a <_dtoa_r+0x9f2>
 80056a2:	4615      	mov	r5, r2
 80056a4:	e7f8      	b.n	8005698 <_dtoa_r+0xa80>
 80056a6:	4638      	mov	r0, r7
 80056a8:	e6ff      	b.n	80054aa <_dtoa_r+0x892>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e722      	b.n	80054f4 <_dtoa_r+0x8dc>
 80056ae:	9a02      	ldr	r2, [sp, #8]
 80056b0:	2a00      	cmp	r2, #0
 80056b2:	db04      	blt.n	80056be <_dtoa_r+0xaa6>
 80056b4:	d128      	bne.n	8005708 <_dtoa_r+0xaf0>
 80056b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80056b8:	bb32      	cbnz	r2, 8005708 <_dtoa_r+0xaf0>
 80056ba:	9a08      	ldr	r2, [sp, #32]
 80056bc:	bb22      	cbnz	r2, 8005708 <_dtoa_r+0xaf0>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f77f af32 	ble.w	8005528 <_dtoa_r+0x910>
 80056c4:	4651      	mov	r1, sl
 80056c6:	2201      	movs	r2, #1
 80056c8:	4620      	mov	r0, r4
 80056ca:	f000 fa51 	bl	8005b70 <__lshift>
 80056ce:	4631      	mov	r1, r6
 80056d0:	4682      	mov	sl, r0
 80056d2:	f000 fa9e 	bl	8005c12 <__mcmp>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	dc05      	bgt.n	80056e6 <_dtoa_r+0xace>
 80056da:	f47f af25 	bne.w	8005528 <_dtoa_r+0x910>
 80056de:	f019 0f01 	tst.w	r9, #1
 80056e2:	f43f af21 	beq.w	8005528 <_dtoa_r+0x910>
 80056e6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80056ea:	f47f af1b 	bne.w	8005524 <_dtoa_r+0x90c>
 80056ee:	2339      	movs	r3, #57	; 0x39
 80056f0:	f108 0801 	add.w	r8, r8, #1
 80056f4:	f808 3c01 	strb.w	r3, [r8, #-1]
 80056f8:	4645      	mov	r5, r8
 80056fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056fe:	1e6a      	subs	r2, r5, #1
 8005700:	2b39      	cmp	r3, #57	; 0x39
 8005702:	d03a      	beq.n	800577a <_dtoa_r+0xb62>
 8005704:	3301      	adds	r3, #1
 8005706:	e03f      	b.n	8005788 <_dtoa_r+0xb70>
 8005708:	2b00      	cmp	r3, #0
 800570a:	f108 0501 	add.w	r5, r8, #1
 800570e:	dd05      	ble.n	800571c <_dtoa_r+0xb04>
 8005710:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005714:	d0eb      	beq.n	80056ee <_dtoa_r+0xad6>
 8005716:	f109 0901 	add.w	r9, r9, #1
 800571a:	e707      	b.n	800552c <_dtoa_r+0x914>
 800571c:	9b06      	ldr	r3, [sp, #24]
 800571e:	9a04      	ldr	r2, [sp, #16]
 8005720:	1aeb      	subs	r3, r5, r3
 8005722:	4293      	cmp	r3, r2
 8005724:	46a8      	mov	r8, r5
 8005726:	f805 9c01 	strb.w	r9, [r5, #-1]
 800572a:	d0a5      	beq.n	8005678 <_dtoa_r+0xa60>
 800572c:	4651      	mov	r1, sl
 800572e:	2300      	movs	r3, #0
 8005730:	220a      	movs	r2, #10
 8005732:	4620      	mov	r0, r4
 8005734:	f000 f8b0 	bl	8005898 <__multadd>
 8005738:	9b07      	ldr	r3, [sp, #28]
 800573a:	4682      	mov	sl, r0
 800573c:	42bb      	cmp	r3, r7
 800573e:	f04f 020a 	mov.w	r2, #10
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	9907      	ldr	r1, [sp, #28]
 8005748:	4620      	mov	r0, r4
 800574a:	d104      	bne.n	8005756 <_dtoa_r+0xb3e>
 800574c:	f000 f8a4 	bl	8005898 <__multadd>
 8005750:	9007      	str	r0, [sp, #28]
 8005752:	4607      	mov	r7, r0
 8005754:	e6b1      	b.n	80054ba <_dtoa_r+0x8a2>
 8005756:	f000 f89f 	bl	8005898 <__multadd>
 800575a:	2300      	movs	r3, #0
 800575c:	9007      	str	r0, [sp, #28]
 800575e:	220a      	movs	r2, #10
 8005760:	4639      	mov	r1, r7
 8005762:	4620      	mov	r0, r4
 8005764:	f000 f898 	bl	8005898 <__multadd>
 8005768:	e7f3      	b.n	8005752 <_dtoa_r+0xb3a>
 800576a:	4651      	mov	r1, sl
 800576c:	2300      	movs	r3, #0
 800576e:	220a      	movs	r2, #10
 8005770:	4620      	mov	r0, r4
 8005772:	f000 f891 	bl	8005898 <__multadd>
 8005776:	4682      	mov	sl, r0
 8005778:	e768      	b.n	800564c <_dtoa_r+0xa34>
 800577a:	9b06      	ldr	r3, [sp, #24]
 800577c:	4293      	cmp	r3, r2
 800577e:	d105      	bne.n	800578c <_dtoa_r+0xb74>
 8005780:	2331      	movs	r3, #49	; 0x31
 8005782:	9a06      	ldr	r2, [sp, #24]
 8005784:	f10b 0b01 	add.w	fp, fp, #1
 8005788:	7013      	strb	r3, [r2, #0]
 800578a:	e73e      	b.n	800560a <_dtoa_r+0x9f2>
 800578c:	4615      	mov	r5, r2
 800578e:	e7b4      	b.n	80056fa <_dtoa_r+0xae2>
 8005790:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <_dtoa_r+0xba0>)
 8005792:	f7ff baa3 	b.w	8004cdc <_dtoa_r+0xc4>
 8005796:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005798:	2b00      	cmp	r3, #0
 800579a:	f47f aa7d 	bne.w	8004c98 <_dtoa_r+0x80>
 800579e:	4b07      	ldr	r3, [pc, #28]	; (80057bc <_dtoa_r+0xba4>)
 80057a0:	f7ff ba9c 	b.w	8004cdc <_dtoa_r+0xc4>
 80057a4:	9b04      	ldr	r3, [sp, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f73f af4f 	bgt.w	800564a <_dtoa_r+0xa32>
 80057ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	f77f af4b 	ble.w	800564a <_dtoa_r+0xa32>
 80057b4:	e714      	b.n	80055e0 <_dtoa_r+0x9c8>
 80057b6:	bf00      	nop
 80057b8:	08005f30 	.word	0x08005f30
 80057bc:	08005f32 	.word	0x08005f32

080057c0 <_localeconv_r>:
 80057c0:	4b04      	ldr	r3, [pc, #16]	; (80057d4 <_localeconv_r+0x14>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6a18      	ldr	r0, [r3, #32]
 80057c6:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <_localeconv_r+0x18>)
 80057c8:	2800      	cmp	r0, #0
 80057ca:	bf08      	it	eq
 80057cc:	4618      	moveq	r0, r3
 80057ce:	30f0      	adds	r0, #240	; 0xf0
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	2000000c 	.word	0x2000000c
 80057d8:	20000070 	.word	0x20000070

080057dc <malloc>:
 80057dc:	4b02      	ldr	r3, [pc, #8]	; (80057e8 <malloc+0xc>)
 80057de:	4601      	mov	r1, r0
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	f000 baed 	b.w	8005dc0 <_malloc_r>
 80057e6:	bf00      	nop
 80057e8:	2000000c 	.word	0x2000000c

080057ec <memcpy>:
 80057ec:	b510      	push	{r4, lr}
 80057ee:	1e43      	subs	r3, r0, #1
 80057f0:	440a      	add	r2, r1
 80057f2:	4291      	cmp	r1, r2
 80057f4:	d100      	bne.n	80057f8 <memcpy+0xc>
 80057f6:	bd10      	pop	{r4, pc}
 80057f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005800:	e7f7      	b.n	80057f2 <memcpy+0x6>

08005802 <_Balloc>:
 8005802:	b570      	push	{r4, r5, r6, lr}
 8005804:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005806:	4604      	mov	r4, r0
 8005808:	460e      	mov	r6, r1
 800580a:	b93d      	cbnz	r5, 800581c <_Balloc+0x1a>
 800580c:	2010      	movs	r0, #16
 800580e:	f7ff ffe5 	bl	80057dc <malloc>
 8005812:	6260      	str	r0, [r4, #36]	; 0x24
 8005814:	6045      	str	r5, [r0, #4]
 8005816:	6085      	str	r5, [r0, #8]
 8005818:	6005      	str	r5, [r0, #0]
 800581a:	60c5      	str	r5, [r0, #12]
 800581c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800581e:	68eb      	ldr	r3, [r5, #12]
 8005820:	b183      	cbz	r3, 8005844 <_Balloc+0x42>
 8005822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800582a:	b9b8      	cbnz	r0, 800585c <_Balloc+0x5a>
 800582c:	2101      	movs	r1, #1
 800582e:	fa01 f506 	lsl.w	r5, r1, r6
 8005832:	1d6a      	adds	r2, r5, #5
 8005834:	0092      	lsls	r2, r2, #2
 8005836:	4620      	mov	r0, r4
 8005838:	f000 fab3 	bl	8005da2 <_calloc_r>
 800583c:	b160      	cbz	r0, 8005858 <_Balloc+0x56>
 800583e:	6046      	str	r6, [r0, #4]
 8005840:	6085      	str	r5, [r0, #8]
 8005842:	e00e      	b.n	8005862 <_Balloc+0x60>
 8005844:	2221      	movs	r2, #33	; 0x21
 8005846:	2104      	movs	r1, #4
 8005848:	4620      	mov	r0, r4
 800584a:	f000 faaa 	bl	8005da2 <_calloc_r>
 800584e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005850:	60e8      	str	r0, [r5, #12]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e4      	bne.n	8005822 <_Balloc+0x20>
 8005858:	2000      	movs	r0, #0
 800585a:	bd70      	pop	{r4, r5, r6, pc}
 800585c:	6802      	ldr	r2, [r0, #0]
 800585e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005862:	2300      	movs	r3, #0
 8005864:	6103      	str	r3, [r0, #16]
 8005866:	60c3      	str	r3, [r0, #12]
 8005868:	bd70      	pop	{r4, r5, r6, pc}

0800586a <_Bfree>:
 800586a:	b570      	push	{r4, r5, r6, lr}
 800586c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800586e:	4606      	mov	r6, r0
 8005870:	460d      	mov	r5, r1
 8005872:	b93c      	cbnz	r4, 8005884 <_Bfree+0x1a>
 8005874:	2010      	movs	r0, #16
 8005876:	f7ff ffb1 	bl	80057dc <malloc>
 800587a:	6270      	str	r0, [r6, #36]	; 0x24
 800587c:	6044      	str	r4, [r0, #4]
 800587e:	6084      	str	r4, [r0, #8]
 8005880:	6004      	str	r4, [r0, #0]
 8005882:	60c4      	str	r4, [r0, #12]
 8005884:	b13d      	cbz	r5, 8005896 <_Bfree+0x2c>
 8005886:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005888:	686a      	ldr	r2, [r5, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005890:	6029      	str	r1, [r5, #0]
 8005892:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005896:	bd70      	pop	{r4, r5, r6, pc}

08005898 <__multadd>:
 8005898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800589c:	461f      	mov	r7, r3
 800589e:	4606      	mov	r6, r0
 80058a0:	460c      	mov	r4, r1
 80058a2:	2300      	movs	r3, #0
 80058a4:	690d      	ldr	r5, [r1, #16]
 80058a6:	f101 0e14 	add.w	lr, r1, #20
 80058aa:	f8de 0000 	ldr.w	r0, [lr]
 80058ae:	3301      	adds	r3, #1
 80058b0:	b281      	uxth	r1, r0
 80058b2:	fb02 7101 	mla	r1, r2, r1, r7
 80058b6:	0c00      	lsrs	r0, r0, #16
 80058b8:	0c0f      	lsrs	r7, r1, #16
 80058ba:	fb02 7000 	mla	r0, r2, r0, r7
 80058be:	b289      	uxth	r1, r1
 80058c0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80058c4:	429d      	cmp	r5, r3
 80058c6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80058ca:	f84e 1b04 	str.w	r1, [lr], #4
 80058ce:	dcec      	bgt.n	80058aa <__multadd+0x12>
 80058d0:	b1d7      	cbz	r7, 8005908 <__multadd+0x70>
 80058d2:	68a3      	ldr	r3, [r4, #8]
 80058d4:	429d      	cmp	r5, r3
 80058d6:	db12      	blt.n	80058fe <__multadd+0x66>
 80058d8:	6861      	ldr	r1, [r4, #4]
 80058da:	4630      	mov	r0, r6
 80058dc:	3101      	adds	r1, #1
 80058de:	f7ff ff90 	bl	8005802 <_Balloc>
 80058e2:	4680      	mov	r8, r0
 80058e4:	6922      	ldr	r2, [r4, #16]
 80058e6:	f104 010c 	add.w	r1, r4, #12
 80058ea:	3202      	adds	r2, #2
 80058ec:	0092      	lsls	r2, r2, #2
 80058ee:	300c      	adds	r0, #12
 80058f0:	f7ff ff7c 	bl	80057ec <memcpy>
 80058f4:	4621      	mov	r1, r4
 80058f6:	4630      	mov	r0, r6
 80058f8:	f7ff ffb7 	bl	800586a <_Bfree>
 80058fc:	4644      	mov	r4, r8
 80058fe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005902:	3501      	adds	r5, #1
 8005904:	615f      	str	r7, [r3, #20]
 8005906:	6125      	str	r5, [r4, #16]
 8005908:	4620      	mov	r0, r4
 800590a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800590e <__hi0bits>:
 800590e:	0c02      	lsrs	r2, r0, #16
 8005910:	0412      	lsls	r2, r2, #16
 8005912:	4603      	mov	r3, r0
 8005914:	b9b2      	cbnz	r2, 8005944 <__hi0bits+0x36>
 8005916:	0403      	lsls	r3, r0, #16
 8005918:	2010      	movs	r0, #16
 800591a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800591e:	bf04      	itt	eq
 8005920:	021b      	lsleq	r3, r3, #8
 8005922:	3008      	addeq	r0, #8
 8005924:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005928:	bf04      	itt	eq
 800592a:	011b      	lsleq	r3, r3, #4
 800592c:	3004      	addeq	r0, #4
 800592e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005932:	bf04      	itt	eq
 8005934:	009b      	lsleq	r3, r3, #2
 8005936:	3002      	addeq	r0, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	db06      	blt.n	800594a <__hi0bits+0x3c>
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	d503      	bpl.n	8005948 <__hi0bits+0x3a>
 8005940:	3001      	adds	r0, #1
 8005942:	4770      	bx	lr
 8005944:	2000      	movs	r0, #0
 8005946:	e7e8      	b.n	800591a <__hi0bits+0xc>
 8005948:	2020      	movs	r0, #32
 800594a:	4770      	bx	lr

0800594c <__lo0bits>:
 800594c:	6803      	ldr	r3, [r0, #0]
 800594e:	4601      	mov	r1, r0
 8005950:	f013 0207 	ands.w	r2, r3, #7
 8005954:	d00b      	beq.n	800596e <__lo0bits+0x22>
 8005956:	07da      	lsls	r2, r3, #31
 8005958:	d423      	bmi.n	80059a2 <__lo0bits+0x56>
 800595a:	0798      	lsls	r0, r3, #30
 800595c:	bf49      	itett	mi
 800595e:	085b      	lsrmi	r3, r3, #1
 8005960:	089b      	lsrpl	r3, r3, #2
 8005962:	2001      	movmi	r0, #1
 8005964:	600b      	strmi	r3, [r1, #0]
 8005966:	bf5c      	itt	pl
 8005968:	600b      	strpl	r3, [r1, #0]
 800596a:	2002      	movpl	r0, #2
 800596c:	4770      	bx	lr
 800596e:	b298      	uxth	r0, r3
 8005970:	b9a8      	cbnz	r0, 800599e <__lo0bits+0x52>
 8005972:	2010      	movs	r0, #16
 8005974:	0c1b      	lsrs	r3, r3, #16
 8005976:	f013 0fff 	tst.w	r3, #255	; 0xff
 800597a:	bf04      	itt	eq
 800597c:	0a1b      	lsreq	r3, r3, #8
 800597e:	3008      	addeq	r0, #8
 8005980:	071a      	lsls	r2, r3, #28
 8005982:	bf04      	itt	eq
 8005984:	091b      	lsreq	r3, r3, #4
 8005986:	3004      	addeq	r0, #4
 8005988:	079a      	lsls	r2, r3, #30
 800598a:	bf04      	itt	eq
 800598c:	089b      	lsreq	r3, r3, #2
 800598e:	3002      	addeq	r0, #2
 8005990:	07da      	lsls	r2, r3, #31
 8005992:	d402      	bmi.n	800599a <__lo0bits+0x4e>
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	d006      	beq.n	80059a6 <__lo0bits+0x5a>
 8005998:	3001      	adds	r0, #1
 800599a:	600b      	str	r3, [r1, #0]
 800599c:	4770      	bx	lr
 800599e:	4610      	mov	r0, r2
 80059a0:	e7e9      	b.n	8005976 <__lo0bits+0x2a>
 80059a2:	2000      	movs	r0, #0
 80059a4:	4770      	bx	lr
 80059a6:	2020      	movs	r0, #32
 80059a8:	4770      	bx	lr

080059aa <__i2b>:
 80059aa:	b510      	push	{r4, lr}
 80059ac:	460c      	mov	r4, r1
 80059ae:	2101      	movs	r1, #1
 80059b0:	f7ff ff27 	bl	8005802 <_Balloc>
 80059b4:	2201      	movs	r2, #1
 80059b6:	6144      	str	r4, [r0, #20]
 80059b8:	6102      	str	r2, [r0, #16]
 80059ba:	bd10      	pop	{r4, pc}

080059bc <__multiply>:
 80059bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c0:	4614      	mov	r4, r2
 80059c2:	690a      	ldr	r2, [r1, #16]
 80059c4:	6923      	ldr	r3, [r4, #16]
 80059c6:	4689      	mov	r9, r1
 80059c8:	429a      	cmp	r2, r3
 80059ca:	bfbe      	ittt	lt
 80059cc:	460b      	movlt	r3, r1
 80059ce:	46a1      	movlt	r9, r4
 80059d0:	461c      	movlt	r4, r3
 80059d2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80059d6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80059da:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80059de:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80059e2:	eb07 060a 	add.w	r6, r7, sl
 80059e6:	429e      	cmp	r6, r3
 80059e8:	bfc8      	it	gt
 80059ea:	3101      	addgt	r1, #1
 80059ec:	f7ff ff09 	bl	8005802 <_Balloc>
 80059f0:	f100 0514 	add.w	r5, r0, #20
 80059f4:	462b      	mov	r3, r5
 80059f6:	2200      	movs	r2, #0
 80059f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80059fc:	4543      	cmp	r3, r8
 80059fe:	d316      	bcc.n	8005a2e <__multiply+0x72>
 8005a00:	f104 0214 	add.w	r2, r4, #20
 8005a04:	f109 0114 	add.w	r1, r9, #20
 8005a08:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8005a0c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005a10:	9301      	str	r3, [sp, #4]
 8005a12:	9c01      	ldr	r4, [sp, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	4294      	cmp	r4, r2
 8005a18:	d80c      	bhi.n	8005a34 <__multiply+0x78>
 8005a1a:	2e00      	cmp	r6, #0
 8005a1c:	dd03      	ble.n	8005a26 <__multiply+0x6a>
 8005a1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d054      	beq.n	8005ad0 <__multiply+0x114>
 8005a26:	6106      	str	r6, [r0, #16]
 8005a28:	b003      	add	sp, #12
 8005a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a2e:	f843 2b04 	str.w	r2, [r3], #4
 8005a32:	e7e3      	b.n	80059fc <__multiply+0x40>
 8005a34:	f8b3 a000 	ldrh.w	sl, [r3]
 8005a38:	3204      	adds	r2, #4
 8005a3a:	f1ba 0f00 	cmp.w	sl, #0
 8005a3e:	d020      	beq.n	8005a82 <__multiply+0xc6>
 8005a40:	46ae      	mov	lr, r5
 8005a42:	4689      	mov	r9, r1
 8005a44:	f04f 0c00 	mov.w	ip, #0
 8005a48:	f859 4b04 	ldr.w	r4, [r9], #4
 8005a4c:	f8be b000 	ldrh.w	fp, [lr]
 8005a50:	b2a3      	uxth	r3, r4
 8005a52:	fb0a b303 	mla	r3, sl, r3, fp
 8005a56:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8005a5a:	f8de 4000 	ldr.w	r4, [lr]
 8005a5e:	4463      	add	r3, ip
 8005a60:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005a64:	fb0a c40b 	mla	r4, sl, fp, ip
 8005a68:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005a72:	454f      	cmp	r7, r9
 8005a74:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005a78:	f84e 3b04 	str.w	r3, [lr], #4
 8005a7c:	d8e4      	bhi.n	8005a48 <__multiply+0x8c>
 8005a7e:	f8ce c000 	str.w	ip, [lr]
 8005a82:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8005a86:	f1b9 0f00 	cmp.w	r9, #0
 8005a8a:	d01f      	beq.n	8005acc <__multiply+0x110>
 8005a8c:	46ae      	mov	lr, r5
 8005a8e:	468c      	mov	ip, r1
 8005a90:	f04f 0a00 	mov.w	sl, #0
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	f8bc 4000 	ldrh.w	r4, [ip]
 8005a9a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	fb09 b404 	mla	r4, r9, r4, fp
 8005aa4:	44a2      	add	sl, r4
 8005aa6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005aaa:	f84e 3b04 	str.w	r3, [lr], #4
 8005aae:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ab2:	f8be 4000 	ldrh.w	r4, [lr]
 8005ab6:	0c1b      	lsrs	r3, r3, #16
 8005ab8:	fb09 4303 	mla	r3, r9, r3, r4
 8005abc:	4567      	cmp	r7, ip
 8005abe:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8005ac2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ac6:	d8e6      	bhi.n	8005a96 <__multiply+0xda>
 8005ac8:	f8ce 3000 	str.w	r3, [lr]
 8005acc:	3504      	adds	r5, #4
 8005ace:	e7a0      	b.n	8005a12 <__multiply+0x56>
 8005ad0:	3e01      	subs	r6, #1
 8005ad2:	e7a2      	b.n	8005a1a <__multiply+0x5e>

08005ad4 <__pow5mult>:
 8005ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ad8:	4615      	mov	r5, r2
 8005ada:	f012 0203 	ands.w	r2, r2, #3
 8005ade:	4606      	mov	r6, r0
 8005ae0:	460f      	mov	r7, r1
 8005ae2:	d007      	beq.n	8005af4 <__pow5mult+0x20>
 8005ae4:	4c21      	ldr	r4, [pc, #132]	; (8005b6c <__pow5mult+0x98>)
 8005ae6:	3a01      	subs	r2, #1
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005aee:	f7ff fed3 	bl	8005898 <__multadd>
 8005af2:	4607      	mov	r7, r0
 8005af4:	10ad      	asrs	r5, r5, #2
 8005af6:	d035      	beq.n	8005b64 <__pow5mult+0x90>
 8005af8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005afa:	b93c      	cbnz	r4, 8005b0c <__pow5mult+0x38>
 8005afc:	2010      	movs	r0, #16
 8005afe:	f7ff fe6d 	bl	80057dc <malloc>
 8005b02:	6270      	str	r0, [r6, #36]	; 0x24
 8005b04:	6044      	str	r4, [r0, #4]
 8005b06:	6084      	str	r4, [r0, #8]
 8005b08:	6004      	str	r4, [r0, #0]
 8005b0a:	60c4      	str	r4, [r0, #12]
 8005b0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005b10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b14:	b94c      	cbnz	r4, 8005b2a <__pow5mult+0x56>
 8005b16:	f240 2171 	movw	r1, #625	; 0x271
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	f7ff ff45 	bl	80059aa <__i2b>
 8005b20:	2300      	movs	r3, #0
 8005b22:	4604      	mov	r4, r0
 8005b24:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b28:	6003      	str	r3, [r0, #0]
 8005b2a:	f04f 0800 	mov.w	r8, #0
 8005b2e:	07eb      	lsls	r3, r5, #31
 8005b30:	d50a      	bpl.n	8005b48 <__pow5mult+0x74>
 8005b32:	4639      	mov	r1, r7
 8005b34:	4622      	mov	r2, r4
 8005b36:	4630      	mov	r0, r6
 8005b38:	f7ff ff40 	bl	80059bc <__multiply>
 8005b3c:	4681      	mov	r9, r0
 8005b3e:	4639      	mov	r1, r7
 8005b40:	4630      	mov	r0, r6
 8005b42:	f7ff fe92 	bl	800586a <_Bfree>
 8005b46:	464f      	mov	r7, r9
 8005b48:	106d      	asrs	r5, r5, #1
 8005b4a:	d00b      	beq.n	8005b64 <__pow5mult+0x90>
 8005b4c:	6820      	ldr	r0, [r4, #0]
 8005b4e:	b938      	cbnz	r0, 8005b60 <__pow5mult+0x8c>
 8005b50:	4622      	mov	r2, r4
 8005b52:	4621      	mov	r1, r4
 8005b54:	4630      	mov	r0, r6
 8005b56:	f7ff ff31 	bl	80059bc <__multiply>
 8005b5a:	6020      	str	r0, [r4, #0]
 8005b5c:	f8c0 8000 	str.w	r8, [r0]
 8005b60:	4604      	mov	r4, r0
 8005b62:	e7e4      	b.n	8005b2e <__pow5mult+0x5a>
 8005b64:	4638      	mov	r0, r7
 8005b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b6a:	bf00      	nop
 8005b6c:	08006030 	.word	0x08006030

08005b70 <__lshift>:
 8005b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	460c      	mov	r4, r1
 8005b76:	4607      	mov	r7, r0
 8005b78:	4616      	mov	r6, r2
 8005b7a:	6923      	ldr	r3, [r4, #16]
 8005b7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005b80:	eb0a 0903 	add.w	r9, sl, r3
 8005b84:	6849      	ldr	r1, [r1, #4]
 8005b86:	68a3      	ldr	r3, [r4, #8]
 8005b88:	f109 0501 	add.w	r5, r9, #1
 8005b8c:	42ab      	cmp	r3, r5
 8005b8e:	db31      	blt.n	8005bf4 <__lshift+0x84>
 8005b90:	4638      	mov	r0, r7
 8005b92:	f7ff fe36 	bl	8005802 <_Balloc>
 8005b96:	2200      	movs	r2, #0
 8005b98:	4680      	mov	r8, r0
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	f100 0314 	add.w	r3, r0, #20
 8005ba0:	4552      	cmp	r2, sl
 8005ba2:	db2a      	blt.n	8005bfa <__lshift+0x8a>
 8005ba4:	6920      	ldr	r0, [r4, #16]
 8005ba6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005baa:	f104 0114 	add.w	r1, r4, #20
 8005bae:	f016 021f 	ands.w	r2, r6, #31
 8005bb2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005bb6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8005bba:	d022      	beq.n	8005c02 <__lshift+0x92>
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8005bc2:	680e      	ldr	r6, [r1, #0]
 8005bc4:	4096      	lsls	r6, r2
 8005bc6:	4330      	orrs	r0, r6
 8005bc8:	f843 0b04 	str.w	r0, [r3], #4
 8005bcc:	f851 0b04 	ldr.w	r0, [r1], #4
 8005bd0:	458e      	cmp	lr, r1
 8005bd2:	fa20 f00c 	lsr.w	r0, r0, ip
 8005bd6:	d8f4      	bhi.n	8005bc2 <__lshift+0x52>
 8005bd8:	6018      	str	r0, [r3, #0]
 8005bda:	b108      	cbz	r0, 8005be0 <__lshift+0x70>
 8005bdc:	f109 0502 	add.w	r5, r9, #2
 8005be0:	3d01      	subs	r5, #1
 8005be2:	4638      	mov	r0, r7
 8005be4:	f8c8 5010 	str.w	r5, [r8, #16]
 8005be8:	4621      	mov	r1, r4
 8005bea:	f7ff fe3e 	bl	800586a <_Bfree>
 8005bee:	4640      	mov	r0, r8
 8005bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf4:	3101      	adds	r1, #1
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	e7c8      	b.n	8005b8c <__lshift+0x1c>
 8005bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005bfe:	3201      	adds	r2, #1
 8005c00:	e7ce      	b.n	8005ba0 <__lshift+0x30>
 8005c02:	3b04      	subs	r3, #4
 8005c04:	f851 2b04 	ldr.w	r2, [r1], #4
 8005c08:	458e      	cmp	lr, r1
 8005c0a:	f843 2f04 	str.w	r2, [r3, #4]!
 8005c0e:	d8f9      	bhi.n	8005c04 <__lshift+0x94>
 8005c10:	e7e6      	b.n	8005be0 <__lshift+0x70>

08005c12 <__mcmp>:
 8005c12:	6903      	ldr	r3, [r0, #16]
 8005c14:	690a      	ldr	r2, [r1, #16]
 8005c16:	b530      	push	{r4, r5, lr}
 8005c18:	1a9b      	subs	r3, r3, r2
 8005c1a:	d10c      	bne.n	8005c36 <__mcmp+0x24>
 8005c1c:	0092      	lsls	r2, r2, #2
 8005c1e:	3014      	adds	r0, #20
 8005c20:	3114      	adds	r1, #20
 8005c22:	1884      	adds	r4, r0, r2
 8005c24:	4411      	add	r1, r2
 8005c26:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005c2a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005c2e:	4295      	cmp	r5, r2
 8005c30:	d003      	beq.n	8005c3a <__mcmp+0x28>
 8005c32:	d305      	bcc.n	8005c40 <__mcmp+0x2e>
 8005c34:	2301      	movs	r3, #1
 8005c36:	4618      	mov	r0, r3
 8005c38:	bd30      	pop	{r4, r5, pc}
 8005c3a:	42a0      	cmp	r0, r4
 8005c3c:	d3f3      	bcc.n	8005c26 <__mcmp+0x14>
 8005c3e:	e7fa      	b.n	8005c36 <__mcmp+0x24>
 8005c40:	f04f 33ff 	mov.w	r3, #4294967295
 8005c44:	e7f7      	b.n	8005c36 <__mcmp+0x24>

08005c46 <__mdiff>:
 8005c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4a:	460d      	mov	r5, r1
 8005c4c:	4607      	mov	r7, r0
 8005c4e:	4611      	mov	r1, r2
 8005c50:	4628      	mov	r0, r5
 8005c52:	4614      	mov	r4, r2
 8005c54:	f7ff ffdd 	bl	8005c12 <__mcmp>
 8005c58:	1e06      	subs	r6, r0, #0
 8005c5a:	d108      	bne.n	8005c6e <__mdiff+0x28>
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4638      	mov	r0, r7
 8005c60:	f7ff fdcf 	bl	8005802 <_Balloc>
 8005c64:	2301      	movs	r3, #1
 8005c66:	6146      	str	r6, [r0, #20]
 8005c68:	6103      	str	r3, [r0, #16]
 8005c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c6e:	bfa4      	itt	ge
 8005c70:	4623      	movge	r3, r4
 8005c72:	462c      	movge	r4, r5
 8005c74:	4638      	mov	r0, r7
 8005c76:	6861      	ldr	r1, [r4, #4]
 8005c78:	bfa6      	itte	ge
 8005c7a:	461d      	movge	r5, r3
 8005c7c:	2600      	movge	r6, #0
 8005c7e:	2601      	movlt	r6, #1
 8005c80:	f7ff fdbf 	bl	8005802 <_Balloc>
 8005c84:	f04f 0c00 	mov.w	ip, #0
 8005c88:	60c6      	str	r6, [r0, #12]
 8005c8a:	692b      	ldr	r3, [r5, #16]
 8005c8c:	6926      	ldr	r6, [r4, #16]
 8005c8e:	f104 0214 	add.w	r2, r4, #20
 8005c92:	f105 0914 	add.w	r9, r5, #20
 8005c96:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005c9a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005c9e:	f100 0114 	add.w	r1, r0, #20
 8005ca2:	f852 ab04 	ldr.w	sl, [r2], #4
 8005ca6:	f859 5b04 	ldr.w	r5, [r9], #4
 8005caa:	fa1f f38a 	uxth.w	r3, sl
 8005cae:	4463      	add	r3, ip
 8005cb0:	b2ac      	uxth	r4, r5
 8005cb2:	1b1b      	subs	r3, r3, r4
 8005cb4:	0c2c      	lsrs	r4, r5, #16
 8005cb6:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005cba:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005cc4:	45c8      	cmp	r8, r9
 8005cc6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005cca:	4696      	mov	lr, r2
 8005ccc:	f841 4b04 	str.w	r4, [r1], #4
 8005cd0:	d8e7      	bhi.n	8005ca2 <__mdiff+0x5c>
 8005cd2:	45be      	cmp	lr, r7
 8005cd4:	d305      	bcc.n	8005ce2 <__mdiff+0x9c>
 8005cd6:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005cda:	b18b      	cbz	r3, 8005d00 <__mdiff+0xba>
 8005cdc:	6106      	str	r6, [r0, #16]
 8005cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005ce6:	b2a2      	uxth	r2, r4
 8005ce8:	4462      	add	r2, ip
 8005cea:	1413      	asrs	r3, r2, #16
 8005cec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005cf0:	b292      	uxth	r2, r2
 8005cf2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005cf6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005cfa:	f841 2b04 	str.w	r2, [r1], #4
 8005cfe:	e7e8      	b.n	8005cd2 <__mdiff+0x8c>
 8005d00:	3e01      	subs	r6, #1
 8005d02:	e7e8      	b.n	8005cd6 <__mdiff+0x90>

08005d04 <__d2b>:
 8005d04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005d08:	461c      	mov	r4, r3
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	4690      	mov	r8, r2
 8005d0e:	9e08      	ldr	r6, [sp, #32]
 8005d10:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d12:	f7ff fd76 	bl	8005802 <_Balloc>
 8005d16:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005d1a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005d1e:	4607      	mov	r7, r0
 8005d20:	bb34      	cbnz	r4, 8005d70 <__d2b+0x6c>
 8005d22:	9201      	str	r2, [sp, #4]
 8005d24:	f1b8 0f00 	cmp.w	r8, #0
 8005d28:	d027      	beq.n	8005d7a <__d2b+0x76>
 8005d2a:	a802      	add	r0, sp, #8
 8005d2c:	f840 8d08 	str.w	r8, [r0, #-8]!
 8005d30:	f7ff fe0c 	bl	800594c <__lo0bits>
 8005d34:	9900      	ldr	r1, [sp, #0]
 8005d36:	b1f0      	cbz	r0, 8005d76 <__d2b+0x72>
 8005d38:	9a01      	ldr	r2, [sp, #4]
 8005d3a:	f1c0 0320 	rsb	r3, r0, #32
 8005d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d42:	430b      	orrs	r3, r1
 8005d44:	40c2      	lsrs	r2, r0
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	9201      	str	r2, [sp, #4]
 8005d4a:	9b01      	ldr	r3, [sp, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	bf14      	ite	ne
 8005d50:	2102      	movne	r1, #2
 8005d52:	2101      	moveq	r1, #1
 8005d54:	61bb      	str	r3, [r7, #24]
 8005d56:	6139      	str	r1, [r7, #16]
 8005d58:	b1c4      	cbz	r4, 8005d8c <__d2b+0x88>
 8005d5a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005d5e:	4404      	add	r4, r0
 8005d60:	6034      	str	r4, [r6, #0]
 8005d62:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d66:	6028      	str	r0, [r5, #0]
 8005d68:	4638      	mov	r0, r7
 8005d6a:	b002      	add	sp, #8
 8005d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d70:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005d74:	e7d5      	b.n	8005d22 <__d2b+0x1e>
 8005d76:	6179      	str	r1, [r7, #20]
 8005d78:	e7e7      	b.n	8005d4a <__d2b+0x46>
 8005d7a:	a801      	add	r0, sp, #4
 8005d7c:	f7ff fde6 	bl	800594c <__lo0bits>
 8005d80:	2101      	movs	r1, #1
 8005d82:	9b01      	ldr	r3, [sp, #4]
 8005d84:	6139      	str	r1, [r7, #16]
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	3020      	adds	r0, #32
 8005d8a:	e7e5      	b.n	8005d58 <__d2b+0x54>
 8005d8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d90:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005d94:	6030      	str	r0, [r6, #0]
 8005d96:	6918      	ldr	r0, [r3, #16]
 8005d98:	f7ff fdb9 	bl	800590e <__hi0bits>
 8005d9c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005da0:	e7e1      	b.n	8005d66 <__d2b+0x62>

08005da2 <_calloc_r>:
 8005da2:	b538      	push	{r3, r4, r5, lr}
 8005da4:	fb02 f401 	mul.w	r4, r2, r1
 8005da8:	4621      	mov	r1, r4
 8005daa:	f000 f809 	bl	8005dc0 <_malloc_r>
 8005dae:	4605      	mov	r5, r0
 8005db0:	b118      	cbz	r0, 8005dba <_calloc_r+0x18>
 8005db2:	4622      	mov	r2, r4
 8005db4:	2100      	movs	r1, #0
 8005db6:	f7fe fb59 	bl	800446c <memset>
 8005dba:	4628      	mov	r0, r5
 8005dbc:	bd38      	pop	{r3, r4, r5, pc}
	...

08005dc0 <_malloc_r>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	1ccd      	adds	r5, r1, #3
 8005dc4:	f025 0503 	bic.w	r5, r5, #3
 8005dc8:	3508      	adds	r5, #8
 8005dca:	2d0c      	cmp	r5, #12
 8005dcc:	bf38      	it	cc
 8005dce:	250c      	movcc	r5, #12
 8005dd0:	2d00      	cmp	r5, #0
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	db01      	blt.n	8005dda <_malloc_r+0x1a>
 8005dd6:	42a9      	cmp	r1, r5
 8005dd8:	d903      	bls.n	8005de2 <_malloc_r+0x22>
 8005dda:	230c      	movs	r3, #12
 8005ddc:	6033      	str	r3, [r6, #0]
 8005dde:	2000      	movs	r0, #0
 8005de0:	bd70      	pop	{r4, r5, r6, pc}
 8005de2:	f000 f86d 	bl	8005ec0 <__malloc_lock>
 8005de6:	4a23      	ldr	r2, [pc, #140]	; (8005e74 <_malloc_r+0xb4>)
 8005de8:	6814      	ldr	r4, [r2, #0]
 8005dea:	4621      	mov	r1, r4
 8005dec:	b991      	cbnz	r1, 8005e14 <_malloc_r+0x54>
 8005dee:	4c22      	ldr	r4, [pc, #136]	; (8005e78 <_malloc_r+0xb8>)
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	b91b      	cbnz	r3, 8005dfc <_malloc_r+0x3c>
 8005df4:	4630      	mov	r0, r6
 8005df6:	f000 f841 	bl	8005e7c <_sbrk_r>
 8005dfa:	6020      	str	r0, [r4, #0]
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	4630      	mov	r0, r6
 8005e00:	f000 f83c 	bl	8005e7c <_sbrk_r>
 8005e04:	1c43      	adds	r3, r0, #1
 8005e06:	d126      	bne.n	8005e56 <_malloc_r+0x96>
 8005e08:	230c      	movs	r3, #12
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	6033      	str	r3, [r6, #0]
 8005e0e:	f000 f858 	bl	8005ec2 <__malloc_unlock>
 8005e12:	e7e4      	b.n	8005dde <_malloc_r+0x1e>
 8005e14:	680b      	ldr	r3, [r1, #0]
 8005e16:	1b5b      	subs	r3, r3, r5
 8005e18:	d41a      	bmi.n	8005e50 <_malloc_r+0x90>
 8005e1a:	2b0b      	cmp	r3, #11
 8005e1c:	d90f      	bls.n	8005e3e <_malloc_r+0x7e>
 8005e1e:	600b      	str	r3, [r1, #0]
 8005e20:	18cc      	adds	r4, r1, r3
 8005e22:	50cd      	str	r5, [r1, r3]
 8005e24:	4630      	mov	r0, r6
 8005e26:	f000 f84c 	bl	8005ec2 <__malloc_unlock>
 8005e2a:	f104 000b 	add.w	r0, r4, #11
 8005e2e:	1d23      	adds	r3, r4, #4
 8005e30:	f020 0007 	bic.w	r0, r0, #7
 8005e34:	1ac3      	subs	r3, r0, r3
 8005e36:	d01b      	beq.n	8005e70 <_malloc_r+0xb0>
 8005e38:	425a      	negs	r2, r3
 8005e3a:	50e2      	str	r2, [r4, r3]
 8005e3c:	bd70      	pop	{r4, r5, r6, pc}
 8005e3e:	428c      	cmp	r4, r1
 8005e40:	bf0b      	itete	eq
 8005e42:	6863      	ldreq	r3, [r4, #4]
 8005e44:	684b      	ldrne	r3, [r1, #4]
 8005e46:	6013      	streq	r3, [r2, #0]
 8005e48:	6063      	strne	r3, [r4, #4]
 8005e4a:	bf18      	it	ne
 8005e4c:	460c      	movne	r4, r1
 8005e4e:	e7e9      	b.n	8005e24 <_malloc_r+0x64>
 8005e50:	460c      	mov	r4, r1
 8005e52:	6849      	ldr	r1, [r1, #4]
 8005e54:	e7ca      	b.n	8005dec <_malloc_r+0x2c>
 8005e56:	1cc4      	adds	r4, r0, #3
 8005e58:	f024 0403 	bic.w	r4, r4, #3
 8005e5c:	42a0      	cmp	r0, r4
 8005e5e:	d005      	beq.n	8005e6c <_malloc_r+0xac>
 8005e60:	1a21      	subs	r1, r4, r0
 8005e62:	4630      	mov	r0, r6
 8005e64:	f000 f80a 	bl	8005e7c <_sbrk_r>
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d0cd      	beq.n	8005e08 <_malloc_r+0x48>
 8005e6c:	6025      	str	r5, [r4, #0]
 8005e6e:	e7d9      	b.n	8005e24 <_malloc_r+0x64>
 8005e70:	bd70      	pop	{r4, r5, r6, pc}
 8005e72:	bf00      	nop
 8005e74:	20000200 	.word	0x20000200
 8005e78:	20000204 	.word	0x20000204

08005e7c <_sbrk_r>:
 8005e7c:	b538      	push	{r3, r4, r5, lr}
 8005e7e:	2300      	movs	r3, #0
 8005e80:	4c05      	ldr	r4, [pc, #20]	; (8005e98 <_sbrk_r+0x1c>)
 8005e82:	4605      	mov	r5, r0
 8005e84:	4608      	mov	r0, r1
 8005e86:	6023      	str	r3, [r4, #0]
 8005e88:	f7fe f984 	bl	8004194 <_sbrk>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d102      	bne.n	8005e96 <_sbrk_r+0x1a>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	b103      	cbz	r3, 8005e96 <_sbrk_r+0x1a>
 8005e94:	602b      	str	r3, [r5, #0]
 8005e96:	bd38      	pop	{r3, r4, r5, pc}
 8005e98:	200003e4 	.word	0x200003e4

08005e9c <__ascii_mbtowc>:
 8005e9c:	b082      	sub	sp, #8
 8005e9e:	b901      	cbnz	r1, 8005ea2 <__ascii_mbtowc+0x6>
 8005ea0:	a901      	add	r1, sp, #4
 8005ea2:	b142      	cbz	r2, 8005eb6 <__ascii_mbtowc+0x1a>
 8005ea4:	b14b      	cbz	r3, 8005eba <__ascii_mbtowc+0x1e>
 8005ea6:	7813      	ldrb	r3, [r2, #0]
 8005ea8:	600b      	str	r3, [r1, #0]
 8005eaa:	7812      	ldrb	r2, [r2, #0]
 8005eac:	1c10      	adds	r0, r2, #0
 8005eae:	bf18      	it	ne
 8005eb0:	2001      	movne	r0, #1
 8005eb2:	b002      	add	sp, #8
 8005eb4:	4770      	bx	lr
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	e7fb      	b.n	8005eb2 <__ascii_mbtowc+0x16>
 8005eba:	f06f 0001 	mvn.w	r0, #1
 8005ebe:	e7f8      	b.n	8005eb2 <__ascii_mbtowc+0x16>

08005ec0 <__malloc_lock>:
 8005ec0:	4770      	bx	lr

08005ec2 <__malloc_unlock>:
 8005ec2:	4770      	bx	lr

08005ec4 <__ascii_wctomb>:
 8005ec4:	b149      	cbz	r1, 8005eda <__ascii_wctomb+0x16>
 8005ec6:	2aff      	cmp	r2, #255	; 0xff
 8005ec8:	bf8b      	itete	hi
 8005eca:	238a      	movhi	r3, #138	; 0x8a
 8005ecc:	700a      	strbls	r2, [r1, #0]
 8005ece:	6003      	strhi	r3, [r0, #0]
 8005ed0:	2001      	movls	r0, #1
 8005ed2:	bf88      	it	hi
 8005ed4:	f04f 30ff 	movhi.w	r0, #4294967295
 8005ed8:	4770      	bx	lr
 8005eda:	4608      	mov	r0, r1
 8005edc:	4770      	bx	lr
	...

08005ee0 <_init>:
 8005ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee2:	bf00      	nop
 8005ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee6:	bc08      	pop	{r3}
 8005ee8:	469e      	mov	lr, r3
 8005eea:	4770      	bx	lr

08005eec <_fini>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	bf00      	nop
 8005ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef2:	bc08      	pop	{r3}
 8005ef4:	469e      	mov	lr, r3
 8005ef6:	4770      	bx	lr
